
Differential_HighSpeed_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a394  08010718  08010718  00020718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aaac  0801aaac  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801aaac  0801aaac  0002aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aab4  0801aab4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aab4  0801aab4  0002aab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aab8  0801aab8  0002aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801aabc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018cc8  20000200  0801acb4  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20018ec8  0801acb4  00038ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002112a  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000484d  00000000  00000000  00051352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  00055ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00057038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024115  00000000  00000000  00058288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001460d  00000000  00000000  0007c39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d15d4  00000000  00000000  000909aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c64  00000000  00000000  00161ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010700 	.word	0x08010700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08010700 	.word	0x08010700

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f92b 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f00d f98a 	bl	800e2f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f943 	bl	8001296 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f90b 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000020 	.word	0x20000020
 8001044:	20000004 	.word	0x20000004
 8001048:	20000000 	.word	0x20000000

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004
 8001070:	200006f8 	.word	0x200006f8

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200006f8 	.word	0x200006f8

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff3e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff8e 	bl	8001180 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff31 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa2 	bl	80011e8 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff feda 	bl	8001074 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e099      	b.n	8001400 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ec:	e00f      	b.n	800130e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ee:	f7ff fec1 	bl	8001074 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d908      	bls.n	800130e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2220      	movs	r2, #32
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e078      	b.n	8001400 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e8      	bne.n	80012ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_DMA_Init+0x158>)
 8001328:	4013      	ands	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2b04      	cmp	r3, #4
 8001366:	d107      	bne.n	8001378 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4313      	orrs	r3, r2
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4313      	orrs	r3, r2
 8001376:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f023 0307 	bic.w	r3, r3, #7
 800138e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4313      	orrs	r3, r2
 8001398:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d117      	bne.n	80013d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00e      	beq.n	80013d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fab3 	bl	8001920 <DMA_CheckFifoParam>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ce:	2301      	movs	r3, #1
 80013d0:	e016      	b.n	8001400 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fa6a 	bl	80018b4 <DMA_CalcBaseAndBitshift>
 80013e0:	4603      	mov	r3, r0
 80013e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	223f      	movs	r2, #63	; 0x3f
 80013ea:	409a      	lsls	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	f010803f 	.word	0xf010803f

0800140c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_DMA_Start_IT+0x26>
 800142e:	2302      	movs	r3, #2
 8001430:	e048      	b.n	80014c4 <HAL_DMA_Start_IT+0xb8>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d137      	bne.n	80014b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2202      	movs	r2, #2
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f9fc 	bl	8001858 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	223f      	movs	r2, #63	; 0x3f
 8001466:	409a      	lsls	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0216 	orr.w	r2, r2, #22
 800147a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800148a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0208 	orr.w	r2, r2, #8
 80014a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e005      	b.n	80014c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014be:	2302      	movs	r3, #2
 80014c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d004      	beq.n	80014ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00c      	b.n	8001504 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_DMA_IRQHandler+0x258>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a92      	ldr	r2, [pc, #584]	; (800176c <HAL_DMA_IRQHandler+0x25c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0a9b      	lsrs	r3, r3, #10
 8001528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2208      	movs	r2, #8
 800153c:	409a      	lsls	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01a      	beq.n	800157c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0204 	bic.w	r2, r2, #4
 8001562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	2201      	movs	r2, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2201      	movs	r2, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015aa:	f043 0202 	orr.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2204      	movs	r2, #4
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d012      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2204      	movs	r2, #4
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2210      	movs	r2, #16
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d043      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03c      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2210      	movs	r2, #16
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d018      	beq.n	8001652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d024      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
 800163e:	e01f      	b.n	8001680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
 8001650:	e016      	b.n	8001680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0208 	bic.w	r2, r2, #8
 800166e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2220      	movs	r2, #32
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 808e 	beq.w	80017ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8086 	beq.w	80017ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	2220      	movs	r2, #32
 80016a8:	409a      	lsls	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d136      	bne.n	8001728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0216 	bic.w	r2, r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <HAL_DMA_IRQHandler+0x1da>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0208 	bic.w	r2, r2, #8
 80016f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	223f      	movs	r2, #63	; 0x3f
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	2b00      	cmp	r3, #0
 800171c:	d07d      	beq.n	800181a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
        }
        return;
 8001726:	e078      	b.n	800181a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01c      	beq.n	8001770 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d108      	bne.n	8001756 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	2b00      	cmp	r3, #0
 800174a:	d030      	beq.n	80017ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e02b      	b.n	80017ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d027      	beq.n	80017ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e022      	b.n	80017ae <HAL_DMA_IRQHandler+0x29e>
 8001768:	20000020 	.word	0x20000020
 800176c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0210 	bic.w	r2, r2, #16
 800178c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d032      	beq.n	800181c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d022      	beq.n	8001808 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d307      	bcc.n	80017f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f2      	bne.n	80017da <HAL_DMA_IRQHandler+0x2ca>
 80017f4:	e000      	b.n	80017f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e000      	b.n	800181c <HAL_DMA_IRQHandler+0x30c>
        return;
 800181a:	bf00      	nop
    }
  }
}
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop

08001824 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001832:	b2db      	uxtb	r3, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001874:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d108      	bne.n	8001898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001896:	e007      	b.n	80018a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3b10      	subs	r3, #16
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <DMA_CalcBaseAndBitshift+0x64>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <DMA_CalcBaseAndBitshift+0x68>)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d909      	bls.n	80018f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58
 80018f4:	e007      	b.n	8001906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018fe:	f023 0303 	bic.w	r3, r3, #3
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	aaaaaaab 	.word	0xaaaaaaab
 800191c:	08010814 	.word	0x08010814

08001920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11f      	bne.n	800197a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d855      	bhi.n	80019ec <DMA_CheckFifoParam+0xcc>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <DMA_CheckFifoParam+0x28>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001959 	.word	0x08001959
 800194c:	0800196b 	.word	0x0800196b
 8001950:	08001959 	.word	0x08001959
 8001954:	080019ed 	.word	0x080019ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d045      	beq.n	80019f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001968:	e042      	b.n	80019f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001972:	d13f      	bne.n	80019f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001978:	e03c      	b.n	80019f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001982:	d121      	bne.n	80019c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d836      	bhi.n	80019f8 <DMA_CheckFifoParam+0xd8>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <DMA_CheckFifoParam+0x70>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019a7 	.word	0x080019a7
 8001998:	080019a1 	.word	0x080019a1
 800199c:	080019b9 	.word	0x080019b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      break;
 80019a4:	e02f      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b6:	e021      	b.n	80019fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c0:	d11e      	bne.n	8001a00 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019c6:	e01b      	b.n	8001a00 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d902      	bls.n	80019d4 <DMA_CheckFifoParam+0xb4>
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d003      	beq.n	80019da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d2:	e018      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      break;
 80019d8:	e015      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00e      	beq.n	8001a04 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      break;
 80019ea:	e00b      	b.n	8001a04 <DMA_CheckFifoParam+0xe4>
      break;
 80019ec:	bf00      	nop
 80019ee:	e00a      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;
 80019f0:	bf00      	nop
 80019f2:	e008      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;
 80019f4:	bf00      	nop
 80019f6:	e006      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;
 80019f8:	bf00      	nop
 80019fa:	e004      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;
 80019fc:	bf00      	nop
 80019fe:	e002      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a00:	bf00      	nop
 8001a02:	e000      	b.n	8001a06 <DMA_CheckFifoParam+0xe6>
      break;
 8001a04:	bf00      	nop
    }
  } 
  
  return status; 
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e16b      	b.n	8001d08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 815a 	bne.w	8001d02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x4a>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d123      	bne.n	8001aa6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0203 	and.w	r2, r3, #3
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d00b      	beq.n	8001afa <HAL_GPIO_Init+0xe6>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aee:	2b11      	cmp	r3, #17
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80b4 	beq.w	8001d02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a5e      	ldr	r2, [pc, #376]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a5a      	ldr	r2, [pc, #360]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <HAL_GPIO_Init+0x310>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02b      	beq.n	8001c3a <HAL_GPIO_Init+0x226>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a50      	ldr	r2, [pc, #320]	; (8001d28 <HAL_GPIO_Init+0x314>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d025      	beq.n	8001c36 <HAL_GPIO_Init+0x222>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4f      	ldr	r2, [pc, #316]	; (8001d2c <HAL_GPIO_Init+0x318>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01f      	beq.n	8001c32 <HAL_GPIO_Init+0x21e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d019      	beq.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x320>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_GPIO_Init+0x324>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_GPIO_Init+0x328>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x20a>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00e      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c1e:	2308      	movs	r3, #8
 8001c20:	e00c      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00a      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x228>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5a:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7e:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca8:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f ae90 	bls.w	8001a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	3724      	adds	r7, #36	; 0x24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40021400 	.word	0x40021400
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d104      	bne.n	8001dce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	041a      	lsls	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00a fb0e 	bl	800c420 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e10f      	b.n	8002042 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f00c fa88 	bl	800e34c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	; 0x24
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e54:	f002 ff74 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a7b      	ldr	r2, [pc, #492]	; (800204c <HAL_I2C_Init+0x23c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d807      	bhi.n	8001e74 <HAL_I2C_Init+0x64>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_I2C_Init+0x240>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e006      	b.n	8001e82 <HAL_I2C_Init+0x72>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a77      	ldr	r2, [pc, #476]	; (8002054 <HAL_I2C_Init+0x244>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0db      	b.n	8002042 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_I2C_Init+0x248>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a64      	ldr	r2, [pc, #400]	; (800204c <HAL_I2C_Init+0x23c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_I2C_Init+0xb4>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	e009      	b.n	8001ed8 <HAL_I2C_Init+0xc8>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4a63      	ldr	r2, [pc, #396]	; (800205c <HAL_I2C_Init+0x24c>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4956      	ldr	r1, [pc, #344]	; (800204c <HAL_I2C_Init+0x23c>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d80d      	bhi.n	8001f14 <HAL_I2C_Init+0x104>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e59      	subs	r1, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	bf38      	it	cc
 8001f10:	2304      	movcc	r3, #4
 8001f12:	e04f      	b.n	8001fb4 <HAL_I2C_Init+0x1a4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <HAL_I2C_Init+0x130>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_I2C_Init+0x156>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Init+0x15e>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e022      	b.n	8001fb4 <HAL_I2C_Init+0x1a4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <HAL_I2C_Init+0x184>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e58      	subs	r0, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Init+0x1a4>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6911      	ldr	r1, [r2, #16]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	000186a0 	.word	0x000186a0
 8002050:	001e847f 	.word	0x001e847f
 8002054:	003d08ff 	.word	0x003d08ff
 8002058:	431bde83 	.word	0x431bde83
 800205c:	10624dd3 	.word	0x10624dd3

08002060 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	d158      	bne.n	800212c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_I2C_Slave_Receive_IT+0x26>
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e051      	b.n	800212e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2C_Slave_Receive_IT+0x38>
 8002094:	2302      	movs	r3, #2
 8002096:	e04a      	b.n	800212e <HAL_I2C_Slave_Receive_IT+0xce>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d007      	beq.n	80020be <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2222      	movs	r2, #34	; 0x22
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_I2C_Slave_Receive_IT+0xdc>)
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800210e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002126:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	ffff0000 	.word	0xffff0000

08002140 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	f040 809f 	bne.w	800229a <HAL_I2C_Slave_Transmit_DMA+0x15a>
  {
    if ((pData == NULL) || (Size == 0U))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e097      	b.n	800229c <HAL_I2C_Slave_Transmit_DMA+0x15c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Slave_Transmit_DMA+0x3a>
 8002176:	2302      	movs	r3, #2
 8002178:	e090      	b.n	800229c <HAL_I2C_Slave_Transmit_DMA+0x15c>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d007      	beq.n	80021a0 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	; 0x21
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_I2C_Slave_Transmit_DMA+0x16c>)
 80021f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2200      	movs	r2, #0
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	2200      	movs	r2, #0
 8002208:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220e:	2200      	movs	r2, #0
 8002210:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3310      	adds	r3, #16
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	f7ff f8f0 	bl	800140c <HAL_DMA_Start_IT>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]

    if (dmaxferstatus == HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11d      	bne.n	8002272 <HAL_I2C_Slave_Transmit_DMA+0x132>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800225c:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e014      	b.n	800229c <HAL_I2C_Slave_Transmit_DMA+0x15c>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_I2C_Slave_Transmit_DMA+0x15c>
    }
  }
  else
  {
    return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffff0000 	.word	0xffff0000
 80022a8:	08003f2d 	.word	0x08003f2d
 80022ac:	080040c7 	.word	0x080040c7

080022b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ca:	f7fe fed3 	bl	8001074 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b20      	cmp	r3, #32
 80022da:	f040 8208 	bne.w	80026ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2319      	movs	r3, #25
 80022e4:	2201      	movs	r2, #1
 80022e6:	497b      	ldr	r1, [pc, #492]	; (80024d4 <HAL_I2C_Mem_Read+0x224>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f001 ff90 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
 80022f6:	e1fb      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Mem_Read+0x56>
 8002302:	2302      	movs	r3, #2
 8002304:	e1f4      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d007      	beq.n	800232c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2222      	movs	r2, #34	; 0x22
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a5b      	ldr	r2, [pc, #364]	; (80024d8 <HAL_I2C_Mem_Read+0x228>)
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800236e:	88f8      	ldrh	r0, [r7, #6]
 8002370:	893a      	ldrh	r2, [r7, #8]
 8002372:	8979      	ldrh	r1, [r7, #10]
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4603      	mov	r3, r0
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f001 fd04 	bl	8003d8c <I2C_RequestMemoryRead>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1b0      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	2b00      	cmp	r3, #0
 8002394:	d113      	bne.n	80023be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e184      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11b      	bne.n	80023fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e164      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b02      	cmp	r3, #2
 8002404:	d11b      	bne.n	800243e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	e144      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002454:	e138      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b03      	cmp	r3, #3
 800245c:	f200 80f1 	bhi.w	8002642 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b01      	cmp	r3, #1
 8002466:	d123      	bne.n	80024b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f001 ffe5 	bl	800443c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e139      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ae:	e10b      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d14e      	bne.n	8002556 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	2200      	movs	r2, #0
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <HAL_I2C_Mem_Read+0x22c>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f001 fea3 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e10e      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
 80024d2:	bf00      	nop
 80024d4:	00100002 	.word	0x00100002
 80024d8:	ffff0000 	.word	0xffff0000
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002554:	e0b8      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	4966      	ldr	r1, [pc, #408]	; (80026f8 <HAL_I2C_Mem_Read+0x448>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f001 fe54 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0bf      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	494f      	ldr	r1, [pc, #316]	; (80026f8 <HAL_I2C_Mem_Read+0x448>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f001 fe26 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e091      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002640:	e042      	b.n	80026c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f001 fef8 	bl	800443c <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04c      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d118      	bne.n	80026c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f aec2 	bne.w	8002456 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00010004 	.word	0x00010004

080026fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800271c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b10      	cmp	r3, #16
 800272a:	d003      	beq.n	8002734 <HAL_I2C_EV_IRQHandler+0x38>
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	f040 80b6 	bne.w	80028a0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_I2C_EV_IRQHandler+0x6e>
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002754:	d003      	beq.n	800275e <HAL_I2C_EV_IRQHandler+0x62>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800275c:	d101      	bne.n	8002762 <HAL_I2C_EV_IRQHandler+0x66>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_I2C_EV_IRQHandler+0x68>
 8002762:	2300      	movs	r3, #0
 8002764:	2b01      	cmp	r3, #1
 8002766:	f000 8127 	beq.w	80029b8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_I2C_EV_IRQHandler+0x92>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 fee0 	bl	8004546 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fd05 	bl	8003196 <I2C_Master_SB>
 800278c:	e087      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	08db      	lsrs	r3, r3, #3
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0xb2>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	0a5b      	lsrs	r3, r3, #9
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fd7b 	bl	80032a2 <I2C_Master_ADD10>
 80027ac:	e077      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0xd2>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	0a5b      	lsrs	r3, r3, #9
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fd95 	bl	80032f6 <I2C_Master_ADDR>
 80027cc:	e067      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d030      	beq.n	800283c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	f000 80e8 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	09db      	lsrs	r3, r3, #7
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00f      	beq.n	8002818 <HAL_I2C_EV_IRQHandler+0x11c>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_I2C_EV_IRQHandler+0x11c>
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f9e6 	bl	8002be2 <I2C_MasterTransmit_TXE>
 8002816:	e042      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80cb 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	0a5b      	lsrs	r3, r3, #9
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80c4 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 facc 	bl	8002dd2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283a:	e0bf      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800284a:	f000 80b7 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00f      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x17e>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	0a9b      	lsrs	r3, r3, #10
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_I2C_EV_IRQHandler+0x17e>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fb23 	bl	8002ebe <I2C_MasterReceive_RXNE>
 8002878:	e011      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 809a 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	0a5b      	lsrs	r3, r3, #9
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8093 	beq.w	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fb93 	bl	8002fc2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800289c:	e08e      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
 800289e:	e08d      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	e007      	b.n	80028c2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <HAL_I2C_EV_IRQHandler+0x1f8>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	0a5b      	lsrs	r3, r3, #9
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 ff51 	bl	8003794 <I2C_Slave_ADDR>
 80028f2:	e066      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x218>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 ff85 	bl	800381c <I2C_Slave_STOPF>
 8002912:	e056      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	2b21      	cmp	r3, #33	; 0x21
 8002918:	d002      	beq.n	8002920 <HAL_I2C_EV_IRQHandler+0x224>
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	2b29      	cmp	r3, #41	; 0x29
 800291e:	d125      	bne.n	800296c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	09db      	lsrs	r3, r3, #7
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00f      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x250>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0a9b      	lsrs	r3, r3, #10
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <HAL_I2C_EV_IRQHandler+0x250>
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fe67 	bl	8003618 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800294a:	e039      	b.n	80029c0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d033      	beq.n	80029c0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02d      	beq.n	80029c0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fe94 	bl	8003692 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800296a:	e029      	b.n	80029c0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00f      	beq.n	8002998 <HAL_I2C_EV_IRQHandler+0x29c>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_I2C_EV_IRQHandler+0x29c>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fe9f 	bl	80036d4 <I2C_SlaveReceive_RXNE>
 8002996:	e014      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fecd 	bl	8003750 <I2C_SlaveReceive_BTF>
 80029b6:	e004      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80029b8:	bf00      	nop
 80029ba:	e002      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029c0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <HAL_I2C_ER_IRQHandler+0x46>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	0a5b      	lsrs	r3, r3, #9
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00e      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x70>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002a36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d041      	beq.n	8002ac8 <HAL_I2C_ER_IRQHandler+0x100>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03b      	beq.n	8002ac8 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a56:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a6e:	7efb      	ldrb	r3, [r7, #27]
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d112      	bne.n	8002a9a <HAL_I2C_ER_IRQHandler+0xd2>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_I2C_ER_IRQHandler+0xd2>
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b21      	cmp	r3, #33	; 0x21
 8002a7e:	d008      	beq.n	8002a92 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b29      	cmp	r3, #41	; 0x29
 8002a84:	d005      	beq.n	8002a92 <HAL_I2C_ER_IRQHandler+0xca>
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b28      	cmp	r3, #40	; 0x28
 8002a8a:	d106      	bne.n	8002a9a <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b21      	cmp	r3, #33	; 0x21
 8002a90:	d103      	bne.n	8002a9a <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fff2 	bl	8003a7c <I2C_Slave_AF>
 8002a98:	e016      	b.n	8002ac8 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d107      	bne.n	8002ac8 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <HAL_I2C_ER_IRQHandler+0x12a>
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002af0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 f829 	bl	8003b5c <I2C_ITError>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d150      	bne.n	8002caa <I2C_MasterTransmit_TXE+0xc8>
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b21      	cmp	r3, #33	; 0x21
 8002c0c:	d14d      	bne.n	8002caa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d01d      	beq.n	8002c50 <I2C_MasterTransmit_TXE+0x6e>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d01a      	beq.n	8002c50 <I2C_MasterTransmit_TXE+0x6e>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c20:	d016      	beq.n	8002c50 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c30:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2211      	movs	r2, #17
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff62 	bl	8002b12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c4e:	e0bc      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d107      	bne.n	8002c9a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff7d 	bl	8002b92 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c98:	e097      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff35 	bl	8002b12 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ca8:	e08f      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b21      	cmp	r3, #33	; 0x21
 8002cae:	d007      	beq.n	8002cc0 <I2C_MasterTransmit_TXE+0xde>
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2b40      	cmp	r3, #64	; 0x40
 8002cb4:	f040 8089 	bne.w	8002dca <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b22      	cmp	r3, #34	; 0x22
 8002cbc:	f040 8085 	bne.w	8002dca <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cda:	e076      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d15d      	bne.n	8002da4 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11d      	bne.n	8002d2c <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10b      	bne.n	8002d10 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d0e:	e05c      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	121b      	asrs	r3, r3, #8
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d2a:	e04e      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10b      	bne.n	8002d4c <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d4a:	e03e      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d13a      	bne.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b22      	cmp	r3, #34	; 0x22
 8002d5e:	d108      	bne.n	8002d72 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6e:	601a      	str	r2, [r3, #0]
}
 8002d70:	e02b      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b21      	cmp	r3, #33	; 0x21
 8002d7c:	d125      	bne.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002da2:	e012      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dc8:	e7ff      	b.n	8002dca <I2C_MasterTransmit_TXE+0x1e8>
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b21      	cmp	r3, #33	; 0x21
 8002dea:	d164      	bne.n	8002eb6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8002e1a:	e04c      	b.n	8002eb6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d01d      	beq.n	8002e5e <I2C_MasterTransmit_BTF+0x8c>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d01a      	beq.n	8002e5e <I2C_MasterTransmit_BTF+0x8c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e2e:	d016      	beq.n	8002e5e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2211      	movs	r2, #17
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe5b 	bl	8002b12 <HAL_I2C_MasterTxCpltCallback>
}
 8002e5c:	e02b      	b.n	8002eb6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d107      	bne.n	8002ea8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe76 	bl	8002b92 <HAL_I2C_MemTxCpltCallback>
}
 8002ea6:	e006      	b.n	8002eb6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fe2e 	bl	8002b12 <HAL_I2C_MasterTxCpltCallback>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b22      	cmp	r3, #34	; 0x22
 8002ed0:	d173      	bne.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d920      	bls.n	8002f22 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d154      	bne.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002f20:	e04b      	b.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d047      	beq.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d002      	beq.n	8002f36 <I2C_MasterReceive_RXNE+0x78>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d141      	bne.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f44:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f54:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d10a      	bne.n	8002fa6 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe01 	bl	8002ba6 <HAL_I2C_MemRxCpltCallback>
}
 8002fa4:	e009      	b.n	8002fba <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2212      	movs	r2, #18
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fdb6 	bl	8002b26 <HAL_I2C_MasterRxCpltCallback>
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d11b      	bne.n	8003012 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003010:	e0bd      	b.n	800318e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d129      	bne.n	8003070 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00a      	beq.n	8003048 <I2C_MasterReceive_BTF+0x86>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d007      	beq.n	8003048 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800306e:	e08e      	b.n	800318e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d176      	bne.n	8003168 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <I2C_MasterReceive_BTF+0xc4>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b10      	cmp	r3, #16
 8003084:	d108      	bne.n	8003098 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e019      	b.n	80030cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <I2C_MasterReceive_BTF+0xe2>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d108      	bne.n	80030b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e00a      	b.n	80030cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d007      	beq.n	80030cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003126:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d10a      	bne.n	8003152 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fd2b 	bl	8002ba6 <HAL_I2C_MemRxCpltCallback>
}
 8003150:	e01d      	b.n	800318e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2212      	movs	r2, #18
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fce0 	bl	8002b26 <HAL_I2C_MasterRxCpltCallback>
}
 8003166:	e012      	b.n	800318e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d117      	bne.n	80031da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80031c4:	e067      	b.n	8003296 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]
}
 80031d8:	e05d      	b.n	8003296 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e2:	d133      	bne.n	800324c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b21      	cmp	r3, #33	; 0x21
 80031ee:	d109      	bne.n	8003204 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	e008      	b.n	8003216 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <I2C_Master_SB+0x90>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d037      	beq.n	8003296 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <I2C_Master_SB+0xa4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02d      	beq.n	8003296 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003248:	605a      	str	r2, [r3, #4]
}
 800324a:	e024      	b.n	8003296 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10e      	bne.n	8003272 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	b29b      	uxth	r3, r3
 800325a:	11db      	asrs	r3, r3, #7
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 0306 	and.w	r3, r3, #6
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f063 030f 	orn	r3, r3, #15
 8003268:	b2da      	uxtb	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
}
 8003270:	e011      	b.n	8003296 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10d      	bne.n	8003296 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	b29b      	uxth	r3, r3
 8003280:	11db      	asrs	r3, r3, #7
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 0306 	and.w	r3, r3, #6
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f063 030e 	orn	r3, r3, #14
 800328e:	b2da      	uxtb	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <I2C_Master_ADD10+0x24>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <I2C_Master_ADD10+0x38>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b091      	sub	sp, #68	; 0x44
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b22      	cmp	r3, #34	; 0x22
 800331e:	f040 8169 	bne.w	80035f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <I2C_Master_ADDR+0x54>
 800332a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d10b      	bne.n	800334a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	e160      	b.n	800360c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11d      	bne.n	800338e <I2C_Master_ADDR+0x98>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800335a:	d118      	bne.n	800338e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003380:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
 800338c:	e13e      	b.n	800360c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e115      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 808a 	bne.w	80034e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d2:	d137      	bne.n	8003444 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f2:	d113      	bne.n	800341c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	e0e7      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e0d3      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	2b08      	cmp	r3, #8
 8003448:	d02e      	beq.n	80034a8 <I2C_Master_ADDR+0x1b2>
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	2b20      	cmp	r3, #32
 800344e:	d02b      	beq.n	80034a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	2b12      	cmp	r3, #18
 8003454:	d102      	bne.n	800345c <I2C_Master_ADDR+0x166>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b01      	cmp	r3, #1
 800345a:	d125      	bne.n	80034a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00e      	beq.n	8003480 <I2C_Master_ADDR+0x18a>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00b      	beq.n	8003480 <I2C_Master_ADDR+0x18a>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b10      	cmp	r3, #16
 800346c:	d008      	beq.n	8003480 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e007      	b.n	8003490 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	e0a1      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e085      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d14d      	bne.n	8003586 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d016      	beq.n	800351e <I2C_Master_ADDR+0x228>
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d013      	beq.n	800351e <I2C_Master_ADDR+0x228>
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d010      	beq.n	800351e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d117      	bne.n	800356e <I2C_Master_ADDR+0x278>
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003544:	d00b      	beq.n	800355e <I2C_Master_ADDR+0x268>
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b01      	cmp	r3, #1
 800354a:	d008      	beq.n	800355e <I2C_Master_ADDR+0x268>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b08      	cmp	r3, #8
 8003550:	d005      	beq.n	800355e <I2C_Master_ADDR+0x268>
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	2b10      	cmp	r3, #16
 8003556:	d002      	beq.n	800355e <I2C_Master_ADDR+0x268>
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	2b20      	cmp	r3, #32
 800355c:	d107      	bne.n	800356e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800356c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	e032      	b.n	80035ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003594:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a4:	d117      	bne.n	80035d6 <I2C_Master_ADDR+0x2e0>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ac:	d00b      	beq.n	80035c6 <I2C_Master_ADDR+0x2d0>
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d008      	beq.n	80035c6 <I2C_Master_ADDR+0x2d0>
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d005      	beq.n	80035c6 <I2C_Master_ADDR+0x2d0>
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d002      	beq.n	80035c6 <I2C_Master_ADDR+0x2d0>
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d107      	bne.n	80035d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035f2:	e00b      	b.n	800360c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	e7ff      	b.n	800360c <I2C_Master_ADDR+0x316>
 800360c:	bf00      	nop
 800360e:	3744      	adds	r7, #68	; 0x44
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02b      	beq.n	800368a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d114      	bne.n	800368a <I2C_SlaveTransmit_TXE+0x72>
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b29      	cmp	r3, #41	; 0x29
 8003664:	d111      	bne.n	800368a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2221      	movs	r2, #33	; 0x21
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2228      	movs	r2, #40	; 0x28
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fa58 	bl	8002b3a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d011      	beq.n	80036c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d02c      	beq.n	8003748 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d114      	bne.n	8003748 <I2C_SlaveReceive_RXNE+0x74>
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b2a      	cmp	r3, #42	; 0x2a
 8003722:	d111      	bne.n	8003748 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2228      	movs	r2, #40	; 0x28
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fa03 	bl	8002b4e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d012      	beq.n	8003788 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ae:	2b28      	cmp	r3, #40	; 0x28
 80037b0:	d127      	bne.n	8003802 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	09db      	lsrs	r3, r3, #7
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	81bb      	strh	r3, [r7, #12]
 80037e4:	e002      	b.n	80037ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037f4:	89ba      	ldrh	r2, [r7, #12]
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff f9b1 	bl	8002b62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003800:	e008      	b.n	8003814 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0202 	mvn.w	r2, #2
 800380a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800383a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003878:	d172      	bne.n	8003960 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b22      	cmp	r3, #34	; 0x22
 800387e:	d002      	beq.n	8003886 <I2C_Slave_STOPF+0x6a>
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b2a      	cmp	r3, #42	; 0x2a
 8003884:	d135      	bne.n	80038f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd ffb0 	bl	8001824 <HAL_DMA_GetState>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d049      	beq.n	800395e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	4a69      	ldr	r2, [pc, #420]	; (8003a74 <I2C_Slave_STOPF+0x258>)
 80038d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fdf8 	bl	80014cc <HAL_DMA_Abort_IT>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03d      	beq.n	800395e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038f0:	e035      	b.n	800395e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003924:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd ff7a 	bl	8001824 <HAL_DMA_GetState>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d014      	beq.n	8003960 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	4a4e      	ldr	r2, [pc, #312]	; (8003a74 <I2C_Slave_STOPF+0x258>)
 800393c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fdc2 	bl	80014cc <HAL_DMA_Abort_IT>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003958:	4610      	mov	r0, r2
 800395a:	4798      	blx	r3
 800395c:	e000      	b.n	8003960 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800395e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d03e      	beq.n	80039e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b04      	cmp	r3, #4
 8003976:	d112      	bne.n	800399e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d112      	bne.n	80039d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8b3 	bl	8003b5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039f6:	e039      	b.n	8003a6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b2a      	cmp	r3, #42	; 0x2a
 80039fc:	d109      	bne.n	8003a12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2228      	movs	r2, #40	; 0x28
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff f89e 	bl	8002b4e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b28      	cmp	r3, #40	; 0x28
 8003a1c:	d111      	bne.n	8003a42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <I2C_Slave_STOPF+0x25c>)
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff f89f 	bl	8002b7e <HAL_I2C_ListenCpltCallback>
}
 8003a40:	e014      	b.n	8003a6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	d002      	beq.n	8003a50 <I2C_Slave_STOPF+0x234>
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b22      	cmp	r3, #34	; 0x22
 8003a4e:	d10d      	bne.n	8003a6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff f871 	bl	8002b4e <HAL_I2C_SlaveRxCpltCallback>
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08004131 	.word	0x08004131
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d002      	beq.n	8003a9e <I2C_Slave_AF+0x22>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d129      	bne.n	8003af2 <I2C_Slave_AF+0x76>
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b28      	cmp	r3, #40	; 0x28
 8003aa2:	d126      	bne.n	8003af2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <I2C_Slave_AF+0xdc>)
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ac2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff f847 	bl	8002b7e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003af0:	e02e      	b.n	8003b50 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b21      	cmp	r3, #33	; 0x21
 8003af6:	d126      	bne.n	8003b46 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <I2C_Slave_AF+0xdc>)
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2221      	movs	r2, #33	; 0x21
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe fffb 	bl	8002b3a <HAL_I2C_SlaveTxCpltCallback>
}
 8003b44:	e004      	b.n	8003b50 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b4e:	615a      	str	r2, [r3, #20]
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	ffff0000 	.word	0xffff0000

08003b5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d10a      	bne.n	8003b8e <I2C_ITError+0x32>
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b22      	cmp	r3, #34	; 0x22
 8003b7c:	d107      	bne.n	8003b8e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b94:	2b28      	cmp	r3, #40	; 0x28
 8003b96:	d107      	bne.n	8003ba8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2228      	movs	r2, #40	; 0x28
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ba6:	e015      	b.n	8003bd4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb6:	d006      	beq.n	8003bc6 <I2C_ITError+0x6a>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b60      	cmp	r3, #96	; 0x60
 8003bbc:	d003      	beq.n	8003bc6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be2:	d162      	bne.n	8003caa <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d020      	beq.n	8003c44 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	4a5f      	ldr	r2, [pc, #380]	; (8003d84 <I2C_ITError+0x228>)
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fc5c 	bl	80014cc <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8089 	beq.w	8003d2e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4798      	blx	r3
 8003c42:	e074      	b.n	8003d2e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <I2C_ITError+0x228>)
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fc3b 	bl	80014cc <HAL_DMA_Abort_IT>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d068      	beq.n	8003d2e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10b      	bne.n	8003c82 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
 8003ca8:	e041      	b.n	8003d2e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b60      	cmp	r3, #96	; 0x60
 8003cb4:	d125      	bne.n	8003d02 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d10b      	bne.n	8003cea <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fe ff67 	bl	8002bce <HAL_I2C_AbortCpltCallback>
 8003d00:	e015      	b.n	8003d2e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d10b      	bne.n	8003d28 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fe ff46 	bl	8002bba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d11b      	bne.n	8003d7a <I2C_ITError+0x21e>
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b28      	cmp	r3, #40	; 0x28
 8003d46:	d118      	bne.n	8003d7a <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d56:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <I2C_ITError+0x22c>)
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe ff02 	bl	8002b7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	08004131 	.word	0x08004131
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	813b      	strh	r3, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa1b 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e09e      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	494c      	ldr	r1, [pc, #304]	; (8003f28 <I2C_RequestMemoryRead+0x19c>)
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa5f 	bl	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e08b      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	6a39      	ldr	r1, [r7, #32]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fac9 	bl	80043ba <I2C_WaitOnTXEFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d107      	bne.n	8003e46 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06a      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]
 8003e5a:	e021      	b.n	8003ea0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e5c:	893b      	ldrh	r3, [r7, #8]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	6a39      	ldr	r1, [r7, #32]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 faa3 	bl	80043ba <I2C_WaitOnTXEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d107      	bne.n	8003e92 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e044      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e96:	893b      	ldrh	r3, [r7, #8]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	6a39      	ldr	r1, [r7, #32]
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fa88 	bl	80043ba <I2C_WaitOnTXEFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e029      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f990 	bl	800420e <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e013      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	6a3a      	ldr	r2, [r7, #32]
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <I2C_RequestMemoryRead+0x19c>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f9d4 	bl	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	00010002 	.word	0x00010002

08003f2c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f48:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	2200      	movs	r2, #0
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f76:	2b21      	cmp	r3, #33	; 0x21
 8003f78:	d007      	beq.n	8003f8a <I2C_DMAXferCplt+0x5e>
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003f80:	2b22      	cmp	r3, #34	; 0x22
 8003f82:	d131      	bne.n	8003fe8 <I2C_DMAXferCplt+0xbc>
 8003f84:	7cbb      	ldrb	r3, [r7, #18]
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d12e      	bne.n	8003fe8 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f98:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b29      	cmp	r3, #41	; 0x29
 8003fa4:	d10a      	bne.n	8003fbc <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2221      	movs	r2, #33	; 0x21
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2228      	movs	r2, #40	; 0x28
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f7fe fdc0 	bl	8002b3a <HAL_I2C_SlaveTxCpltCallback>
 8003fba:	e00c      	b.n	8003fd6 <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc0:	d109      	bne.n	8003fd6 <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2222      	movs	r2, #34	; 0x22
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2228      	movs	r2, #40	; 0x28
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd0:	6978      	ldr	r0, [r7, #20]
 8003fd2:	f7fe fdbc 	bl	8002b4e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003fe4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fe6:	e06a      	b.n	80040be <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d064      	beq.n	80040be <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800401c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004024:	d009      	beq.n	800403a <I2C_DMAXferCplt+0x10e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d006      	beq.n	800403a <I2C_DMAXferCplt+0x10e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004032:	d002      	beq.n	800403a <I2C_DMAXferCplt+0x10e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b20      	cmp	r3, #32
 8004038:	d107      	bne.n	800404a <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004048:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004058:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004068:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 8004078:	6978      	ldr	r0, [r7, #20]
 800407a:	f7fe fd9e 	bl	8002bba <HAL_I2C_ErrorCallback>
}
 800407e:	e01e      	b.n	80040be <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d10a      	bne.n	80040aa <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7fe fd7f 	bl	8002ba6 <HAL_I2C_MemRxCpltCallback>
}
 80040a8:	e009      	b.n	80040be <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2212      	movs	r2, #18
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	f7fe fd34 	bl	8002b26 <HAL_I2C_MasterRxCpltCallback>
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	2200      	movs	r2, #0
 80040e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fd fbab 	bl	8001840 <HAL_DMA_GetError>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d01b      	beq.n	8004128 <I2C_DMAError+0x62>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0210 	orr.w	r2, r3, #16
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7fe fd49 	bl	8002bba <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	2200      	movs	r2, #0
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	2200      	movs	r2, #0
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	2200      	movs	r2, #0
 8004172:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d10e      	bne.n	80041b6 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fe fd0d 	bl	8002bce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041b4:	e027      	b.n	8004206 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041bc:	2b28      	cmp	r3, #40	; 0x28
 80041be:	d117      	bne.n	80041f0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2228      	movs	r2, #40	; 0x28
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041ee:	e007      	b.n	8004200 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7fe fcda 	bl	8002bba <HAL_I2C_ErrorCallback>
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421e:	e025      	b.n	800426c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d021      	beq.n	800426c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7fc ff24 	bl	8001074 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e023      	b.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10d      	bne.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	43da      	mvns	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4013      	ands	r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	e00c      	b.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d0b6      	beq.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ca:	e051      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d123      	bne.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0204 	orr.w	r2, r3, #4
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e046      	b.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d021      	beq.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432c:	f7fc fea2 	bl	8001074 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e020      	b.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10c      	bne.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e00b      	b.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d18d      	bne.n	80042cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c6:	e02d      	b.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f88d 	bl	80044e8 <I2C_IsAcknowledgeFailed>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e02d      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d021      	beq.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fc fe48 	bl	8001074 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d1ca      	bne.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004448:	e042      	b.n	80044d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d119      	bne.n	800448c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0210 	mvn.w	r2, #16
 8004460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e029      	b.n	80044e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fc fdf2 	bl	8001074 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e007      	b.n	80044e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d1b5      	bne.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fe:	d11b      	bne.n	8004538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004556:	d103      	bne.n	8004560 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800455e:	e007      	b.n	8004570 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004568:	d102      	bne.n	8004570 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e22d      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d075      	beq.n	8004686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800459a:	4ba3      	ldr	r3, [pc, #652]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d00c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4ba0      	ldr	r3, [pc, #640]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d112      	bne.n	80045d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b2:	4b9d      	ldr	r3, [pc, #628]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045be:	d10b      	bne.n	80045d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	4b99      	ldr	r3, [pc, #612]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d05b      	beq.n	8004684 <HAL_RCC_OscConfig+0x108>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d157      	bne.n	8004684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e208      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d106      	bne.n	80045f0 <HAL_RCC_OscConfig+0x74>
 80045e2:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a90      	ldr	r2, [pc, #576]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e01d      	b.n	800462c <HAL_RCC_OscConfig+0xb0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x98>
 80045fa:	4b8b      	ldr	r3, [pc, #556]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a8a      	ldr	r2, [pc, #552]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a87      	ldr	r2, [pc, #540]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0xb0>
 8004614:	4b84      	ldr	r3, [pc, #528]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 800461a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	4b81      	ldr	r3, [pc, #516]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a80      	ldr	r2, [pc, #512]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800462a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fc fd1e 	bl	8001074 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800463c:	f7fc fd1a 	bl	8001074 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1cd      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0xc0>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fc fd0a 	bl	8001074 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004664:	f7fc fd06 	bl	8001074 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e1b9      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004676:	4b6c      	ldr	r3, [pc, #432]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0xe8>
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d063      	beq.n	800475a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_RCC_OscConfig+0x152>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e18d      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	4b56      	ldr	r3, [pc, #344]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4952      	ldr	r1, [pc, #328]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e2:	e03a      	b.n	800475a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ec:	4b4f      	ldr	r3, [pc, #316]	; (800482c <HAL_RCC_OscConfig+0x2b0>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fc fcbf 	bl	8001074 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046fa:	f7fc fcbb 	bl	8001074 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e16e      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	4b46      	ldr	r3, [pc, #280]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4940      	ldr	r1, [pc, #256]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472e:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_RCC_OscConfig+0x2b0>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fc fc9e 	bl	8001074 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473c:	f7fc fc9a 	bl	8001074 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e14d      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d030      	beq.n	80047c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b30      	ldr	r3, [pc, #192]	; (8004830 <HAL_RCC_OscConfig+0x2b4>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fc fc7e 	bl	8001074 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477c:	f7fc fc7a 	bl	8001074 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e12d      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x200>
 800479a:	e015      	b.n	80047c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_OscConfig+0x2b4>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a2:	f7fc fc67 	bl	8001074 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fc fc63 	bl	8001074 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e116      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a0 	beq.w	8004916 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a0e      	ldr	r2, [pc, #56]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_OscConfig+0x2b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d121      	bne.n	8004856 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_RCC_OscConfig+0x2b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a07      	ldr	r2, [pc, #28]	; (8004834 <HAL_RCC_OscConfig+0x2b8>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fc fc29 	bl	8001074 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e011      	b.n	800484a <HAL_RCC_OscConfig+0x2ce>
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	42470000 	.word	0x42470000
 8004830:	42470e80 	.word	0x42470e80
 8004834:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fc fc1c 	bl	8001074 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0cf      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x478>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d106      	bne.n	800486c <HAL_RCC_OscConfig+0x2f0>
 800485e:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e01c      	b.n	80048a6 <HAL_RCC_OscConfig+0x32a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b05      	cmp	r3, #5
 8004872:	d10c      	bne.n	800488e <HAL_RCC_OscConfig+0x312>
 8004874:	4b60      	ldr	r3, [pc, #384]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a5f      	ldr	r2, [pc, #380]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
 8004880:	4b5d      	ldr	r3, [pc, #372]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a5c      	ldr	r2, [pc, #368]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	e00b      	b.n	80048a6 <HAL_RCC_OscConfig+0x32a>
 800488e:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a59      	ldr	r2, [pc, #356]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a56      	ldr	r2, [pc, #344]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d015      	beq.n	80048da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fc fbe1 	bl	8001074 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fc fbdd 	bl	8001074 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e08e      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCC_OscConfig+0x33a>
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fc fbcb 	bl	8001074 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fc fbc7 	bl	8001074 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e078      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ee      	bne.n	80048e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d064      	beq.n	80049e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d05c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d141      	bne.n	80049b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004932:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_RCC_OscConfig+0x480>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fc fb9c 	bl	8001074 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004940:	f7fc fb98 	bl	8001074 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04b      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	491d      	ldr	r1, [pc, #116]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <HAL_RCC_OscConfig+0x480>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fc fb71 	bl	8001074 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004996:	f7fc fb6d 	bl	8001074 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e020      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x41a>
 80049b4:	e018      	b.n	80049e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_RCC_OscConfig+0x480>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fc fb5a 	bl	8001074 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fc fb56 	bl	8001074 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e009      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_RCC_OscConfig+0x47c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x448>
 80049e2:	e001      	b.n	80049e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40007000 	.word	0x40007000
 80049f8:	40023800 	.word	0x40023800
 80049fc:	42470060 	.word	0x42470060

08004a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0ca      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a14:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d90c      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b64      	ldr	r3, [pc, #400]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b6      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a54:	4b58      	ldr	r3, [pc, #352]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a57      	ldr	r2, [pc, #348]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a6c:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a51      	ldr	r2, [pc, #324]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a78:	4b4f      	ldr	r3, [pc, #316]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	494c      	ldr	r1, [pc, #304]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d044      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d119      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e07d      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06d      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ace:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e065      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4933      	ldr	r1, [pc, #204]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fc fac0 	bl	8001074 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fc fabc 	bl	8001074 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e04d      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d20c      	bcs.n	8004b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e030      	b.n	8004baa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b54:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4915      	ldr	r1, [pc, #84]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b72:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	490d      	ldr	r1, [pc, #52]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b86:	f000 f81d 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ba2:	200f      	movs	r0, #15
 8004ba4:	f7fc fa22 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0801a800 	.word	0x0801a800
 8004bc0:	20000020 	.word	0x20000020

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d007      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x38>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 808d 	bne.w	8004d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bf2:	60bb      	str	r3, [r7, #8]
       break;
 8004bf4:	e08c      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bf8:	60bb      	str	r3, [r7, #8]
      break;
 8004bfa:	e089      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c06:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d023      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c12:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	ea03 0501 	and.w	r5, r3, r1
 8004c28:	ea04 0602 	and.w	r6, r4, r2
 8004c2c:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c2e:	fb02 f106 	mul.w	r1, r2, r6
 8004c32:	2200      	movs	r2, #0
 8004c34:	fb02 f205 	mul.w	r2, r2, r5
 8004c38:	440a      	add	r2, r1
 8004c3a:	493a      	ldr	r1, [pc, #232]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8004c40:	1853      	adds	r3, r2, r1
 8004c42:	4619      	mov	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	f7fc f82b 	bl	8000ca8 <__aeabi_uldivmod>
 8004c52:	4603      	mov	r3, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e049      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	ea03 0501 	and.w	r5, r3, r1
 8004c70:	ea04 0602 	and.w	r6, r4, r2
 8004c74:	4629      	mov	r1, r5
 8004c76:	4632      	mov	r2, r6
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0154      	lsls	r4, r2, #5
 8004c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c86:	014b      	lsls	r3, r1, #5
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	1b49      	subs	r1, r1, r5
 8004c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	0194      	lsls	r4, r2, #6
 8004c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ca0:	018b      	lsls	r3, r1, #6
 8004ca2:	1a5b      	subs	r3, r3, r1
 8004ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	00e2      	lsls	r2, r4, #3
 8004cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cb6:	00d9      	lsls	r1, r3, #3
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4614      	mov	r4, r2
 8004cbc:	195b      	adds	r3, r3, r5
 8004cbe:	eb44 0406 	adc.w	r4, r4, r6
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	02a2      	lsls	r2, r4, #10
 8004ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cd0:	0299      	lsls	r1, r3, #10
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4621      	mov	r1, r4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f7fb ffe0 	bl	8000ca8 <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	60bb      	str	r3, [r7, #8]
      break;
 8004d08:	e002      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d0c:	60bb      	str	r3, [r7, #8]
      break;
 8004d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d10:	68bb      	ldr	r3, [r7, #8]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	017d7840 	.word	0x017d7840

08004d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000020 	.word	0x20000020

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d44:	f7ff fff0 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d48:	4601      	mov	r1, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	5cd3      	ldrb	r3, [r2, r3]
 8004d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	0801a810 	.word	0x0801a810

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d6c:	f7ff ffdc 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d70:	4601      	mov	r1, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0b5b      	lsrs	r3, r3, #13
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0801a810 	.word	0x0801a810

08004d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e056      	b.n	8004e50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f009 fb83 	bl	800e4c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	ea42 0103 	orr.w	r1, r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 0104 	and.w	r1, r3, #4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_SPI_Transmit+0x22>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e11e      	b.n	80050b8 <HAL_SPI_Transmit+0x260>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e82:	f7fc f8f7 	bl	8001074 <HAL_GetTick>
 8004e86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e9c:	e103      	b.n	80050a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x52>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eae:	e0fa      	b.n	80050a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef6:	d107      	bne.n	8004f08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d007      	beq.n	8004f26 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2e:	d14b      	bne.n	8004fc8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Transmit+0xe6>
 8004f38:	8afb      	ldrh	r3, [r7, #22]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d13e      	bne.n	8004fbc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f62:	e02b      	b.n	8004fbc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d112      	bne.n	8004f98 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	1c9a      	adds	r2, r3, #2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f96:	e011      	b.n	8004fbc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f98:	f7fc f86c 	bl	8001074 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d803      	bhi.n	8004fb0 <HAL_SPI_Transmit+0x158>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x15e>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fba:	e074      	b.n	80050a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ce      	bne.n	8004f64 <HAL_SPI_Transmit+0x10c>
 8004fc6:	e04c      	b.n	8005062 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Transmit+0x17e>
 8004fd0:	8afb      	ldrh	r3, [r7, #22]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d140      	bne.n	8005058 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ffc:	e02c      	b.n	8005058 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d113      	bne.n	8005034 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	86da      	strh	r2, [r3, #54]	; 0x36
 8005032:	e011      	b.n	8005058 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005034:	f7fc f81e 	bl	8001074 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d803      	bhi.n	800504c <HAL_SPI_Transmit+0x1f4>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d102      	bne.n	8005052 <HAL_SPI_Transmit+0x1fa>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005056:	e026      	b.n	80050a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1cd      	bne.n	8004ffe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fc96 	bl	8005998 <SPI_EndRxTxTransaction>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e000      	b.n	80050a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80050a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050ce:	2301      	movs	r3, #1
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x26>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e18a      	b.n	80053fc <HAL_SPI_TransmitReceive+0x33c>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ee:	f7fb ffc1 	bl	8001074 <HAL_GetTick>
 80050f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005104:	887b      	ldrh	r3, [r7, #2]
 8005106:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00f      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x70>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005116:	d107      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x68>
 8005120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005124:	2b04      	cmp	r3, #4
 8005126:	d003      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800512e:	e15b      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x82>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x82>
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005148:	e14e      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b04      	cmp	r3, #4
 8005154:	d003      	beq.n	800515e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2205      	movs	r2, #5
 800515a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	887a      	ldrh	r2, [r7, #2]
 800516e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	887a      	ldrh	r2, [r7, #2]
 8005174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d007      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ba:	d178      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x10a>
 80051c4:	8b7b      	ldrh	r3, [r7, #26]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d166      	bne.n	8005298 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ee:	e053      	b.n	8005298 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d11b      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x176>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x176>
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d113      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d119      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x1b8>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	b292      	uxth	r2, r2
 800525a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005278:	f7fb fefc 	bl	8001074 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005284:	429a      	cmp	r2, r3
 8005286:	d807      	bhi.n	8005298 <HAL_SPI_TransmitReceive+0x1d8>
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d003      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005296:	e0a7      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1a6      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x130>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1a1      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x130>
 80052ac:	e07c      	b.n	80053a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_SPI_TransmitReceive+0x1fc>
 80052b6:	8b7b      	ldrh	r3, [r7, #26]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d16b      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e2:	e057      	b.n	8005394 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11c      	bne.n	800532c <HAL_SPI_TransmitReceive+0x26c>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_SPI_TransmitReceive+0x26c>
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d114      	bne.n	800532c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d119      	bne.n	800536e <HAL_SPI_TransmitReceive+0x2ae>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d014      	beq.n	800536e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800536a:	2301      	movs	r3, #1
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800536e:	f7fb fe81 	bl	8001074 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800537a:	429a      	cmp	r2, r3
 800537c:	d803      	bhi.n	8005386 <HAL_SPI_TransmitReceive+0x2c6>
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d102      	bne.n	800538c <HAL_SPI_TransmitReceive+0x2cc>
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005392:	e029      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1a2      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x224>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d19d      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 faf3 	bl	8005998 <SPI_EndRxTxTransaction>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d006      	beq.n	80053c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053c4:	e010      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	e000      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	; 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005420:	2302      	movs	r3, #2
 8005422:	e0e3      	b.n	80055ec <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005432:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800543a:	7dbb      	ldrb	r3, [r7, #22]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d00d      	beq.n	800545c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d106      	bne.n	8005456 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005450:	7dbb      	ldrb	r3, [r7, #22]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d002      	beq.n	800545c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
    goto error;
 800545a:	e0c2      	b.n	80055e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005468:	887b      	ldrh	r3, [r7, #2]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005472:	e0b6      	b.n	80055e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b04      	cmp	r3, #4
 800547e:	d003      	beq.n	8005488 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2205      	movs	r2, #5
 8005484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	887a      	ldrh	r2, [r7, #2]
 800549e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	887a      	ldrh	r2, [r7, #2]
 80054b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d108      	bne.n	80054dc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	4a49      	ldr	r2, [pc, #292]	; (80055f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	4a48      	ldr	r2, [pc, #288]	; (80055f8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80054da:	e007      	b.n	80054ec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e0:	4a46      	ldr	r2, [pc, #280]	; (80055fc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	4a45      	ldr	r2, [pc, #276]	; (8005600 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80054ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	4a44      	ldr	r2, [pc, #272]	; (8005604 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80054f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	2200      	movs	r2, #0
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	4619      	mov	r1, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	461a      	mov	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	f7fb ff7a 	bl	800140c <HAL_DMA_Start_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005536:	e054      	b.n	80055e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005554:	2200      	movs	r2, #0
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555c:	2200      	movs	r2, #0
 800555e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	4619      	mov	r1, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	461a      	mov	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	f7fb ff44 	bl	800140c <HAL_DMA_Start_IT>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f043 0210 	orr.w	r2, r3, #16
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80055a2:	e01e      	b.n	80055e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d007      	beq.n	80055c2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0220 	orr.w	r2, r2, #32
 80055d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0202 	orr.w	r2, r2, #2
 80055e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	08005781 	.word	0x08005781
 80055f8:	0800566d 	.word	0x0800566d
 80055fc:	0800579d 	.word	0x0800579d
 8005600:	080056f1 	.word	0x080056f1
 8005604:	080057b9 	.word	0x080057b9

08005608 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567a:	f7fb fcfb 	bl	8001074 <HAL_GetTick>
 800567e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d029      	beq.n	80056e4 <SPI_DMAReceiveCplt+0x78>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0220 	bic.w	r2, r2, #32
 800569e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0203 	bic.w	r2, r2, #3
 80056ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f909 	bl	80058cc <SPI_EndRxTransaction>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <SPI_DMAReceiveCplt+0x78>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ffbb 	bl	8005658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056e2:	e002      	b.n	80056ea <SPI_DMAReceiveCplt+0x7e>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff ff8f 	bl	8005608 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056fe:	f7fb fcb9 	bl	8001074 <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d02f      	beq.n	8005774 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0220 	bic.w	r2, r2, #32
 8005722:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	2164      	movs	r1, #100	; 0x64
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f935 	bl	8005998 <SPI_EndRxTxTransaction>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0203 	bic.w	r2, r2, #3
 800574e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff73 	bl	8005658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005772:	e002      	b.n	800577a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff ff51 	bl	800561c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff ff4e 	bl	8005630 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff ff4a 	bl	8005644 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0203 	bic.w	r2, r2, #3
 80057d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f043 0210 	orr.w	r2, r3, #16
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff ff34 	bl	8005658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005808:	e04c      	b.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d048      	beq.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005812:	f7fb fc2f 	bl	8001074 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d902      	bls.n	8005828 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d13d      	bne.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005840:	d111      	bne.n	8005866 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584a:	d004      	beq.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005854:	d107      	bne.n	8005866 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d10f      	bne.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800588e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e00f      	b.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4013      	ands	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d1a3      	bne.n	800580a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e0:	d111      	bne.n	8005906 <SPI_EndRxTransaction+0x3a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ea:	d004      	beq.n	80058f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f4:	d107      	bne.n	8005906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590e:	d12a      	bne.n	8005966 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d012      	beq.n	8005940 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	2180      	movs	r1, #128	; 0x80
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff ff67 	bl	80057f8 <SPI_WaitFlagStateUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02d      	beq.n	800598c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e026      	b.n	800598e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	2101      	movs	r1, #1
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff ff54 	bl	80057f8 <SPI_WaitFlagStateUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d01a      	beq.n	800598c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	f043 0220 	orr.w	r2, r3, #32
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e013      	b.n	800598e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	2101      	movs	r1, #1
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff41 	bl	80057f8 <SPI_WaitFlagStateUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e000      	b.n	800598e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <SPI_EndRxTxTransaction+0x7c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <SPI_EndRxTxTransaction+0x80>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	0d5b      	lsrs	r3, r3, #21
 80059b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c2:	d112      	bne.n	80059ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff ff12 	bl	80057f8 <SPI_WaitFlagStateUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	f043 0220 	orr.w	r2, r3, #32
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e00f      	b.n	8005a0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d0f2      	beq.n	80059ea <SPI_EndRxTxTransaction+0x52>
 8005a04:	e000      	b.n	8005a08 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a06:	bf00      	nop
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000020 	.word	0x20000020
 8005a18:	165e9f81 	.word	0x165e9f81

08005a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e03f      	b.n	8005aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f008 fdec 	bl	800e620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	; 0x24
 8005a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb71 	bl	8006148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d153      	bne.n	8005b7a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_Transmit_DMA+0x26>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e04c      	b.n	8005b7c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Transmit_DMA+0x38>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e045      	b.n	8005b7c <HAL_UART_Transmit_DMA+0xc4>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	88fa      	ldrh	r2, [r7, #6]
 8005b02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2221      	movs	r2, #33	; 0x21
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <HAL_UART_Transmit_DMA+0xcc>)
 8005b1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <HAL_UART_Transmit_DMA+0xd0>)
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_UART_Transmit_DMA+0xd4>)
 8005b2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	2200      	movs	r2, #0
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005b38:	f107 0308 	add.w	r3, r7, #8
 8005b3c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	f7fb fc5c 	bl	800140c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695a      	ldr	r2, [r3, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b74:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08005dd9 	.word	0x08005dd9
 8005b88:	08005e2b 	.word	0x08005e2b
 8005b8c:	08005e47 	.word	0x08005e47

08005b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_UART_IRQHandler+0x52>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa33 	bl	8006046 <UART_Receive_IT>
      return;
 8005be0:	e0cc      	b.n	8005d7c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80ab 	beq.w	8005d40 <HAL_UART_IRQHandler+0x1b0>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <HAL_UART_IRQHandler+0x70>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80a0 	beq.w	8005d40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_UART_IRQHandler+0x90>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c18:	f043 0201 	orr.w	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_UART_IRQHandler+0xb0>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	f043 0202 	orr.w	r2, r3, #2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_UART_IRQHandler+0xd0>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	f043 0204 	orr.w	r2, r3, #4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_UART_IRQHandler+0xf0>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	f043 0208 	orr.w	r2, r3, #8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d078      	beq.n	8005d7a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x112>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f9d2 	bl	8006046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <HAL_UART_IRQHandler+0x13a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d031      	beq.n	8005d2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f91b 	bl	8005f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	d123      	bne.n	8005d26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d013      	beq.n	8005d1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfa:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <HAL_UART_IRQHandler+0x1f4>)
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fb fbe2 	bl	80014cc <HAL_DMA_Abort_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e00e      	b.n	8005d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f850 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	e00a      	b.n	8005d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f84c 	bl	8005dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	e006      	b.n	8005d3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f848 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d3a:	e01e      	b.n	8005d7a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	bf00      	nop
    return;
 8005d3e:	e01c      	b.n	8005d7a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_UART_IRQHandler+0x1cc>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f908 	bl	8005f6a <UART_Transmit_IT>
    return;
 8005d5a:	e00f      	b.n	8005d7c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_UART_IRQHandler+0x1ec>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f950 	bl	8006016 <UART_EndTransmit_IT>
    return;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_UART_IRQHandler+0x1ec>
    return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08005f43 	.word	0x08005f43

08005d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d113      	bne.n	8005e1c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e08:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e18:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e1a:	e002      	b.n	8005e22 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff ffb3 	bl	8005d88 <HAL_UART_TxCpltCallback>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff ffaf 	bl	8005d9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b21      	cmp	r3, #33	; 0x21
 8005e78:	d108      	bne.n	8005e8c <UART_DMAError+0x46>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2200      	movs	r2, #0
 8005e84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e86:	68b8      	ldr	r0, [r7, #8]
 8005e88:	f000 f827 	bl	8005eda <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b22      	cmp	r3, #34	; 0x22
 8005eac:	d108      	bne.n	8005ec0 <UART_DMAError+0x7a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005eba:	68b8      	ldr	r0, [r7, #8]
 8005ebc:	f000 f823 	bl	8005f06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	f043 0210 	orr.w	r2, r3, #16
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ecc:	68b8      	ldr	r0, [r7, #8]
 8005ece:	f7ff ff79 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ef0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f1c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff31 	bl	8005dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b21      	cmp	r3, #33	; 0x21
 8005f7c:	d144      	bne.n	8006008 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d11a      	bne.n	8005fbe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f9c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]
 8005fb0:	e00e      	b.n	8005fd0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	621a      	str	r2, [r3, #32]
 8005fbc:	e008      	b.n	8005fd0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	1c59      	adds	r1, r3, #1
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6211      	str	r1, [r2, #32]
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006002:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fea6 	bl	8005d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b22      	cmp	r3, #34	; 0x22
 8006058:	d171      	bne.n	800613e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	d123      	bne.n	80060ac <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10e      	bne.n	8006090 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	629a      	str	r2, [r3, #40]	; 0x28
 800608e:	e029      	b.n	80060e4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b29b      	uxth	r3, r3
 8006098:	b2db      	uxtb	r3, r3
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	629a      	str	r2, [r3, #40]	; 0x28
 80060aa:	e01b      	b.n	80060e4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6858      	ldr	r0, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	1c59      	adds	r1, r3, #1
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6291      	str	r1, [r2, #40]	; 0x28
 80060c4:	b2c2      	uxtb	r2, r0
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e00c      	b.n	80060e4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	1c58      	adds	r0, r3, #1
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	6288      	str	r0, [r1, #40]	; 0x28
 80060dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4619      	mov	r1, r3
 80060f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d120      	bne.n	800613a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0220 	bic.w	r2, r2, #32
 8006106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fe3d 	bl	8005db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e002      	b.n	8006140 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006148:	b5b0      	push	{r4, r5, r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006188:	f023 030c 	bic.w	r3, r3, #12
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	430b      	orrs	r3, r1
 8006194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699a      	ldr	r2, [r3, #24]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	f040 80e4 	bne.w	8006380 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4aab      	ldr	r2, [pc, #684]	; (800646c <UART_SetConfig+0x324>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <UART_SetConfig+0x84>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4aaa      	ldr	r2, [pc, #680]	; (8006470 <UART_SetConfig+0x328>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d16c      	bne.n	80062a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80061cc:	f7fe fdcc 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009a      	lsls	r2, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	4aa3      	ldr	r2, [pc, #652]	; (8006474 <UART_SetConfig+0x32c>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	011c      	lsls	r4, r3, #4
 80061f0:	f7fe fdba 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009a      	lsls	r2, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	fbb2 f5f3 	udiv	r5, r2, r3
 800620a:	f7fe fdad 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 800620e:	4602      	mov	r2, r0
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009a      	lsls	r2, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	4a93      	ldr	r2, [pc, #588]	; (8006474 <UART_SetConfig+0x32c>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2264      	movs	r2, #100	; 0x64
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	1aeb      	subs	r3, r5, r3
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	3332      	adds	r3, #50	; 0x32
 8006238:	4a8e      	ldr	r2, [pc, #568]	; (8006474 <UART_SetConfig+0x32c>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006246:	441c      	add	r4, r3
 8006248:	f7fe fd8e 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 800624c:	4602      	mov	r2, r0
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009a      	lsls	r2, r3, #2
 8006256:	441a      	add	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006262:	f7fe fd81 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8006266:	4602      	mov	r2, r0
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009a      	lsls	r2, r3, #2
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	4a7d      	ldr	r2, [pc, #500]	; (8006474 <UART_SetConfig+0x32c>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2264      	movs	r2, #100	; 0x64
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	1aeb      	subs	r3, r5, r3
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	3332      	adds	r3, #50	; 0x32
 8006290:	4a78      	ldr	r2, [pc, #480]	; (8006474 <UART_SetConfig+0x32c>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f003 0207 	and.w	r2, r3, #7
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4422      	add	r2, r4
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	e154      	b.n	8006550 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80062a6:	f7fe fd4b 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009a      	lsls	r2, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	4a6c      	ldr	r2, [pc, #432]	; (8006474 <UART_SetConfig+0x32c>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	011c      	lsls	r4, r3, #4
 80062ca:	f7fe fd39 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80062ce:	4602      	mov	r2, r0
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009a      	lsls	r2, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80062e4:	f7fe fd2c 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009a      	lsls	r2, r3, #2
 80062f2:	441a      	add	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	4a5d      	ldr	r2, [pc, #372]	; (8006474 <UART_SetConfig+0x32c>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	2264      	movs	r2, #100	; 0x64
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	1aeb      	subs	r3, r5, r3
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3332      	adds	r3, #50	; 0x32
 8006312:	4a58      	ldr	r2, [pc, #352]	; (8006474 <UART_SetConfig+0x32c>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006320:	441c      	add	r4, r3
 8006322:	f7fe fd0d 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8006326:	4602      	mov	r2, r0
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009a      	lsls	r2, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fbb2 f5f3 	udiv	r5, r2, r3
 800633c:	f7fe fd00 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8006340:	4602      	mov	r2, r0
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009a      	lsls	r2, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	4a47      	ldr	r2, [pc, #284]	; (8006474 <UART_SetConfig+0x32c>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	2264      	movs	r2, #100	; 0x64
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	1aeb      	subs	r3, r5, r3
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	3332      	adds	r3, #50	; 0x32
 800636a:	4a42      	ldr	r2, [pc, #264]	; (8006474 <UART_SetConfig+0x32c>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f003 0207 	and.w	r2, r3, #7
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4422      	add	r2, r4
 800637c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800637e:	e0e7      	b.n	8006550 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a39      	ldr	r2, [pc, #228]	; (800646c <UART_SetConfig+0x324>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <UART_SetConfig+0x24c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a38      	ldr	r2, [pc, #224]	; (8006470 <UART_SetConfig+0x328>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d171      	bne.n	8006478 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006394:	f7fe fce8 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8006398:	4602      	mov	r2, r0
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	4a31      	ldr	r2, [pc, #196]	; (8006474 <UART_SetConfig+0x32c>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	011c      	lsls	r4, r3, #4
 80063b8:	f7fe fcd6 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80063bc:	4602      	mov	r2, r0
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009a      	lsls	r2, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80063d2:	f7fe fcc9 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80063d6:	4602      	mov	r2, r0
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009a      	lsls	r2, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	4a21      	ldr	r2, [pc, #132]	; (8006474 <UART_SetConfig+0x32c>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2264      	movs	r2, #100	; 0x64
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	1aeb      	subs	r3, r5, r3
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	3332      	adds	r3, #50	; 0x32
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <UART_SetConfig+0x32c>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640c:	441c      	add	r4, r3
 800640e:	f7fe fcab 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8006412:	4602      	mov	r2, r0
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009a      	lsls	r2, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	fbb2 f5f3 	udiv	r5, r2, r3
 8006428:	f7fe fc9e 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 800642c:	4602      	mov	r2, r0
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009a      	lsls	r2, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <UART_SetConfig+0x32c>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	2264      	movs	r2, #100	; 0x64
 800644c:	fb02 f303 	mul.w	r3, r2, r3
 8006450:	1aeb      	subs	r3, r5, r3
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	3332      	adds	r3, #50	; 0x32
 8006456:	4a07      	ldr	r2, [pc, #28]	; (8006474 <UART_SetConfig+0x32c>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f003 020f 	and.w	r2, r3, #15
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4422      	add	r2, r4
 8006468:	609a      	str	r2, [r3, #8]
 800646a:	e071      	b.n	8006550 <UART_SetConfig+0x408>
 800646c:	40011000 	.word	0x40011000
 8006470:	40011400 	.word	0x40011400
 8006474:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006478:	f7fe fc62 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 800647c:	4602      	mov	r2, r0
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009a      	lsls	r2, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	4a31      	ldr	r2, [pc, #196]	; (8006558 <UART_SetConfig+0x410>)
 8006494:	fba2 2303 	umull	r2, r3, r2, r3
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	011c      	lsls	r4, r3, #4
 800649c:	f7fe fc50 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009a      	lsls	r2, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80064b6:	f7fe fc43 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009a      	lsls	r2, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	4a21      	ldr	r2, [pc, #132]	; (8006558 <UART_SetConfig+0x410>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2264      	movs	r2, #100	; 0x64
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	1aeb      	subs	r3, r5, r3
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	3332      	adds	r3, #50	; 0x32
 80064e4:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <UART_SetConfig+0x410>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f0:	441c      	add	r4, r3
 80064f2:	f7fe fc25 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009a      	lsls	r2, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	fbb2 f5f3 	udiv	r5, r2, r3
 800650c:	f7fe fc18 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8006510:	4602      	mov	r2, r0
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009a      	lsls	r2, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <UART_SetConfig+0x410>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	2264      	movs	r2, #100	; 0x64
 8006530:	fb02 f303 	mul.w	r3, r2, r3
 8006534:	1aeb      	subs	r3, r5, r3
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	3332      	adds	r3, #50	; 0x32
 800653a:	4a07      	ldr	r2, [pc, #28]	; (8006558 <UART_SetConfig+0x410>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4422      	add	r2, r4
 800654c:	609a      	str	r2, [r3, #8]
}
 800654e:	e7ff      	b.n	8006550 <UART_SetConfig+0x408>
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bdb0      	pop	{r4, r5, r7, pc}
 8006558:	51eb851f 	.word	0x51eb851f

0800655c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	ed87 0a01 	vstr	s0, [r7, #4]
 8006566:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8006568:	edd7 7a01 	vldr	s15, [r7, #4]
 800656c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006574:	db0a      	blt.n	800658c <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8006576:	ed97 0a01 	vldr	s0, [r7, #4]
 800657a:	f009 ffad 	bl	80104d8 <sqrtf>
 800657e:	eef0 7a40 	vmov.f32	s15, s0
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8006588:	2300      	movs	r3, #0
 800658a:	e005      	b.n	8006598 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80065b2:	e082      	b.n	80066ba <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	60fa      	str	r2, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	60fa      	str	r2, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80065c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80065cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80065d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80065d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80065dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	60ba      	str	r2, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	eeb0 0a67 	vmov.f32	s0, s15
 80065f0:	f7ff ffb4 	bl	800655c <arm_sqrt_f32>

    realIn = *pSrc++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	60fa      	str	r2, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	60fa      	str	r2, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8006608:	ed97 7a06 	vldr	s14, [r7, #24]
 800660c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006614:	edd7 6a05 	vldr	s13, [r7, #20]
 8006618:	edd7 7a05 	vldr	s15, [r7, #20]
 800661c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	60ba      	str	r2, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	eeb0 0a67 	vmov.f32	s0, s15
 8006630:	f7ff ff94 	bl	800655c <arm_sqrt_f32>

    realIn = *pSrc++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	60fa      	str	r2, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	60fa      	str	r2, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8006648:	ed97 7a06 	vldr	s14, [r7, #24]
 800664c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006654:	edd7 6a05 	vldr	s13, [r7, #20]
 8006658:	edd7 7a05 	vldr	s15, [r7, #20]
 800665c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	1d1a      	adds	r2, r3, #4
 8006668:	60ba      	str	r2, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	eeb0 0a67 	vmov.f32	s0, s15
 8006670:	f7ff ff74 	bl	800655c <arm_sqrt_f32>

    realIn = *pSrc++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	60fa      	str	r2, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	60fa      	str	r2, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8006688:	ed97 7a06 	vldr	s14, [r7, #24]
 800668c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006694:	edd7 6a05 	vldr	s13, [r7, #20]
 8006698:	edd7 7a05 	vldr	s15, [r7, #20]
 800669c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	60ba      	str	r2, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	eeb0 0a67 	vmov.f32	s0, s15
 80066b0:	f7ff ff54 	bl	800655c <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f47f af79 	bne.w	80065b4 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80066ca:	e022      	b.n	8006712 <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	1d1a      	adds	r2, r3, #4
 80066d0:	60fa      	str	r2, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1d1a      	adds	r2, r3, #4
 80066da:	60fa      	str	r2, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80066e0:	ed97 7a06 	vldr	s14, [r7, #24]
 80066e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80066e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80066f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80066f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	60ba      	str	r2, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	eeb0 0a67 	vmov.f32	s0, s15
 8006708:	f7ff ff28 	bl	800655c <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	3b01      	subs	r3, #1
 8006710:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1d9      	bne.n	80066cc <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8006718:	bf00      	nop
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8006720:	b480      	push	{r7}
 8006722:	b08b      	sub	sp, #44	; 0x2c
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	60fa      	str	r2, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	3b01      	subs	r3, #1
 8006744:	089b      	lsrs	r3, r3, #2
 8006746:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8006748:	e051      	b.n	80067ee <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1d1a      	adds	r2, r3, #4
 800674e:	60fa      	str	r2, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1d1a      	adds	r2, r3, #4
 8006758:	60fa      	str	r2, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800675e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006762:	edd7 7a05 	vldr	s15, [r7, #20]
 8006766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676e:	d504      	bpl.n	800677a <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3301      	adds	r3, #1
 8006778:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	60fa      	str	r2, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8006784:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006788:	edd7 7a04 	vldr	s15, [r7, #16]
 800678c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006794:	d504      	bpl.n	80067a0 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3302      	adds	r3, #2
 800679e:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	60fa      	str	r2, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80067aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80067ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80067b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ba:	d504      	bpl.n	80067c6 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	3303      	adds	r3, #3
 80067c4:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80067c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80067ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80067ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d504      	bpl.n	80067e2 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	3304      	adds	r3, #4
 80067e0:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	3304      	adds	r3, #4
 80067e6:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1aa      	bne.n	800674a <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80067fe:	e016      	b.n	800682e <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1d1a      	adds	r2, r3, #4
 8006804:	60fa      	str	r2, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 800680a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800680e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681a:	d505      	bpl.n	8006828 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	3b01      	subs	r3, #1
 800682c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e5      	bne.n	8006800 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	601a      	str	r2, [r3, #0]
}
 8006840:	bf00      	nop
 8006842:	372c      	adds	r7, #44	; 0x2c
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 800684c:	b480      	push	{r7}
 800684e:	b08b      	sub	sp, #44	; 0x2c
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	089b      	lsrs	r3, r3, #2
 8006862:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006864:	e036      	b.n	80068d4 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1d1a      	adds	r2, r3, #4
 800686a:	60fa      	str	r2, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1d1a      	adds	r2, r3, #4
 8006874:	60fa      	str	r2, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	60fa      	str	r2, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	60fa      	str	r2, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	613b      	str	r3, [r7, #16]

    sum += in1;
 800688e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006892:	edd7 7a07 	vldr	s15, [r7, #28]
 8006896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800689a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 800689e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80068a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80068a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 80068ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80068b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80068b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 80068be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80068c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80068c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1c5      	bne.n	8006866 <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80068e2:	e00d      	b.n	8006900 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	60fa      	str	r2, [r7, #12]
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80068f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ee      	bne.n	80068e4 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006910:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	edc3 7a00 	vstr	s15, [r3]
}
 800691e:	bf00      	nop
 8006920:	372c      	adds	r7, #44	; 0x2c
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800692a:	b480      	push	{r7}
 800692c:	b08b      	sub	sp, #44	; 0x2c
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	60fa      	str	r2, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3b01      	subs	r3, #1
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8006952:	e051      	b.n	80069f8 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	60fa      	str	r2, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	60fa      	str	r2, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8006968:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800696c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	dd04      	ble.n	8006984 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1d1a      	adds	r2, r3, #4
 8006988:	60fa      	str	r2, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 800698e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006992:	edd7 7a04 	vldr	s15, [r7, #16]
 8006996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699e:	dd04      	ble.n	80069aa <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	3302      	adds	r3, #2
 80069a8:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	60fa      	str	r2, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80069b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80069b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80069bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c4:	dd04      	ble.n	80069d0 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3303      	adds	r3, #3
 80069ce:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 80069d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80069d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80069d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e0:	dd04      	ble.n	80069ec <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	3304      	adds	r3, #4
 80069ea:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3304      	adds	r3, #4
 80069f0:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1aa      	bne.n	8006954 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8006a08:	e016      	b.n	8006a38 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	60fa      	str	r2, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8006a14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a24:	dd05      	ble.n	8006a32 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	372c      	adds	r7, #44	; 0x2c
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <arm_sqrt_f32>:
  {
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a60:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8006a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	db0a      	blt.n	8006a86 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8006a70:	ed97 0a01 	vldr	s0, [r7, #4]
 8006a74:	f009 fd30 	bl	80104d8 <sqrtf>
 8006a78:	eef0 7a40 	vmov.f32	s15, s0
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8006a82:	2300      	movs	r3, #0
 8006a84:	e005      	b.n	8006a92 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b088      	sub	sp, #32
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	089b      	lsrs	r3, r3, #2
 8006ab0:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006ab2:	e046      	b.n	8006b42 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	60fa      	str	r2, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8006abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aca:	ed97 7a07 	vldr	s14, [r7, #28]
 8006ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1d1a      	adds	r2, r3, #4
 8006ada:	60fa      	str	r2, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8006ae0:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	ed97 7a07 	vldr	s14, [r7, #28]
 8006af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af4:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	60fa      	str	r2, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8006b02:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1d1a      	adds	r2, r3, #4
 8006b1e:	60fa      	str	r2, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8006b24:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b30:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b38:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1b5      	bne.n	8006ab4 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006b50:	e013      	b.n	8006b7a <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	60fa      	str	r2, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8006b5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b60:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b68:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b70:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e8      	bne.n	8006b52 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	eeb0 0a66 	vmov.f32	s0, s13
 8006b98:	f7ff ff5d 	bl	8006a56 <arm_sqrt_f32>
}
 8006b9c:	bf00      	nop
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <arm_sqrt_f32>:
  {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	ed87 0a01 	vstr	s0, [r7, #4]
 8006bae:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8006bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbc:	db0a      	blt.n	8006bd4 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8006bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bc2:	f009 fc89 	bl	80104d8 <sqrtf>
 8006bc6:	eef0 7a40 	vmov.f32	s15, s0
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e005      	b.n	8006be0 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d104      	bne.n	8006c10 <arm_std_f32+0x28>
	{
		*pResult = 0;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
		return;
 8006c0e:	e0d0      	b.n	8006db2 <arm_std_f32+0x1ca>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006c16:	e066      	b.n	8006ce6 <arm_std_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	1d1a      	adds	r2, r3, #4
 8006c1c:	60fa      	str	r2, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
    sum += in;
 8006c22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006c26:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c2e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006c32:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c36:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1d1a      	adds	r2, r3, #4
 8006c4e:	60fa      	str	r2, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	617b      	str	r3, [r7, #20]
    sum += in;
 8006c54:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c68:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	60fa      	str	r2, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	617b      	str	r3, [r7, #20]
    sum += in;
 8006c86:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006c96:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006caa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	60fa      	str	r2, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	617b      	str	r3, [r7, #20]
    sum += in;
 8006cb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cc4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006cc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cdc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d195      	bne.n	8006c18 <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8006cf4:	e01b      	b.n	8006d2e <arm_std_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	60fa      	str	r2, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
    sum += in;
 8006d00:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006d04:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006d10:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d14:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e0      	bne.n	8006cf6 <arm_std_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d42:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d46:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d64:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8006d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d8c:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8006d90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d98:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8006d9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006da0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dae:	f7ff fef9 	bl	8006ba4 <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8006db2:	3730      	adds	r7, #48	; 0x30
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b08d      	sub	sp, #52	; 0x34
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d104      	bne.n	8006de0 <arm_var_f32+0x28>
	{
		*pResult = 0;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
		return;
 8006dde:	e0ce      	b.n	8006f7e <arm_var_f32+0x1c6>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006de6:	e066      	b.n	8006eb6 <arm_var_f32+0xfe>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	60fa      	str	r2, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	617b      	str	r3, [r7, #20]
    sum += in;
 8006df2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1d1a      	adds	r2, r3, #4
 8006e1e:	60fa      	str	r2, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	617b      	str	r3, [r7, #20]
    sum += in;
 8006e24:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006e34:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e48:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	60fa      	str	r2, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	617b      	str	r3, [r7, #20]
    sum += in;
 8006e56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006e66:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1d1a      	adds	r2, r3, #4
 8006e82:	60fa      	str	r2, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	617b      	str	r3, [r7, #20]
    sum += in;
 8006e88:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006e98:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d195      	bne.n	8006de8 <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8006ec4:	e01b      	b.n	8006efe <arm_var_f32+0x146>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	617b      	str	r3, [r7, #20]
    sum += in;
 8006ed0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006edc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8006ee0:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ef4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	3b01      	subs	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e0      	bne.n	8006ec6 <arm_var_f32+0x10e>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006f16:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	ee07 3a90 	vmov	s15, r3
 8006f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f2c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f34:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8006f38:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8006f60:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8006f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8006f7e:	3734      	adds	r7, #52	; 0x34
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b0a0      	sub	sp, #128	; 0x80
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8006f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8006fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fae:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8006fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8006fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8006fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006fc6:	4413      	add	r3, r2
 8006fc8:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8006fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fcc:	089b      	lsrs	r3, r3, #2
 8006fce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fd0:	e1b6      	b.n	8007340 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8006fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8006ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8006ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8007002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8007008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 800700e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8007014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 800701a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8007020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8007026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800702c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8007032:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007036:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	1d1a      	adds	r2, r3, #4
 800703e:	603a      	str	r2, [r7, #0]
 8007040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007044:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8007048:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800704c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	1d1a      	adds	r2, r3, #4
 8007054:	603a      	str	r2, [r7, #0]
 8007056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800705a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800705e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007062:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	1d1a      	adds	r2, r3, #4
 800706a:	603a      	str	r2, [r7, #0]
 800706c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007070:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8007074:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007078:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	603a      	str	r2, [r7, #0]
 8007082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007086:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800708a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800708e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007096:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800709a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800709e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80070a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80070aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80070ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80070b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80070ba:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80070be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80070c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80070ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80070ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80070d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070d4:	1d1a      	adds	r2, r3, #4
 80070d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070dc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80070e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80070e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80070e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070ea:	1d1a      	adds	r2, r3, #4
 80070ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070f2:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80070f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80070fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80070fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007108:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800710c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007110:	edd7 7a05 	vldr	s15, [r7, #20]
 8007114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	67fa      	str	r2, [r7, #124]	; 0x7c
 800711a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800711e:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8007122:	ed97 7a02 	vldr	s14, [r7, #8]
 8007126:	edd7 7a06 	vldr	s15, [r7, #24]
 800712a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800712e:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8007132:	ed97 7a03 	vldr	s14, [r7, #12]
 8007136:	edd7 7a07 	vldr	s15, [r7, #28]
 800713a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800713e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8007142:	ed97 7a04 	vldr	s14, [r7, #16]
 8007146:	edd7 7a08 	vldr	s15, [r7, #32]
 800714a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800714e:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8007152:	ed97 7a05 	vldr	s14, [r7, #20]
 8007156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800715a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800715e:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8007162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	673a      	str	r2, [r7, #112]	; 0x70
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800716c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	673a      	str	r2, [r7, #112]	; 0x70
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8007176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800717a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8007186:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800718a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8007196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800719a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80071a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80071aa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80071b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	677a      	str	r2, [r7, #116]	; 0x74
 80071bc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80071c0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80071c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071c8:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80071cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	677a      	str	r2, [r7, #116]	; 0x74
 80071d2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80071d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80071da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071de:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80071e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80071e6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80071f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80071f6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8007202:	edd7 7a03 	vldr	s15, [r7, #12]
 8007206:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8007212:	edd7 7a02 	vldr	s15, [r7, #8]
 8007216:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8007222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007224:	1d1a      	adds	r2, r3, #4
 8007226:	67ba      	str	r2, [r7, #120]	; 0x78
 8007228:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800722c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007234:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8007238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723a:	1d1a      	adds	r2, r3, #4
 800723c:	67ba      	str	r2, [r7, #120]	; 0x78
 800723e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007242:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800724a:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800724e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	673a      	str	r2, [r7, #112]	; 0x70
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8007258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800725a:	1d1a      	adds	r2, r3, #4
 800725c:	673a      	str	r2, [r7, #112]	; 0x70
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8007262:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007266:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8007272:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007276:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8007282:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007286:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8007292:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007296:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	677a      	str	r2, [r7, #116]	; 0x74
 80072a8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80072ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80072b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b4:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80072b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ba:	1d1a      	adds	r2, r3, #4
 80072bc:	677a      	str	r2, [r7, #116]	; 0x74
 80072be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80072c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80072c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072ca:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80072ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80072d2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80072de:	edd7 7a05 	vldr	s15, [r7, #20]
 80072e2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80072ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80072f2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80072fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007302:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800730e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	67ba      	str	r2, [r7, #120]	; 0x78
 8007314:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007318:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800731c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007320:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	1d1a      	adds	r2, r3, #4
 8007328:	67ba      	str	r2, [r7, #120]	; 0x78
 800732a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800732e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007336:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	3b01      	subs	r3, #1
 800733e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f ae45 	bne.w	8006fd2 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8007348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734a:	b299      	uxth	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	2302      	movs	r3, #2
 8007352:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007354:	f000 feda 	bl	800810c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8007358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800735a:	b299      	uxth	r1, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	2302      	movs	r3, #2
 8007362:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007364:	f000 fed2 	bl	800810c <arm_radix8_butterfly_f32>
}
 8007368:	bf00      	nop
 800736a:	3780      	adds	r7, #128	; 0x80
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b0ac      	sub	sp, #176	; 0xb0
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	b29b      	uxth	r3, r3
 8007382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8007386:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	4413      	add	r3, r2
 8007390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8007394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800739e:	4413      	add	r3, r2
 80073a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80073a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80073ae:	4413      	add	r3, r2
 80073b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80073b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073bc:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80073be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c2:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80073c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073c8:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80073ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ce:	3b04      	subs	r3, #4
 80073d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80073d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073d8:	3b04      	subs	r3, #4
 80073da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80073de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073e2:	3b04      	subs	r3, #4
 80073e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80073e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80073f2:	4413      	add	r3, r2
 80073f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007400:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800740c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8007410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 800741a:	2302      	movs	r3, #2
 800741c:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800741e:	2304      	movs	r3, #4
 8007420:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8007422:	2306      	movs	r3, #6
 8007424:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	ed93 7a00 	vldr	s14, [r3]
 800742c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007430:	edd3 7a00 	vldr	s15, [r3]
 8007434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007438:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	ed93 7a00 	vldr	s14, [r3]
 8007442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007446:	edd3 7a00 	vldr	s15, [r3]
 800744a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800744e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	3304      	adds	r3, #4
 8007456:	ed93 7a00 	vldr	s14, [r3]
 800745a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745e:	3304      	adds	r3, #4
 8007460:	edd3 7a00 	vldr	s15, [r3]
 8007464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007468:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	3304      	adds	r3, #4
 8007470:	ed93 7a00 	vldr	s14, [r3]
 8007474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007478:	3304      	adds	r3, #4
 800747a:	edd3 7a00 	vldr	s15, [r3]
 800747e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007482:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8007486:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800748a:	3304      	adds	r3, #4
 800748c:	ed93 7a00 	vldr	s14, [r3]
 8007490:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800749c:	3304      	adds	r3, #4
 800749e:	edd3 7a00 	vldr	s15, [r3]
 80074a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80074aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074ae:	edd3 7a00 	vldr	s15, [r3]
 80074b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80074b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074be:	edd3 7a00 	vldr	s15, [r3]
 80074c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80074ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074ce:	edd3 7a00 	vldr	s15, [r3]
 80074d2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80074d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074de:	edd3 7a00 	vldr	s15, [r3]
 80074e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80074ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80074ee:	3304      	adds	r3, #4
 80074f0:	edd3 7a00 	vldr	s15, [r3]
 80074f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80074f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007500:	3304      	adds	r3, #4
 8007502:	edd3 7a00 	vldr	s15, [r3]
 8007506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800750e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007512:	3304      	adds	r3, #4
 8007514:	edd3 7a00 	vldr	s15, [r3]
 8007518:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800751c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007524:	3304      	adds	r3, #4
 8007526:	edd3 7a00 	vldr	s15, [r3]
 800752a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800752e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8007532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007536:	ed93 7a00 	vldr	s14, [r3]
 800753a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800753e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007546:	edd3 7a00 	vldr	s15, [r3]
 800754a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8007552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007556:	ed93 7a00 	vldr	s14, [r3]
 800755a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800755e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007566:	edd3 7a00 	vldr	s15, [r3]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	1d1a      	adds	r2, r3, #4
 800756e:	603a      	str	r2, [r7, #0]
 8007570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007574:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800757c:	3304      	adds	r3, #4
 800757e:	ed93 7a00 	vldr	s14, [r3]
 8007582:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800758a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800758e:	3304      	adds	r3, #4
 8007590:	edd3 7a00 	vldr	s15, [r3]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	603a      	str	r2, [r7, #0]
 800759a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800759e:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 80075a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80075ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ae:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80075b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80075ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075bc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80075be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80075cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075d0:	1d1a      	adds	r2, r3, #4
 80075d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075d6:	6a3a      	ldr	r2, [r7, #32]
 80075d8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80075da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075de:	1d1a      	adds	r2, r3, #4
 80075e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80075e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075ec:	1d1a      	adds	r2, r3, #4
 80075ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80075fe:	4413      	add	r3, r2
 8007600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8007604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800760c:	4413      	add	r3, r2
 800760e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8007612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800761a:	4413      	add	r3, r2
 800761c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8007620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007624:	3b02      	subs	r3, #2
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800762c:	e31a      	b.n	8007c64 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	ed93 7a00 	vldr	s14, [r3]
 8007634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007638:	edd3 7a00 	vldr	s15, [r3]
 800763c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007640:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	ed93 7a00 	vldr	s14, [r3]
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800764e:	edd3 7a00 	vldr	s15, [r3]
 8007652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007656:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	3304      	adds	r3, #4
 800765e:	ed93 7a00 	vldr	s14, [r3]
 8007662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007666:	3304      	adds	r3, #4
 8007668:	edd3 7a00 	vldr	s15, [r3]
 800766c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007670:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	3304      	adds	r3, #4
 8007678:	ed93 7a00 	vldr	s14, [r3]
 800767c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007680:	3304      	adds	r3, #4
 8007682:	edd3 7a00 	vldr	s15, [r3]
 8007686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800768a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800768e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007692:	3304      	adds	r3, #4
 8007694:	ed93 7a00 	vldr	s14, [r3]
 8007698:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800769c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076a4:	3304      	adds	r3, #4
 80076a6:	edd3 7a00 	vldr	s15, [r3]
 80076aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80076b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076b6:	edd3 7a00 	vldr	s15, [r3]
 80076ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80076be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c6:	edd3 7a00 	vldr	s15, [r3]
 80076ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076ce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80076d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076d6:	edd3 7a00 	vldr	s15, [r3]
 80076da:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80076de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076e6:	edd3 7a00 	vldr	s15, [r3]
 80076ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80076f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076f6:	3304      	adds	r3, #4
 80076f8:	edd3 7a00 	vldr	s15, [r3]
 80076fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007708:	3304      	adds	r3, #4
 800770a:	edd3 7a00 	vldr	s15, [r3]
 800770e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007712:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8007716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800771a:	3304      	adds	r3, #4
 800771c:	edd3 7a00 	vldr	s15, [r3]
 8007720:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800772c:	3304      	adds	r3, #4
 800772e:	edd3 7a00 	vldr	s15, [r3]
 8007732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007736:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 800773a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800773e:	ed93 7a00 	vldr	s14, [r3]
 8007742:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800774a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800774e:	edd3 7a00 	vldr	s15, [r3]
 8007752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007756:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800775a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800775e:	ed93 7a00 	vldr	s14, [r3]
 8007762:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800776a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800776e:	edd3 7a00 	vldr	s15, [r3]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	603a      	str	r2, [r7, #0]
 8007778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800777c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007784:	3304      	adds	r3, #4
 8007786:	ed93 7a00 	vldr	s14, [r3]
 800778a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800778e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007796:	3304      	adds	r3, #4
 8007798:	edd3 7a00 	vldr	s15, [r3]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	603a      	str	r2, [r7, #0]
 80077a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a6:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80077aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ae:	3b04      	subs	r3, #4
 80077b0:	ed93 7a00 	vldr	s14, [r3]
 80077b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077b8:	3b04      	subs	r3, #4
 80077ba:	edd3 7a00 	vldr	s15, [r3]
 80077be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80077c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ca:	3b04      	subs	r3, #4
 80077cc:	ed93 7a00 	vldr	s14, [r3]
 80077d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077d4:	3b04      	subs	r3, #4
 80077d6:	edd3 7a00 	vldr	s15, [r3]
 80077da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80077e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e6:	ed93 7a00 	vldr	s14, [r3]
 80077ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077ee:	edd3 7a00 	vldr	s15, [r3]
 80077f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80077fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077fe:	ed93 7a00 	vldr	s14, [r3]
 8007802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007806:	edd3 7a00 	vldr	s15, [r3]
 800780a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800780e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8007812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007816:	ed93 7a00 	vldr	s14, [r3]
 800781a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800781e:	edd3 7a00 	vldr	s15, [r3]
 8007822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007826:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800782a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800782e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8007832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007836:	ed93 7a00 	vldr	s14, [r3]
 800783a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800783e:	edd3 7a00 	vldr	s15, [r3]
 8007842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800784a:	3b04      	subs	r3, #4
 800784c:	edd3 7a00 	vldr	s15, [r3]
 8007850:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007858:	3b04      	subs	r3, #4
 800785a:	edd3 7a00 	vldr	s15, [r3]
 800785e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007862:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8007866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800786a:	3b04      	subs	r3, #4
 800786c:	edd3 7a00 	vldr	s15, [r3]
 8007870:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787c:	3b04      	subs	r3, #4
 800787e:	edd3 7a00 	vldr	s15, [r3]
 8007882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007886:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800788a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800788e:	edd3 7a00 	vldr	s15, [r3]
 8007892:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800789a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800789e:	edd3 7a00 	vldr	s15, [r3]
 80078a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80078aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078ae:	ed93 7a00 	vldr	s14, [r3]
 80078b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078b6:	edd3 7a00 	vldr	s15, [r3]
 80078ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078be:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80078c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c6:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80078ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ce:	3b04      	subs	r3, #4
 80078d0:	ed93 7a00 	vldr	s14, [r3]
 80078d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078d8:	3b04      	subs	r3, #4
 80078da:	edd3 7a00 	vldr	s15, [r3]
 80078de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80078e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ea:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80078ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078f2:	ed93 7a00 	vldr	s14, [r3]
 80078f6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80078fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007902:	edd3 7a00 	vldr	s15, [r3]
 8007906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800790a:	1f1a      	subs	r2, r3, #4
 800790c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007914:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8007918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800791c:	3b04      	subs	r3, #4
 800791e:	ed93 7a00 	vldr	s14, [r3]
 8007922:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800792a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800792e:	3b04      	subs	r3, #4
 8007930:	edd3 7a00 	vldr	s15, [r3]
 8007934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007938:	1f1a      	subs	r2, r3, #4
 800793a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800793e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007942:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8007946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8007954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007958:	1d1a      	adds	r2, r3, #4
 800795a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8007962:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007966:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8007972:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007976:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800797a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8007982:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007986:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8007992:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007996:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 80079a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079a6:	1d1a      	adds	r2, r3, #4
 80079a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80079ac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80079b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80079b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079b8:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80079bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079c0:	1d1a      	adds	r2, r3, #4
 80079c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80079c6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80079ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80079ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d2:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80079d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80079da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80079e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80079ea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80079f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80079fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8007a06:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007a0a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8007a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a1a:	1f1a      	subs	r2, r3, #4
 8007a1c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a20:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007a24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a2c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8007a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a34:	1f1a      	subs	r2, r3, #4
 8007a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a3a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007a3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a46:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8007a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8007a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8007a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8007a68:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8007a78:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8007a88:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a94:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8007a98:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a9c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8007aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aac:	1d1a      	adds	r2, r3, #4
 8007aae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ab2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007ab6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007abe:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8007ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007acc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007ad0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ad8:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8007adc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007ae0:	eef1 7a67 	vneg.f32	s15, s15
 8007ae4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8007af0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007af4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8007b00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007b04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8007b10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007b14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8007b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b24:	1f1a      	subs	r2, r3, #4
 8007b26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007b2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b36:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8007b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b3e:	1f1a      	subs	r2, r3, #4
 8007b40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b44:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007b48:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b50:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8007b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8007b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8007b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8007b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b76:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8007b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8007b92:	edd7 7a04 	vldr	s15, [r7, #16]
 8007b96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8007ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ba6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8007bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007bbc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007bc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bc8:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8007bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007bd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007bda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be2:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8007be6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007bea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8007bf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8007bfa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8007c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c0a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8007c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8007c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c2a:	1f1a      	subs	r2, r3, #4
 8007c2c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8007c30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007c34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c3c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8007c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c44:	1f1a      	subs	r2, r3, #4
 8007c46:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8007c4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007c4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c56:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8007c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f ace0 	bne.w	800762e <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	ed93 7a00 	vldr	s14, [r3]
 8007c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c78:	edd3 7a00 	vldr	s15, [r3]
 8007c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c80:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	ed93 7a00 	vldr	s14, [r3]
 8007c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c96:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	ed93 7a00 	vldr	s14, [r3]
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	edd3 7a00 	vldr	s15, [r3]
 8007cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	ed93 7a00 	vldr	s14, [r3]
 8007cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	edd3 7a00 	vldr	s15, [r3]
 8007cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cca:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8007cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	ed93 7a00 	vldr	s14, [r3]
 8007cd8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	edd3 7a00 	vldr	s15, [r3]
 8007cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cf6:	edd3 7a00 	vldr	s15, [r3]
 8007cfa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d06:	edd3 7a00 	vldr	s15, [r3]
 8007d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d0e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8007d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d16:	edd3 7a00 	vldr	s15, [r3]
 8007d1a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d26:	edd3 7a00 	vldr	s15, [r3]
 8007d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d2e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8007d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d36:	3304      	adds	r3, #4
 8007d38:	edd3 7a00 	vldr	s15, [r3]
 8007d3c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d48:	3304      	adds	r3, #4
 8007d4a:	edd3 7a00 	vldr	s15, [r3]
 8007d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d52:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8007d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	edd3 7a00 	vldr	s15, [r3]
 8007d60:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	edd3 7a00 	vldr	s15, [r3]
 8007d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d76:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8007d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d7e:	ed93 7a00 	vldr	s14, [r3]
 8007d82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007d86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d8e:	edd3 7a00 	vldr	s15, [r3]
 8007d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d96:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8007d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d9e:	ed93 7a00 	vldr	s14, [r3]
 8007da2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dae:	edd3 7a00 	vldr	s15, [r3]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	603a      	str	r2, [r7, #0]
 8007db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dbc:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8007dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	ed93 7a00 	vldr	s14, [r3]
 8007dca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	edd3 7a00 	vldr	s15, [r3]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	1d1a      	adds	r2, r3, #4
 8007de0:	603a      	str	r2, [r7, #0]
 8007de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de6:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8007dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8007df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8007dfa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007dfe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8007e0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007e0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8007e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007e1e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8007e2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007e2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e36:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8007e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e3e:	1d1a      	adds	r2, r3, #4
 8007e40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007e44:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007e48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e50:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8007e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e58:	1d1a      	adds	r2, r3, #4
 8007e5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007e5e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007e62:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e6a:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8007e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8007e76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8007e7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007e82:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8007e8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007e92:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8007e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007ea2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eaa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8007eae:	edd7 7a07 	vldr	s15, [r7, #28]
 8007eb2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8007ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ec8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007ecc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ed4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8007ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007edc:	1d1a      	adds	r2, r3, #4
 8007ede:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ee2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007ee6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eee:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8007ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8007efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8007f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8007f06:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8007f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8007f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8007f26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8007f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8007f36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8007f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f4c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007f50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f58:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8007f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f60:	1d1a      	adds	r2, r3, #4
 8007f62:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007f66:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007f6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f72:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8007f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f7a:	b299      	uxth	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	2304      	movs	r3, #4
 8007f82:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007f84:	f000 f8c2 	bl	800810c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8007f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f8c:	b299      	uxth	r1, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	2304      	movs	r3, #4
 8007f94:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007f96:	f000 f8b9 	bl	800810c <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8007f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f9e:	b299      	uxth	r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007fa8:	f000 f8b0 	bl	800810c <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8007fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fb0:	b299      	uxth	r1, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	2304      	movs	r3, #4
 8007fb8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007fba:	f000 f8a7 	bl	800810c <arm_radix8_butterfly_f32>
}
 8007fbe:	bf00      	nop
 8007fc0:	37b0      	adds	r7, #176	; 0xb0
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b088      	sub	sp, #32
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	71fb      	strb	r3, [r7, #7]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d117      	bne.n	8008018 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	3304      	adds	r3, #4
 8007fec:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	e00d      	b.n	8008010 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	edd3 7a00 	vldr	s15, [r3]
 8007ffa:	eef1 7a67 	vneg.f32	s15, s15
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	3308      	adds	r3, #8
 8008008:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3301      	adds	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	429a      	cmp	r2, r3
 8008016:	d3ed      	bcc.n	8007ff4 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801e:	d024      	beq.n	800806a <arm_cfft_f32+0xa4>
 8008020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008024:	d80b      	bhi.n	800803e <arm_cfft_f32+0x78>
 8008026:	2b20      	cmp	r3, #32
 8008028:	d01f      	beq.n	800806a <arm_cfft_f32+0xa4>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d802      	bhi.n	8008034 <arm_cfft_f32+0x6e>
 800802e:	2b10      	cmp	r3, #16
 8008030:	d016      	beq.n	8008060 <arm_cfft_f32+0x9a>
 8008032:	e028      	b.n	8008086 <arm_cfft_f32+0xc0>
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d01d      	beq.n	8008074 <arm_cfft_f32+0xae>
 8008038:	2b80      	cmp	r3, #128	; 0x80
 800803a:	d011      	beq.n	8008060 <arm_cfft_f32+0x9a>
 800803c:	e023      	b.n	8008086 <arm_cfft_f32+0xc0>
 800803e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008042:	d00d      	beq.n	8008060 <arm_cfft_f32+0x9a>
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d803      	bhi.n	8008052 <arm_cfft_f32+0x8c>
 800804a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800804e:	d011      	beq.n	8008074 <arm_cfft_f32+0xae>
 8008050:	e019      	b.n	8008086 <arm_cfft_f32+0xc0>
 8008052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008056:	d008      	beq.n	800806a <arm_cfft_f32+0xa4>
 8008058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805c:	d00a      	beq.n	8008074 <arm_cfft_f32+0xae>
 800805e:	e012      	b.n	8008086 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7fe ff90 	bl	8006f88 <arm_cfft_radix8by2_f32>
        break;
 8008068:	e00d      	b.n	8008086 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff f97f 	bl	8007370 <arm_cfft_radix8by4_f32>
        break;
 8008072:	e008      	b.n	8008086 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	b299      	uxth	r1, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	2301      	movs	r3, #1
 800807e:	68b8      	ldr	r0, [r7, #8]
 8008080:	f000 f844 	bl	800810c <arm_radix8_butterfly_f32>
        break;
 8008084:	bf00      	nop
    }  

    if( bitReverseFlag )
 8008086:	79bb      	ldrb	r3, [r7, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8999      	ldrh	r1, [r3, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	461a      	mov	r2, r3
 8008096:	68b8      	ldr	r0, [r7, #8]
 8008098:	f7f8 f89a 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d130      	bne.n	8008104 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b4:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e01c      	b.n	80080fc <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	1d1a      	adds	r2, r3, #4
 80080c6:	61ba      	str	r2, [r7, #24]
 80080c8:	ed93 7a00 	vldr	s14, [r3]
 80080cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80080d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d4:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	eeb1 7a67 	vneg.f32	s14, s15
 80080e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	3304      	adds	r3, #4
 80080f4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	3301      	adds	r3, #1
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3de      	bcc.n	80080c2 <arm_cfft_f32+0xfc>
        }
    }
}
 8008104:	bf00      	nop
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800810c:	b480      	push	{r7}
 800810e:	b0bd      	sub	sp, #244	; 0xf4
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	461a      	mov	r2, r3
 8008118:	460b      	mov	r3, r1
 800811a:	817b      	strh	r3, [r7, #10]
 800811c:	4613      	mov	r3, r2
 800811e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <arm_radix8_butterfly_f32+0x3c>)
 8008122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800812c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	08db      	lsrs	r3, r3, #3
 800813a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008144:	e002      	b.n	800814c <arm_radix8_butterfly_f32+0x40>
 8008146:	bf00      	nop
 8008148:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800814c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008154:	4413      	add	r3, r2
 8008156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800815a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	4413      	add	r3, r2
 8008164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8008168:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	4413      	add	r3, r2
 8008172:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8008176:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	4413      	add	r3, r2
 8008180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8008184:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818c:	4413      	add	r3, r2
 800818e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8008192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	4413      	add	r3, r2
 800819c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80081a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a8:	4413      	add	r3, r2
 80081aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80081ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	ed93 7a00 	vldr	s14, [r3]
 80081bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4413      	add	r3, r2
 80081c6:	edd3 7a00 	vldr	s15, [r3]
 80081ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80081d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	ed93 7a00 	vldr	s14, [r3]
 80081e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	edd3 7a00 	vldr	s15, [r3]
 80081ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081f2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80081f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	ed93 7a00 	vldr	s14, [r3]
 8008204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	edd3 7a00 	vldr	s15, [r3]
 8008212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008216:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800821a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	ed93 7a00 	vldr	s14, [r3]
 8008228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	edd3 7a00 	vldr	s15, [r3]
 8008236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800823a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800823e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	ed93 7a00 	vldr	s14, [r3]
 800824c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	edd3 7a00 	vldr	s15, [r3]
 800825a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800825e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8008262:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	ed93 7a00 	vldr	s14, [r3]
 8008270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	edd3 7a00 	vldr	s15, [r3]
 800827e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008282:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8008286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	ed93 7a00 	vldr	s14, [r3]
 8008294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	edd3 7a00 	vldr	s15, [r3]
 80082a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082a6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80082aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	ed93 7a00 	vldr	s14, [r3]
 80082b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	edd3 7a00 	vldr	s15, [r3]
 80082c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082ca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80082ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80082d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80082d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80082de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80082e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80082e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80082ee:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80082f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80082f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082fa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80082fe:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8008302:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800830a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800830e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800831c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008324:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8008328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4413      	add	r3, r2
 8008332:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008336:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800833a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800833e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	3304      	adds	r3, #4
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	ed93 7a00 	vldr	s14, [r3]
 8008352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	3304      	adds	r3, #4
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	edd3 7a00 	vldr	s15, [r3]
 8008362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008366:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800836a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	3304      	adds	r3, #4
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	ed93 7a00 	vldr	s14, [r3]
 800837a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	3304      	adds	r3, #4
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	edd3 7a00 	vldr	s15, [r3]
 800838a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800838e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	3304      	adds	r3, #4
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	ed93 7a00 	vldr	s14, [r3]
 80083a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	3304      	adds	r3, #4
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	edd3 7a00 	vldr	s15, [r3]
 80083b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80083ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	3304      	adds	r3, #4
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	ed93 7a00 	vldr	s14, [r3]
 80083ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	3304      	adds	r3, #4
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4413      	add	r3, r2
 80083d6:	edd3 7a00 	vldr	s15, [r3]
 80083da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083de:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80083e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	3304      	adds	r3, #4
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	ed93 7a00 	vldr	s14, [r3]
 80083f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	3304      	adds	r3, #4
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4413      	add	r3, r2
 80083fe:	edd3 7a00 	vldr	s15, [r3]
 8008402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008406:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800840a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	3304      	adds	r3, #4
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	ed93 7a00 	vldr	s14, [r3]
 800841a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	3304      	adds	r3, #4
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	edd3 7a00 	vldr	s15, [r3]
 800842a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8008432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	3304      	adds	r3, #4
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	ed93 7a00 	vldr	s14, [r3]
 8008442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	3304      	adds	r3, #4
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	edd3 7a00 	vldr	s15, [r3]
 8008452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008456:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800845a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	3304      	adds	r3, #4
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4413      	add	r3, r2
 8008466:	ed93 7a00 	vldr	s14, [r3]
 800846a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	3304      	adds	r3, #4
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	edd3 7a00 	vldr	s15, [r3]
 800847a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800847e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8008482:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008486:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800848a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800848e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8008492:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008496:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800849a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800849e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80084a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80084a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80084aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80084b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80084b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80084ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80084c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	3304      	adds	r3, #4
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80084d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80084d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80084de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	3304      	adds	r3, #4
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80084ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80084f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80084fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008508:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800850c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008510:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8008514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008522:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800852e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	3304      	adds	r3, #4
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800853e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008546:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800854a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	3304      	adds	r3, #4
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800855a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800855e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008562:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8008566:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800856a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800856e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008572:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800857e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8008582:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800858a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800858e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008592:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8008596:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800859a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800859e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80085ae:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80085b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80085b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80085c6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80085ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80085ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085d2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80085d6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80085da:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80085de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80085e6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80085ea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80085ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085f2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80085f6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80085fa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80085fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008602:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8008606:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800860a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800860e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008612:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8008616:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800861a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800861e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008622:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8008626:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800862a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800862e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008632:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8008636:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800863a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800863e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008642:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8008646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008654:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800865c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8008660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4413      	add	r3, r2
 800866a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800866e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008676:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800867a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4413      	add	r3, r2
 8008684:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008688:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800868c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008690:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8008694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80086a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80086a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80086ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	3304      	adds	r3, #4
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80086be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80086c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80086ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	3304      	adds	r3, #4
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80086da:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80086de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80086e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	3304      	adds	r3, #4
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80086f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80086fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8008702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	3304      	adds	r3, #4
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008712:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800871a:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800871e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008726:	4413      	add	r3, r2
 8008728:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800872c:	897b      	ldrh	r3, [r7, #10]
 800872e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008732:	429a      	cmp	r2, r3
 8008734:	f4ff ad0a 	bcc.w	800814c <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8008738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873c:	2b07      	cmp	r3, #7
 800873e:	f240 84e3 	bls.w	8009108 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8008748:	2301      	movs	r3, #1
 800874a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800874e:	893b      	ldrh	r3, [r7, #8]
 8008750:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008754:	4413      	add	r3, r2
 8008756:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8008758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800875a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800875e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008764:	4413      	add	r3, r2
 8008766:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8008768:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800876a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800876c:	4413      	add	r3, r2
 800876e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8008770:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008774:	4413      	add	r3, r2
 8008776:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8008778:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800877a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800877c:	4413      	add	r3, r2
 800877e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8008780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008784:	4413      	add	r3, r2
 8008786:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8008788:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800878a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800878c:	4413      	add	r3, r2
 800878e:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8008790:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800879e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80087aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	4413      	add	r3, r2
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80087b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80087ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80087da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80087e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	3304      	adds	r3, #4
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80087f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	3304      	adds	r3, #4
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8008804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	3304      	adds	r3, #4
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8008812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	3304      	adds	r3, #4
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	4413      	add	r3, r2
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8008820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	3304      	adds	r3, #4
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800882e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	3304      	adds	r3, #4
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4413      	add	r3, r2
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	3304      	adds	r3, #4
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800884a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8008852:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885a:	4413      	add	r3, r2
 800885c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8008860:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008868:	4413      	add	r3, r2
 800886a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800886e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008876:	4413      	add	r3, r2
 8008878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800887c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008884:	4413      	add	r3, r2
 8008886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800888a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800888e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008892:	4413      	add	r3, r2
 8008894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8008898:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800889c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a0:	4413      	add	r3, r2
 80088a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80088a6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ae:	4413      	add	r3, r2
 80088b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80088b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	ed93 7a00 	vldr	s14, [r3]
 80088c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	edd3 7a00 	vldr	s15, [r3]
 80088d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088d4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80088d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	ed93 7a00 	vldr	s14, [r3]
 80088e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	edd3 7a00 	vldr	s15, [r3]
 80088f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80088fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4413      	add	r3, r2
 8008906:	ed93 7a00 	vldr	s14, [r3]
 800890a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	edd3 7a00 	vldr	s15, [r3]
 8008918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800891c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8008920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	ed93 7a00 	vldr	s14, [r3]
 800892e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	edd3 7a00 	vldr	s15, [r3]
 800893c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008940:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8008944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4413      	add	r3, r2
 800894e:	ed93 7a00 	vldr	s14, [r3]
 8008952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	edd3 7a00 	vldr	s15, [r3]
 8008960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008964:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8008968:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	ed93 7a00 	vldr	s14, [r3]
 8008976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	edd3 7a00 	vldr	s15, [r3]
 8008984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008988:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800898c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	ed93 7a00 	vldr	s14, [r3]
 800899a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	edd3 7a00 	vldr	s15, [r3]
 80089a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089ac:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80089b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	ed93 7a00 	vldr	s14, [r3]
 80089be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	edd3 7a00 	vldr	s15, [r3]
 80089cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80089d4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80089d8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80089dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80089e4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80089e8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80089ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089f0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80089f4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80089f8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80089fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a00:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8008a04:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8008a08:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a10:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8008a14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008a22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a2a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8008a2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008a32:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a3a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	3304      	adds	r3, #4
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	ed93 7a00 	vldr	s14, [r3]
 8008a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	3304      	adds	r3, #4
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	edd3 7a00 	vldr	s15, [r3]
 8008a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8008a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	ed93 7a00 	vldr	s14, [r3]
 8008a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	edd3 7a00 	vldr	s15, [r3]
 8008a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a8a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	3304      	adds	r3, #4
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	ed93 7a00 	vldr	s14, [r3]
 8008a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	edd3 7a00 	vldr	s15, [r3]
 8008aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ab2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8008ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	3304      	adds	r3, #4
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	ed93 7a00 	vldr	s14, [r3]
 8008ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	3304      	adds	r3, #4
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	edd3 7a00 	vldr	s15, [r3]
 8008ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ada:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8008ade:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	ed93 7a00 	vldr	s14, [r3]
 8008aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	3304      	adds	r3, #4
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	edd3 7a00 	vldr	s15, [r3]
 8008afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b02:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8008b06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	ed93 7a00 	vldr	s14, [r3]
 8008b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	edd3 7a00 	vldr	s15, [r3]
 8008b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b2a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8008b2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	3304      	adds	r3, #4
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	ed93 7a00 	vldr	s14, [r3]
 8008b3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	3304      	adds	r3, #4
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	edd3 7a00 	vldr	s15, [r3]
 8008b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b52:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8008b56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	ed93 7a00 	vldr	s14, [r3]
 8008b66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	edd3 7a00 	vldr	s15, [r3]
 8008b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b7a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8008b7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008b82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b8a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8008b8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008b92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8008b9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ba2:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008baa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8008bae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008bb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8008bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8008bbe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008bc2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8008bce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008bd2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bda:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8008bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	3304      	adds	r3, #4
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008bee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bf6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8008bfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008bfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8008c0a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008c0e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8008c1a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008c1e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c26:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8008c2a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008c2e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c36:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8008c3a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c46:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8008c4a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008c4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c56:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8008c5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008c5e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8008c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	ed97 7a07 	vldr	s14, [r7, #28]
 8008c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c80:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8008c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c94:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c9c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8008ca0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008ca4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8008cb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008cb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8008cc0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008cc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8008cd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008cd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8008ce0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8008cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cf6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8008cfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	3304      	adds	r3, #4
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d12:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8008d16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d1a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d22:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8008d26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008d2a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8008d36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d3a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8008d46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008d4a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8008d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	ed97 7a07 	vldr	s14, [r7, #28]
 8008d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d6c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8008d70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	3304      	adds	r3, #4
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8008d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d88:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8008d8c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8008d90:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d98:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8008da4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8008da8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8008dbc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008dc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dc8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8008dd4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008dd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008de0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8008dec:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008df0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008df8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8008dfc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008e00:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e08:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8008e0c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008e10:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e18:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8008e1c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008e20:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e28:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8008e2c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008e30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e38:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8008e3c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008e40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e48:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8008e4c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008e50:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e58:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8008e5c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008e60:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e68:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8008e6c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008e70:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e78:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8008e7c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008e80:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e88:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8008e8c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008e90:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e98:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8008e9c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008ea0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ea8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8008eac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008eb0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eb8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8008ebc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008ec0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8008ecc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008ed0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ed8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8008edc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008ee0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ee8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8008eec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008ef0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8008efc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008f00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f08:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8008f0c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008f10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f18:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8008f1c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008f20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f28:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8008f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	ed97 7a07 	vldr	s14, [r7, #28]
 8008f3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f42:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8008f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f5e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8008f62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f66:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8008f72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8008f82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f86:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8008f92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f96:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8008fa2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8008fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8008fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8008fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fd4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8008fd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008fdc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8008fe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008fec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8008ff8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ffc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009004:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8009008:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800900c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009014:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8009018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	ed97 7a07 	vldr	s14, [r7, #28]
 8009026:	edd7 7a06 	vldr	s15, [r7, #24]
 800902a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800902e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8009032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	3304      	adds	r3, #4
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	ed97 7a05 	vldr	s14, [r7, #20]
 8009042:	edd7 7a04 	vldr	s15, [r7, #16]
 8009046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800904a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800904e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009052:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8009056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800905e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009062:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800906e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009072:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800907e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009082:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800908e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	ed97 7a07 	vldr	s14, [r7, #28]
 800909c:	edd7 7a06 	vldr	s15, [r7, #24]
 80090a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090a4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80090a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	3304      	adds	r3, #4
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80090b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80090bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090c0:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 80090c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80090c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090cc:	4413      	add	r3, r2
 80090ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80090d2:	897b      	ldrh	r3, [r7, #10]
 80090d4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80090d8:	429a      	cmp	r2, r3
 80090da:	f4ff abba 	bcc.w	8008852 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 80090de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e2:	3301      	adds	r3, #1
 80090e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80090e8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f0:	429a      	cmp	r2, r3
 80090f2:	f4ff ab2c 	bcc.w	800874e <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009100:	2b07      	cmp	r3, #7
 8009102:	f63f a813 	bhi.w	800812c <arm_radix8_butterfly_f32+0x20>
}
 8009106:	e000      	b.n	800910a <arm_radix8_butterfly_f32+0xffe>
         break;
 8009108:	bf00      	nop
}
 800910a:	bf00      	nop
 800910c:	37f4      	adds	r7, #244	; 0xf4
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop

08009118 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800912a:	2b84      	cmp	r3, #132	; 0x84
 800912c:	d005      	beq.n	800913a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800912e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4413      	add	r3, r2
 8009136:	3303      	adds	r3, #3
 8009138:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800913a:	68fb      	ldr	r3, [r7, #12]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800914c:	f001 fa3a 	bl	800a5c4 <vTaskStartScheduler>
  
  return osOK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	bd80      	pop	{r7, pc}

08009156 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009158:	b089      	sub	sp, #36	; 0x24
 800915a:	af04      	add	r7, sp, #16
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <osThreadCreate+0x54>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01c      	beq.n	80091aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685c      	ldr	r4, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681d      	ldr	r5, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691e      	ldr	r6, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff ffc8 	bl	8009118 <makeFreeRtosPriority>
 8009188:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009192:	9202      	str	r2, [sp, #8]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	9100      	str	r1, [sp, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	4632      	mov	r2, r6
 800919c:	4629      	mov	r1, r5
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 ff2d 	bl	8009ffe <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e01c      	b.n	80091e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685c      	ldr	r4, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091b6:	b29e      	uxth	r6, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff ffaa 	bl	8009118 <makeFreeRtosPriority>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f107 030c 	add.w	r3, r7, #12
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	9200      	str	r2, [sp, #0]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	4632      	mov	r2, r6
 80091d2:	4629      	mov	r1, r5
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 ff6b 	bl	800a0b0 <xTaskCreate>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d001      	beq.n	80091e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	e000      	b.n	80091e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091e4:	68fb      	ldr	r3, [r7, #12]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <osDelay+0x16>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e000      	b.n	8009206 <osDelay+0x18>
 8009204:	2301      	movs	r3, #1
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f880 	bl	800a30c <vTaskDelay>
  
  return osOK;
 800920c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009216:	b580      	push	{r7, lr}
 8009218:	b086      	sub	sp, #24
 800921a:	af02      	add	r7, sp, #8
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d010      	beq.n	800924a <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d10b      	bne.n	8009246 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	2303      	movs	r3, #3
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4613      	mov	r3, r2
 8009238:	2200      	movs	r2, #0
 800923a:	2100      	movs	r1, #0
 800923c:	2001      	movs	r0, #1
 800923e:	f000 f963 	bl	8009508 <xQueueGenericCreateStatic>
 8009242:	4603      	mov	r3, r0
 8009244:	e016      	b.n	8009274 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	e014      	b.n	8009274 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d110      	bne.n	8009272 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009250:	2203      	movs	r2, #3
 8009252:	2100      	movs	r1, #0
 8009254:	2001      	movs	r0, #1
 8009256:	f000 f9c9 	bl	80095ec <xQueueGenericCreate>
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <osSemaphoreCreate+0x58>
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fa1b 	bl	80096a4 <xQueueGenericSend>
      return sema;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	e000      	b.n	8009274 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009272:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800927c:	b590      	push	{r4, r7, lr}
 800927e:	b085      	sub	sp, #20
 8009280:	af02      	add	r7, sp, #8
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d012      	beq.n	80092b4 <osMessageCreate+0x38>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00e      	beq.n	80092b4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68dc      	ldr	r4, [r3, #12]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4623      	mov	r3, r4
 80092ac:	f000 f92c 	bl	8009508 <xQueueGenericCreateStatic>
 80092b0:	4603      	mov	r3, r0
 80092b2:	e008      	b.n	80092c6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	4619      	mov	r1, r3
 80092c0:	f000 f994 	bl	80095ec <xQueueGenericCreate>
 80092c4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd90      	pop	{r4, r7, pc}

080092ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f103 0208 	add.w	r2, r3, #8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f103 0208 	add.w	r2, r3, #8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f103 0208 	add.w	r2, r3, #8
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009386:	d103      	bne.n	8009390 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e00c      	b.n	80093aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3308      	adds	r3, #8
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	e002      	b.n	800939e <vListInsert+0x2e>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d2f6      	bcs.n	8009398 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6892      	ldr	r2, [r2, #8]
 80093f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6852      	ldr	r2, [r2, #4]
 8009402:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d103      	bne.n	8009416 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	1e5a      	subs	r2, r3, #1
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
	...

08009438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60bb      	str	r3, [r7, #8]
 800945e:	e7fe      	b.n	800945e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009460:	f002 f814 	bl	800b48c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	68f9      	ldr	r1, [r7, #12]
 800946e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	441a      	add	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009490:	3b01      	subs	r3, #1
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009496:	fb01 f303 	mul.w	r3, r1, r3
 800949a:	441a      	add	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	22ff      	movs	r2, #255	; 0xff
 80094a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	22ff      	movs	r2, #255	; 0xff
 80094ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d114      	bne.n	80094e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01a      	beq.n	80094f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3310      	adds	r3, #16
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fac0 	bl	800aa48 <xTaskRemoveFromEventList>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d012      	beq.n	80094f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <xQueueGenericReset+0xcc>)
 80094d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	e009      	b.n	80094f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3310      	adds	r3, #16
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fef2 	bl	80092ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3324      	adds	r3, #36	; 0x24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff feed 	bl	80092ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094f4:	f001 fff8 	bl	800b4e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094f8:	2301      	movs	r3, #1
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08e      	sub	sp, #56	; 0x38
 800950c:	af02      	add	r7, sp, #8
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <xQueueGenericCreateStatic+0x28>
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
 800952e:	e7fe      	b.n	800952e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <xQueueGenericCreateStatic+0x42>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
 8009548:	e7fe      	b.n	8009548 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <xQueueGenericCreateStatic+0x4e>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <xQueueGenericCreateStatic+0x52>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueGenericCreateStatic+0x54>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <xQueueGenericCreateStatic+0x6c>
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
 8009572:	e7fe      	b.n	8009572 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <xQueueGenericCreateStatic+0x78>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <xQueueGenericCreateStatic+0x7c>
 8009580:	2301      	movs	r3, #1
 8009582:	e000      	b.n	8009586 <xQueueGenericCreateStatic+0x7e>
 8009584:	2300      	movs	r3, #0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <xQueueGenericCreateStatic+0x96>
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	61fb      	str	r3, [r7, #28]
 800959c:	e7fe      	b.n	800959c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800959e:	2348      	movs	r3, #72	; 0x48
 80095a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b48      	cmp	r3, #72	; 0x48
 80095a6:	d009      	beq.n	80095bc <xQueueGenericCreateStatic+0xb4>
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	e7fe      	b.n	80095ba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00d      	beq.n	80095e2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	4613      	mov	r3, r2
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f842 	bl	8009666 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3730      	adds	r7, #48	; 0x30
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <xQueueGenericCreate+0x28>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	613b      	str	r3, [r7, #16]
 8009612:	e7fe      	b.n	8009612 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	e004      	b.n	800962a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	fb02 f303 	mul.w	r3, r2, r3
 8009628:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	3348      	adds	r3, #72	; 0x48
 800962e:	4618      	mov	r0, r3
 8009630:	f002 f846 	bl	800b6c0 <pvPortMalloc>
 8009634:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	3348      	adds	r3, #72	; 0x48
 8009640:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800964a:	79fa      	ldrb	r2, [r7, #7]
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	4613      	mov	r3, r2
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f805 	bl	8009666 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800965c:	69bb      	ldr	r3, [r7, #24]
	}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e002      	b.n	8009688 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009694:	2101      	movs	r1, #1
 8009696:	69b8      	ldr	r0, [r7, #24]
 8009698:	f7ff fece 	bl	8009438 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096b2:	2300      	movs	r3, #0
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <xQueueGenericSend+0x30>
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80096d2:	e7fe      	b.n	80096d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d103      	bne.n	80096e2 <xQueueGenericSend+0x3e>
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <xQueueGenericSend+0x42>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <xQueueGenericSend+0x44>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <xQueueGenericSend+0x5c>
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
 80096fe:	e7fe      	b.n	80096fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b02      	cmp	r3, #2
 8009704:	d103      	bne.n	800970e <xQueueGenericSend+0x6a>
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <xQueueGenericSend+0x6e>
 800970e:	2301      	movs	r3, #1
 8009710:	e000      	b.n	8009714 <xQueueGenericSend+0x70>
 8009712:	2300      	movs	r3, #0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <xQueueGenericSend+0x88>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	623b      	str	r3, [r7, #32]
 800972a:	e7fe      	b.n	800972a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800972c:	f001 fb48 	bl	800adc0 <xTaskGetSchedulerState>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d102      	bne.n	800973c <xQueueGenericSend+0x98>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <xQueueGenericSend+0x9c>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <xQueueGenericSend+0x9e>
 8009740:	2300      	movs	r3, #0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <xQueueGenericSend+0xb6>
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	e7fe      	b.n	8009758 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800975a:	f001 fe97 	bl	800b48c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <xQueueGenericSend+0xcc>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d129      	bne.n	80097c4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009776:	f000 fb32 	bl	8009dde <prvCopyDataToQueue>
 800977a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	4618      	mov	r0, r3
 800978a:	f001 f95d 	bl	800aa48 <xTaskRemoveFromEventList>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d013      	beq.n	80097bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009794:	4b3f      	ldr	r3, [pc, #252]	; (8009894 <xQueueGenericSend+0x1f0>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	e00a      	b.n	80097bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097ac:	4b39      	ldr	r3, [pc, #228]	; (8009894 <xQueueGenericSend+0x1f0>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097bc:	f001 fe94 	bl	800b4e8 <vPortExitCritical>
				return pdPASS;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e063      	b.n	800988c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d103      	bne.n	80097d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ca:	f001 fe8d 	bl	800b4e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e05c      	b.n	800988c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d106      	bne.n	80097e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 f995 	bl	800ab0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097e2:	2301      	movs	r3, #1
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097e6:	f001 fe7f 	bl	800b4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097ea:	f000 ff49 	bl	800a680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097ee:	f001 fe4d 	bl	800b48c <vPortEnterCritical>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f8:	b25b      	sxtb	r3, r3
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fe:	d103      	bne.n	8009808 <xQueueGenericSend+0x164>
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800980e:	b25b      	sxtb	r3, r3
 8009810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009814:	d103      	bne.n	800981e <xQueueGenericSend+0x17a>
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800981e:	f001 fe63 	bl	800b4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009822:	1d3a      	adds	r2, r7, #4
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f001 f984 	bl	800ab38 <xTaskCheckForTimeOut>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d124      	bne.n	8009880 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009838:	f000 fbc9 	bl	8009fce <prvIsQueueFull>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d018      	beq.n	8009874 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	3310      	adds	r3, #16
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f001 f8d8 	bl	800aa00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009852:	f000 fb54 	bl	8009efe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009856:	f000 ff21 	bl	800a69c <xTaskResumeAll>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	f47f af7c 	bne.w	800975a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009862:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <xQueueGenericSend+0x1f0>)
 8009864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	e772      	b.n	800975a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009876:	f000 fb42 	bl	8009efe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800987a:	f000 ff0f 	bl	800a69c <xTaskResumeAll>
 800987e:	e76c      	b.n	800975a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009882:	f000 fb3c 	bl	8009efe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009886:	f000 ff09 	bl	800a69c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800988a:	2300      	movs	r3, #0
		}
	}
}
 800988c:	4618      	mov	r0, r3
 800988e:	3738      	adds	r7, #56	; 0x38
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08e      	sub	sp, #56	; 0x38
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <xQueueGiveFromISR+0x28>
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	623b      	str	r3, [r7, #32]
 80098be:	e7fe      	b.n	80098be <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d009      	beq.n	80098dc <xQueueGiveFromISR+0x44>
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	61fb      	str	r3, [r7, #28]
 80098da:	e7fe      	b.n	80098da <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <xQueueGiveFromISR+0x54>
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <xQueueGiveFromISR+0x58>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <xQueueGiveFromISR+0x5a>
 80098f0:	2300      	movs	r3, #0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <xQueueGiveFromISR+0x72>
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	e7fe      	b.n	8009908 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800990a:	f001 fe9b 	bl	800b644 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800990e:	f3ef 8211 	mrs	r2, BASEPRI
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	617a      	str	r2, [r7, #20]
 8009924:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009926:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009936:	429a      	cmp	r2, r3
 8009938:	d22b      	bcs.n	8009992 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800994c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009954:	d112      	bne.n	800997c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b00      	cmp	r3, #0
 800995c:	d016      	beq.n	800998c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	3324      	adds	r3, #36	; 0x24
 8009962:	4618      	mov	r0, r3
 8009964:	f001 f870 	bl	800aa48 <xTaskRemoveFromEventList>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e007      	b.n	800998c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800997c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009980:	3301      	adds	r3, #1
 8009982:	b2db      	uxtb	r3, r3
 8009984:	b25a      	sxtb	r2, r3
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800998c:	2301      	movs	r3, #1
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
 8009990:	e001      	b.n	8009996 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009992:	2300      	movs	r3, #0
 8009994:	637b      	str	r3, [r7, #52]	; 0x34
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3738      	adds	r7, #56	; 0x38
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08c      	sub	sp, #48	; 0x30
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <xQueueReceive+0x2e>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	623b      	str	r3, [r7, #32]
 80099d8:	e7fe      	b.n	80099d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <xQueueReceive+0x3c>
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <xQueueReceive+0x40>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <xQueueReceive+0x42>
 80099ec:	2300      	movs	r3, #0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <xQueueReceive+0x5a>
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	61fb      	str	r3, [r7, #28]
 8009a04:	e7fe      	b.n	8009a04 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a06:	f001 f9db 	bl	800adc0 <xTaskGetSchedulerState>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <xQueueReceive+0x6a>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <xQueueReceive+0x6e>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <xQueueReceive+0x70>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d109      	bne.n	8009a34 <xQueueReceive+0x88>
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	e7fe      	b.n	8009a32 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a34:	f001 fd2a 	bl	800b48c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01f      	beq.n	8009a84 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f000 fa33 	bl	8009eb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	1e5a      	subs	r2, r3, #1
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00f      	beq.n	8009a7c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5e:	3310      	adds	r3, #16
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fff1 	bl	800aa48 <xTaskRemoveFromEventList>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a6c:	4b3c      	ldr	r3, [pc, #240]	; (8009b60 <xQueueReceive+0x1b4>)
 8009a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a7c:	f001 fd34 	bl	800b4e8 <vPortExitCritical>
				return pdPASS;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e069      	b.n	8009b58 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d103      	bne.n	8009a92 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a8a:	f001 fd2d 	bl	800b4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e062      	b.n	8009b58 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d106      	bne.n	8009aa6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a98:	f107 0310 	add.w	r3, r7, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 f835 	bl	800ab0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aa6:	f001 fd1f 	bl	800b4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009aaa:	f000 fde9 	bl	800a680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aae:	f001 fced 	bl	800b48c <vPortEnterCritical>
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab8:	b25b      	sxtb	r3, r3
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d103      	bne.n	8009ac8 <xQueueReceive+0x11c>
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ace:	b25b      	sxtb	r3, r3
 8009ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad4:	d103      	bne.n	8009ade <xQueueReceive+0x132>
 8009ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ade:	f001 fd03 	bl	800b4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ae2:	1d3a      	adds	r2, r7, #4
 8009ae4:	f107 0310 	add.w	r3, r7, #16
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 f824 	bl	800ab38 <xTaskCheckForTimeOut>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d123      	bne.n	8009b3e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af8:	f000 fa53 	bl	8009fa2 <prvIsQueueEmpty>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d017      	beq.n	8009b32 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	3324      	adds	r3, #36	; 0x24
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 ff78 	bl	800aa00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b12:	f000 f9f4 	bl	8009efe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b16:	f000 fdc1 	bl	800a69c <xTaskResumeAll>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d189      	bne.n	8009a34 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009b20:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <xQueueReceive+0x1b4>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	e780      	b.n	8009a34 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b34:	f000 f9e3 	bl	8009efe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b38:	f000 fdb0 	bl	800a69c <xTaskResumeAll>
 8009b3c:	e77a      	b.n	8009a34 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b40:	f000 f9dd 	bl	8009efe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b44:	f000 fdaa 	bl	800a69c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b4a:	f000 fa2a 	bl	8009fa2 <prvIsQueueEmpty>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f43f af6f 	beq.w	8009a34 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3730      	adds	r7, #48	; 0x30
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08e      	sub	sp, #56	; 0x38
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <xQueueSemaphoreTake+0x30>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	623b      	str	r3, [r7, #32]
 8009b92:	e7fe      	b.n	8009b92 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <xQueueSemaphoreTake+0x4c>
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e7fe      	b.n	8009bae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bb0:	f001 f906 	bl	800adc0 <xTaskGetSchedulerState>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d102      	bne.n	8009bc0 <xQueueSemaphoreTake+0x5c>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <xQueueSemaphoreTake+0x60>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e000      	b.n	8009bc6 <xQueueSemaphoreTake+0x62>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d109      	bne.n	8009bde <xQueueSemaphoreTake+0x7a>
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	61bb      	str	r3, [r7, #24]
 8009bdc:	e7fe      	b.n	8009bdc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bde:	f001 fc55 	bl	800b48c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d024      	beq.n	8009c38 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	1e5a      	subs	r2, r3, #1
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d104      	bne.n	8009c08 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009bfe:	f001 faa5 	bl	800b14c <pvTaskIncrementMutexHeldCount>
 8009c02:	4602      	mov	r2, r0
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00f      	beq.n	8009c30 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	3310      	adds	r3, #16
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 ff17 	bl	800aa48 <xTaskRemoveFromEventList>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d007      	beq.n	8009c30 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c20:	4b53      	ldr	r3, [pc, #332]	; (8009d70 <xQueueSemaphoreTake+0x20c>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c30:	f001 fc5a 	bl	800b4e8 <vPortExitCritical>
				return pdPASS;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e096      	b.n	8009d66 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d110      	bne.n	8009c60 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d009      	beq.n	8009c58 <xQueueSemaphoreTake+0xf4>
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	e7fe      	b.n	8009c56 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c58:	f001 fc46 	bl	800b4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e082      	b.n	8009d66 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c66:	f107 030c 	add.w	r3, r7, #12
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 ff4e 	bl	800ab0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c74:	f001 fc38 	bl	800b4e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c78:	f000 fd02 	bl	800a680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c7c:	f001 fc06 	bl	800b48c <vPortEnterCritical>
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <xQueueSemaphoreTake+0x132>
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d103      	bne.n	8009cac <xQueueSemaphoreTake+0x148>
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cac:	f001 fc1c 	bl	800b4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	f107 030c 	add.w	r3, r7, #12
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ff3d 	bl	800ab38 <xTaskCheckForTimeOut>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d132      	bne.n	8009d2a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cc6:	f000 f96c 	bl	8009fa2 <prvIsQueueEmpty>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d026      	beq.n	8009d1e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009cd8:	f001 fbd8 	bl	800b48c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f88b 	bl	800adfc <xTaskPriorityInherit>
 8009ce6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ce8:	f001 fbfe 	bl	800b4e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	3324      	adds	r3, #36	; 0x24
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fe83 	bl	800aa00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cfc:	f000 f8ff 	bl	8009efe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d00:	f000 fccc 	bl	800a69c <xTaskResumeAll>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f47f af69 	bne.w	8009bde <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009d0c:	4b18      	ldr	r3, [pc, #96]	; (8009d70 <xQueueSemaphoreTake+0x20c>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	e75f      	b.n	8009bde <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d20:	f000 f8ed 	bl	8009efe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d24:	f000 fcba 	bl	800a69c <xTaskResumeAll>
 8009d28:	e759      	b.n	8009bde <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d2c:	f000 f8e7 	bl	8009efe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d30:	f000 fcb4 	bl	800a69c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d36:	f000 f934 	bl	8009fa2 <prvIsQueueEmpty>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f43f af4e 	beq.w	8009bde <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00d      	beq.n	8009d64 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009d48:	f001 fba0 	bl	800b48c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d4e:	f000 f82e 	bl	8009dae <prvGetDisinheritPriorityAfterTimeout>
 8009d52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 f958 	bl	800b010 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d60:	f001 fbc2 	bl	800b4e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3738      	adds	r7, #56	; 0x38
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <uxQueueMessagesWaiting+0x22>
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	e7fe      	b.n	8009d94 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8009d96:	f001 fb79 	bl	800b48c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009da0:	f001 fba2 	bl	800b4e8 <vPortExitCritical>

	return uxReturn;
 8009da4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f1c3 0307 	rsb	r3, r3, #7
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	e001      	b.n	8009dd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
	}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10d      	bne.n	8009e18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d14d      	bne.n	8009ea0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 f87d 	bl	800af08 <xTaskPriorityDisinherit>
 8009e0e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	605a      	str	r2, [r3, #4]
 8009e16:	e043      	b.n	8009ea0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d119      	bne.n	8009e52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6898      	ldr	r0, [r3, #8]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	461a      	mov	r2, r3
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	f004 fd85 	bl	800e938 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	441a      	add	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d32b      	bcc.n	8009ea0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	609a      	str	r2, [r3, #8]
 8009e50:	e026      	b.n	8009ea0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	68d8      	ldr	r0, [r3, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	68b9      	ldr	r1, [r7, #8]
 8009e5e:	f004 fd6b 	bl	800e938 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	425b      	negs	r3, r3
 8009e6c:	441a      	add	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d207      	bcs.n	8009e8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	425b      	negs	r3, r3
 8009e88:	441a      	add	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d105      	bne.n	8009ea0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ea8:	697b      	ldr	r3, [r7, #20]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d018      	beq.n	8009ef6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68da      	ldr	r2, [r3, #12]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	441a      	add	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d303      	bcc.n	8009ee6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68d9      	ldr	r1, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6838      	ldr	r0, [r7, #0]
 8009ef2:	f004 fd21 	bl	800e938 <memcpy>
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f06:	f001 fac1 	bl	800b48c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f12:	e011      	b.n	8009f38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d012      	beq.n	8009f42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fd91 	bl	800aa48 <xTaskRemoveFromEventList>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f2c:	f000 fe64 	bl	800abf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dce9      	bgt.n	8009f14 <prvUnlockQueue+0x16>
 8009f40:	e000      	b.n	8009f44 <prvUnlockQueue+0x46>
					break;
 8009f42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	22ff      	movs	r2, #255	; 0xff
 8009f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f4c:	f001 facc 	bl	800b4e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f50:	f001 fa9c 	bl	800b48c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f5c:	e011      	b.n	8009f82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d012      	beq.n	8009f8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3310      	adds	r3, #16
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fd6c 	bl	800aa48 <xTaskRemoveFromEventList>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f76:	f000 fe3f 	bl	800abf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dce9      	bgt.n	8009f5e <prvUnlockQueue+0x60>
 8009f8a:	e000      	b.n	8009f8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	22ff      	movs	r2, #255	; 0xff
 8009f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f96:	f001 faa7 	bl	800b4e8 <vPortExitCritical>
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009faa:	f001 fa6f 	bl	800b48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d102      	bne.n	8009fbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e001      	b.n	8009fc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fc0:	f001 fa92 	bl	800b4e8 <vPortExitCritical>

	return xReturn;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fd6:	f001 fa59 	bl	800b48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d102      	bne.n	8009fec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	e001      	b.n	8009ff0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ff0:	f001 fa7a 	bl	800b4e8 <vPortExitCritical>

	return xReturn;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b08e      	sub	sp, #56	; 0x38
 800a002:	af04      	add	r7, sp, #16
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <xTaskCreateStatic+0x28>
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	623b      	str	r3, [r7, #32]
 800a024:	e7fe      	b.n	800a024 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <xTaskCreateStatic+0x42>
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	61fb      	str	r3, [r7, #28]
 800a03e:	e7fe      	b.n	800a03e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a040:	2354      	movs	r3, #84	; 0x54
 800a042:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2b54      	cmp	r3, #84	; 0x54
 800a048:	d009      	beq.n	800a05e <xTaskCreateStatic+0x60>
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e7fe      	b.n	800a05c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01e      	beq.n	800a0a2 <xTaskCreateStatic+0xa4>
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	2b00      	cmp	r3, #0
 800a068:	d01b      	beq.n	800a0a2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a072:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	2202      	movs	r2, #2
 800a078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a07c:	2300      	movs	r3, #0
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	9302      	str	r3, [sp, #8]
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f850 	bl	800a13a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a09a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a09c:	f000 f8cc 	bl	800a238 <prvAddNewTaskToReadyList>
 800a0a0:	e001      	b.n	800a0a6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0a6:	697b      	ldr	r3, [r7, #20]
	}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3728      	adds	r7, #40	; 0x28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08c      	sub	sp, #48	; 0x30
 800a0b4:	af04      	add	r7, sp, #16
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fafb 	bl	800b6c0 <pvPortMalloc>
 800a0ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00e      	beq.n	800a0f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a0d2:	2054      	movs	r0, #84	; 0x54
 800a0d4:	f001 faf4 	bl	800b6c0 <pvPortMalloc>
 800a0d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	631a      	str	r2, [r3, #48]	; 0x30
 800a0e6:	e005      	b.n	800a0f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0e8:	6978      	ldr	r0, [r7, #20]
 800a0ea:	f001 fafb 	bl	800b6e4 <vPortFree>
 800a0ee:	e001      	b.n	800a0f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d017      	beq.n	800a12a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a102:	88fa      	ldrh	r2, [r7, #6]
 800a104:	2300      	movs	r3, #0
 800a106:	9303      	str	r3, [sp, #12]
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f80e 	bl	800a13a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a11e:	69f8      	ldr	r0, [r7, #28]
 800a120:	f000 f88a 	bl	800a238 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a124:	2301      	movs	r3, #1
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	e002      	b.n	800a130 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a12a:	f04f 33ff 	mov.w	r3, #4294967295
 800a12e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a130:	69bb      	ldr	r3, [r7, #24]
	}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b088      	sub	sp, #32
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a152:	3b01      	subs	r3, #1
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	f003 0307 	and.w	r3, r3, #7
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d009      	beq.n	800a180 <prvInitialiseNewTask+0x46>
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e7fe      	b.n	800a17e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	e012      	b.n	800a1ac <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	4413      	add	r3, r2
 800a18c:	7819      	ldrb	r1, [r3, #0]
 800a18e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	4413      	add	r3, r2
 800a194:	3334      	adds	r3, #52	; 0x34
 800a196:	460a      	mov	r2, r1
 800a198:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	4413      	add	r3, r2
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	2b0f      	cmp	r3, #15
 800a1b0:	d9e9      	bls.n	800a186 <prvInitialiseNewTask+0x4c>
 800a1b2:	e000      	b.n	800a1b6 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a1b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	2b06      	cmp	r3, #6
 800a1c2:	d901      	bls.n	800a1c8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1c4:	2306      	movs	r3, #6
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	3304      	adds	r3, #4
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff f895 	bl	800930e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff f890 	bl	800930e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	f1c3 0207 	rsb	r2, r3, #7
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a202:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	2200      	movs	r2, #0
 800a208:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	69b8      	ldr	r0, [r7, #24]
 800a218:	f001 f812 	bl	800b240 <pxPortInitialiseStack>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a22c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a22e:	bf00      	nop
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a240:	f001 f924 	bl	800b48c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a244:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <prvAddNewTaskToReadyList+0xb8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	4a29      	ldr	r2, [pc, #164]	; (800a2f0 <prvAddNewTaskToReadyList+0xb8>)
 800a24c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a24e:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <prvAddNewTaskToReadyList+0xbc>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a256:	4a27      	ldr	r2, [pc, #156]	; (800a2f4 <prvAddNewTaskToReadyList+0xbc>)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a25c:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <prvAddNewTaskToReadyList+0xb8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d110      	bne.n	800a286 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a264:	f000 fcec 	bl	800ac40 <prvInitialiseTaskLists>
 800a268:	e00d      	b.n	800a286 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a26a:	4b23      	ldr	r3, [pc, #140]	; (800a2f8 <prvAddNewTaskToReadyList+0xc0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d109      	bne.n	800a286 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a272:	4b20      	ldr	r3, [pc, #128]	; (800a2f4 <prvAddNewTaskToReadyList+0xbc>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d802      	bhi.n	800a286 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a280:	4a1c      	ldr	r2, [pc, #112]	; (800a2f4 <prvAddNewTaskToReadyList+0xbc>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a286:	4b1d      	ldr	r3, [pc, #116]	; (800a2fc <prvAddNewTaskToReadyList+0xc4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a1b      	ldr	r2, [pc, #108]	; (800a2fc <prvAddNewTaskToReadyList+0xc4>)
 800a28e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	2201      	movs	r2, #1
 800a296:	409a      	lsls	r2, r3
 800a298:	4b19      	ldr	r3, [pc, #100]	; (800a300 <prvAddNewTaskToReadyList+0xc8>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	4a18      	ldr	r2, [pc, #96]	; (800a300 <prvAddNewTaskToReadyList+0xc8>)
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a15      	ldr	r2, [pc, #84]	; (800a304 <prvAddNewTaskToReadyList+0xcc>)
 800a2b0:	441a      	add	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	f7ff f835 	bl	8009328 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2be:	f001 f913 	bl	800b4e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <prvAddNewTaskToReadyList+0xc0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00e      	beq.n	800a2e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <prvAddNewTaskToReadyList+0xbc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d207      	bcs.n	800a2e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2d8:	4b0b      	ldr	r3, [pc, #44]	; (800a308 <prvAddNewTaskToReadyList+0xd0>)
 800a2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	2000031c 	.word	0x2000031c
 800a2f4:	2000021c 	.word	0x2000021c
 800a2f8:	20000328 	.word	0x20000328
 800a2fc:	20000338 	.word	0x20000338
 800a300:	20000324 	.word	0x20000324
 800a304:	20000220 	.word	0x20000220
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d016      	beq.n	800a34c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <vTaskDelay+0x60>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d009      	beq.n	800a33a <vTaskDelay+0x2e>
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	e7fe      	b.n	800a338 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a33a:	f000 f9a1 	bl	800a680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a33e:	2100      	movs	r1, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 ff17 	bl	800b174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a346:	f000 f9a9 	bl	800a69c <xTaskResumeAll>
 800a34a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d107      	bne.n	800a362 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a352:	4b07      	ldr	r3, [pc, #28]	; (800a370 <vTaskDelay+0x64>)
 800a354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20000344 	.word	0x20000344
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a37c:	f001 f886 	bl	800b48c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <vTaskSuspend+0x18>
 800a386:	4b3c      	ldr	r3, [pc, #240]	; (800a478 <vTaskSuspend+0x104>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	e000      	b.n	800a38e <vTaskSuspend+0x1a>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff f824 	bl	80093e2 <uxListRemove>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d115      	bne.n	800a3cc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	4935      	ldr	r1, [pc, #212]	; (800a47c <vTaskSuspend+0x108>)
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <vTaskSuspend+0x58>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c0:	43da      	mvns	r2, r3
 800a3c2:	4b2f      	ldr	r3, [pc, #188]	; (800a480 <vTaskSuspend+0x10c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	4a2d      	ldr	r2, [pc, #180]	; (800a480 <vTaskSuspend+0x10c>)
 800a3ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3318      	adds	r3, #24
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff f802 	bl	80093e2 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4827      	ldr	r0, [pc, #156]	; (800a484 <vTaskSuspend+0x110>)
 800a3e6:	f7fe ff9f 	bl	8009328 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d103      	bne.n	800a3fe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a3fe:	f001 f873 	bl	800b4e8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a402:	4b21      	ldr	r3, [pc, #132]	; (800a488 <vTaskSuspend+0x114>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a40a:	f001 f83f 	bl	800b48c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a40e:	f000 fcb1 	bl	800ad74 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a412:	f001 f869 	bl	800b4e8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a416:	4b18      	ldr	r3, [pc, #96]	; (800a478 <vTaskSuspend+0x104>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d126      	bne.n	800a46e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800a420:	4b19      	ldr	r3, [pc, #100]	; (800a488 <vTaskSuspend+0x114>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d016      	beq.n	800a456 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a428:	4b18      	ldr	r3, [pc, #96]	; (800a48c <vTaskSuspend+0x118>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <vTaskSuspend+0xd0>
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	60bb      	str	r3, [r7, #8]
 800a442:	e7fe      	b.n	800a442 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800a444:	4b12      	ldr	r3, [pc, #72]	; (800a490 <vTaskSuspend+0x11c>)
 800a446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a454:	e00b      	b.n	800a46e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a456:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <vTaskSuspend+0x110>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <vTaskSuspend+0x120>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d103      	bne.n	800a46a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <vTaskSuspend+0x104>)
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
	}
 800a468:	e001      	b.n	800a46e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800a46a:	f000 fa6f 	bl	800a94c <vTaskSwitchContext>
	}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	2000021c 	.word	0x2000021c
 800a47c:	20000220 	.word	0x20000220
 800a480:	20000324 	.word	0x20000324
 800a484:	20000308 	.word	0x20000308
 800a488:	20000328 	.word	0x20000328
 800a48c:	20000344 	.word	0x20000344
 800a490:	e000ed04 	.word	0xe000ed04
 800a494:	2000031c 	.word	0x2000031c

0800a498 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d109      	bne.n	800a4c2 <prvTaskIsTaskSuspended+0x2a>
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e7fe      	b.n	800a4c0 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	4a0f      	ldr	r2, [pc, #60]	; (800a504 <prvTaskIsTaskSuspended+0x6c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d101      	bne.n	800a4d0 <prvTaskIsTaskSuspended+0x38>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <prvTaskIsTaskSuspended+0x3a>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00f      	beq.n	800a4f6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	4a0b      	ldr	r2, [pc, #44]	; (800a508 <prvTaskIsTaskSuspended+0x70>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00a      	beq.n	800a4f6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <prvTaskIsTaskSuspended+0x54>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e000      	b.n	800a4ee <prvTaskIsTaskSuspended+0x56>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4f6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	371c      	adds	r7, #28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20000308 	.word	0x20000308
 800a508:	200002dc 	.word	0x200002dc

0800a50c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <vTaskResume+0x26>
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	e7fe      	b.n	800a530 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d039      	beq.n	800a5ac <vTaskResume+0xa0>
 800a538:	4b1e      	ldr	r3, [pc, #120]	; (800a5b4 <vTaskResume+0xa8>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d034      	beq.n	800a5ac <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 800a542:	f000 ffa3 	bl	800b48c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ffa6 	bl	800a498 <prvTaskIsTaskSuspended>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d02a      	beq.n	800a5a8 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3304      	adds	r3, #4
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe ff43 	bl	80093e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	2201      	movs	r2, #1
 800a562:	409a      	lsls	r2, r3
 800a564:	4b14      	ldr	r3, [pc, #80]	; (800a5b8 <vTaskResume+0xac>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4313      	orrs	r3, r2
 800a56a:	4a13      	ldr	r2, [pc, #76]	; (800a5b8 <vTaskResume+0xac>)
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4a10      	ldr	r2, [pc, #64]	; (800a5bc <vTaskResume+0xb0>)
 800a57c:	441a      	add	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3304      	adds	r3, #4
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f7fe fecf 	bl	8009328 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <vTaskResume+0xa8>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	429a      	cmp	r2, r3
 800a596:	d307      	bcc.n	800a5a8 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a598:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <vTaskResume+0xb4>)
 800a59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a5a8:	f000 ff9e 	bl	800b4e8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5ac:	bf00      	nop
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	2000021c 	.word	0x2000021c
 800a5b8:	20000324 	.word	0x20000324
 800a5bc:	20000220 	.word	0x20000220
 800a5c0:	e000ed04 	.word	0xe000ed04

0800a5c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08a      	sub	sp, #40	; 0x28
 800a5c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	1d39      	adds	r1, r7, #4
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fb34 	bl	800bc48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	9202      	str	r2, [sp, #8]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	491d      	ldr	r1, [pc, #116]	; (800a668 <vTaskStartScheduler+0xa4>)
 800a5f4:	481d      	ldr	r0, [pc, #116]	; (800a66c <vTaskStartScheduler+0xa8>)
 800a5f6:	f7ff fd02 	bl	8009ffe <xTaskCreateStatic>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b1c      	ldr	r3, [pc, #112]	; (800a670 <vTaskStartScheduler+0xac>)
 800a5fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a600:	4b1b      	ldr	r3, [pc, #108]	; (800a670 <vTaskStartScheduler+0xac>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e001      	b.n	800a612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a60e:	2300      	movs	r3, #0
 800a610:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d115      	bne.n	800a644 <vTaskStartScheduler+0x80>
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <vTaskStartScheduler+0xb0>)
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a632:	4b11      	ldr	r3, [pc, #68]	; (800a678 <vTaskStartScheduler+0xb4>)
 800a634:	2201      	movs	r2, #1
 800a636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a638:	4b10      	ldr	r3, [pc, #64]	; (800a67c <vTaskStartScheduler+0xb8>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a63e:	f000 fe87 	bl	800b350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a642:	e00d      	b.n	800a660 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d109      	bne.n	800a660 <vTaskStartScheduler+0x9c>
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e7fe      	b.n	800a65e <vTaskStartScheduler+0x9a>
}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	08010718 	.word	0x08010718
 800a66c:	0800ac11 	.word	0x0800ac11
 800a670:	20000340 	.word	0x20000340
 800a674:	2000033c 	.word	0x2000033c
 800a678:	20000328 	.word	0x20000328
 800a67c:	20000320 	.word	0x20000320

0800a680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a684:	4b04      	ldr	r3, [pc, #16]	; (800a698 <vTaskSuspendAll+0x18>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	4a03      	ldr	r2, [pc, #12]	; (800a698 <vTaskSuspendAll+0x18>)
 800a68c:	6013      	str	r3, [r2, #0]
}
 800a68e:	bf00      	nop
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	20000344 	.word	0x20000344

0800a69c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6aa:	4b41      	ldr	r3, [pc, #260]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <xTaskResumeAll+0x2a>
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	e7fe      	b.n	800a6c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6c6:	f000 fee1 	bl	800b48c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6ca:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4a37      	ldr	r2, [pc, #220]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6d4:	4b36      	ldr	r3, [pc, #216]	; (800a7b0 <xTaskResumeAll+0x114>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d161      	bne.n	800a7a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6dc:	4b35      	ldr	r3, [pc, #212]	; (800a7b4 <xTaskResumeAll+0x118>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d05d      	beq.n	800a7a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6e4:	e02e      	b.n	800a744 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a6e6:	4b34      	ldr	r3, [pc, #208]	; (800a7b8 <xTaskResumeAll+0x11c>)
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fe75 	bl	80093e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fe fe70 	bl	80093e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	2201      	movs	r2, #1
 800a708:	409a      	lsls	r2, r3
 800a70a:	4b2c      	ldr	r3, [pc, #176]	; (800a7bc <xTaskResumeAll+0x120>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4313      	orrs	r3, r2
 800a710:	4a2a      	ldr	r2, [pc, #168]	; (800a7bc <xTaskResumeAll+0x120>)
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4a27      	ldr	r2, [pc, #156]	; (800a7c0 <xTaskResumeAll+0x124>)
 800a722:	441a      	add	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fe fdfc 	bl	8009328 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <xTaskResumeAll+0x128>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d302      	bcc.n	800a744 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a73e:	4b22      	ldr	r3, [pc, #136]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a744:	4b1c      	ldr	r3, [pc, #112]	; (800a7b8 <xTaskResumeAll+0x11c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1cc      	bne.n	800a6e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a752:	f000 fb0f 	bl	800ad74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a756:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <xTaskResumeAll+0x130>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d010      	beq.n	800a784 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a762:	f000 f837 	bl	800a7d4 <xTaskIncrementTick>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a76c:	4b16      	ldr	r3, [pc, #88]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a76e:	2201      	movs	r2, #1
 800a770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3b01      	subs	r3, #1
 800a776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1f1      	bne.n	800a762 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <xTaskResumeAll+0x130>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a784:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <xTaskResumeAll+0x12c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <xTaskResumeAll+0x134>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7a0:	f000 fea2 	bl	800b4e8 <vPortExitCritical>

	return xAlreadyYielded;
 800a7a4:	68bb      	ldr	r3, [r7, #8]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000344 	.word	0x20000344
 800a7b4:	2000031c 	.word	0x2000031c
 800a7b8:	200002dc 	.word	0x200002dc
 800a7bc:	20000324 	.word	0x20000324
 800a7c0:	20000220 	.word	0x20000220
 800a7c4:	2000021c 	.word	0x2000021c
 800a7c8:	20000330 	.word	0x20000330
 800a7cc:	2000032c 	.word	0x2000032c
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7de:	4b50      	ldr	r3, [pc, #320]	; (800a920 <xTaskIncrementTick+0x14c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f040 808c 	bne.w	800a900 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7e8:	4b4e      	ldr	r3, [pc, #312]	; (800a924 <xTaskIncrementTick+0x150>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7f0:	4a4c      	ldr	r2, [pc, #304]	; (800a924 <xTaskIncrementTick+0x150>)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11f      	bne.n	800a83c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7fc:	4b4a      	ldr	r3, [pc, #296]	; (800a928 <xTaskIncrementTick+0x154>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <xTaskIncrementTick+0x46>
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	e7fe      	b.n	800a818 <xTaskIncrementTick+0x44>
 800a81a:	4b43      	ldr	r3, [pc, #268]	; (800a928 <xTaskIncrementTick+0x154>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	4b42      	ldr	r3, [pc, #264]	; (800a92c <xTaskIncrementTick+0x158>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a40      	ldr	r2, [pc, #256]	; (800a928 <xTaskIncrementTick+0x154>)
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	4a40      	ldr	r2, [pc, #256]	; (800a92c <xTaskIncrementTick+0x158>)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	4b40      	ldr	r3, [pc, #256]	; (800a930 <xTaskIncrementTick+0x15c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	4a3e      	ldr	r2, [pc, #248]	; (800a930 <xTaskIncrementTick+0x15c>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	f000 fa9c 	bl	800ad74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a83c:	4b3d      	ldr	r3, [pc, #244]	; (800a934 <xTaskIncrementTick+0x160>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	429a      	cmp	r2, r3
 800a844:	d34d      	bcc.n	800a8e2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a846:	4b38      	ldr	r3, [pc, #224]	; (800a928 <xTaskIncrementTick+0x154>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <xTaskIncrementTick+0x80>
 800a850:	2301      	movs	r3, #1
 800a852:	e000      	b.n	800a856 <xTaskIncrementTick+0x82>
 800a854:	2300      	movs	r3, #0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <xTaskIncrementTick+0x160>)
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	601a      	str	r2, [r3, #0]
					break;
 800a862:	e03e      	b.n	800a8e2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a864:	4b30      	ldr	r3, [pc, #192]	; (800a928 <xTaskIncrementTick+0x154>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d203      	bcs.n	800a884 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a87c:	4a2d      	ldr	r2, [pc, #180]	; (800a934 <xTaskIncrementTick+0x160>)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6013      	str	r3, [r2, #0]
						break;
 800a882:	e02e      	b.n	800a8e2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	3304      	adds	r3, #4
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fdaa 	bl	80093e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	3318      	adds	r3, #24
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe fda1 	bl	80093e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	4b23      	ldr	r3, [pc, #140]	; (800a938 <xTaskIncrementTick+0x164>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	4a22      	ldr	r2, [pc, #136]	; (800a938 <xTaskIncrementTick+0x164>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4a1f      	ldr	r2, [pc, #124]	; (800a93c <xTaskIncrementTick+0x168>)
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7fe fd2d 	bl	8009328 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	; (800a940 <xTaskIncrementTick+0x16c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d3b4      	bcc.n	800a846 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8e0:	e7b1      	b.n	800a846 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8e2:	4b17      	ldr	r3, [pc, #92]	; (800a940 <xTaskIncrementTick+0x16c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4914      	ldr	r1, [pc, #80]	; (800a93c <xTaskIncrementTick+0x168>)
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	440b      	add	r3, r1
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d907      	bls.n	800a90a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	e004      	b.n	800a90a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a900:	4b10      	ldr	r3, [pc, #64]	; (800a944 <xTaskIncrementTick+0x170>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a0f      	ldr	r2, [pc, #60]	; (800a944 <xTaskIncrementTick+0x170>)
 800a908:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a90a:	4b0f      	ldr	r3, [pc, #60]	; (800a948 <xTaskIncrementTick+0x174>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a916:	697b      	ldr	r3, [r7, #20]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20000344 	.word	0x20000344
 800a924:	20000320 	.word	0x20000320
 800a928:	200002d4 	.word	0x200002d4
 800a92c:	200002d8 	.word	0x200002d8
 800a930:	20000334 	.word	0x20000334
 800a934:	2000033c 	.word	0x2000033c
 800a938:	20000324 	.word	0x20000324
 800a93c:	20000220 	.word	0x20000220
 800a940:	2000021c 	.word	0x2000021c
 800a944:	2000032c 	.word	0x2000032c
 800a948:	20000330 	.word	0x20000330

0800a94c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a952:	4b26      	ldr	r3, [pc, #152]	; (800a9ec <vTaskSwitchContext+0xa0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a95a:	4b25      	ldr	r3, [pc, #148]	; (800a9f0 <vTaskSwitchContext+0xa4>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a960:	e03e      	b.n	800a9e0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a962:	4b23      	ldr	r3, [pc, #140]	; (800a9f0 <vTaskSwitchContext+0xa4>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a968:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <vTaskSwitchContext+0xa8>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	fab3 f383 	clz	r3, r3
 800a974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	f1c3 031f 	rsb	r3, r3, #31
 800a97c:	617b      	str	r3, [r7, #20]
 800a97e:	491e      	ldr	r1, [pc, #120]	; (800a9f8 <vTaskSwitchContext+0xac>)
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d109      	bne.n	800a9a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	607b      	str	r3, [r7, #4]
 800a9a4:	e7fe      	b.n	800a9a4 <vTaskSwitchContext+0x58>
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4a11      	ldr	r2, [pc, #68]	; (800a9f8 <vTaskSwitchContext+0xac>)
 800a9b2:	4413      	add	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	605a      	str	r2, [r3, #4]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d104      	bne.n	800a9d6 <vTaskSwitchContext+0x8a>
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	605a      	str	r2, [r3, #4]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	4a07      	ldr	r2, [pc, #28]	; (800a9fc <vTaskSwitchContext+0xb0>)
 800a9de:	6013      	str	r3, [r2, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	371c      	adds	r7, #28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000344 	.word	0x20000344
 800a9f0:	20000330 	.word	0x20000330
 800a9f4:	20000324 	.word	0x20000324
 800a9f8:	20000220 	.word	0x20000220
 800a9fc:	2000021c 	.word	0x2000021c

0800aa00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d109      	bne.n	800aa24 <vTaskPlaceOnEventList+0x24>
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e7fe      	b.n	800aa22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa24:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <vTaskPlaceOnEventList+0x44>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3318      	adds	r3, #24
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe fc9f 	bl	8009370 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa32:	2101      	movs	r1, #1
 800aa34:	6838      	ldr	r0, [r7, #0]
 800aa36:	f000 fb9d 	bl	800b174 <prvAddCurrentTaskToDelayedList>
}
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	2000021c 	.word	0x2000021c

0800aa48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d109      	bne.n	800aa72 <xTaskRemoveFromEventList+0x2a>
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e7fe      	b.n	800aa70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3318      	adds	r3, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fcb3 	bl	80093e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <xTaskRemoveFromEventList+0xac>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11c      	bne.n	800aabe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fcaa 	bl	80093e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	2201      	movs	r2, #1
 800aa94:	409a      	lsls	r2, r3
 800aa96:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <xTaskRemoveFromEventList+0xb0>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	4a16      	ldr	r2, [pc, #88]	; (800aaf8 <xTaskRemoveFromEventList+0xb0>)
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4a13      	ldr	r2, [pc, #76]	; (800aafc <xTaskRemoveFromEventList+0xb4>)
 800aaae:	441a      	add	r2, r3
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7fe fc36 	bl	8009328 <vListInsertEnd>
 800aabc:	e005      	b.n	800aaca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3318      	adds	r3, #24
 800aac2:	4619      	mov	r1, r3
 800aac4:	480e      	ldr	r0, [pc, #56]	; (800ab00 <xTaskRemoveFromEventList+0xb8>)
 800aac6:	f7fe fc2f 	bl	8009328 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aace:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <xTaskRemoveFromEventList+0xbc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d905      	bls.n	800aae4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aad8:	2301      	movs	r3, #1
 800aada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <xTaskRemoveFromEventList+0xc0>)
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e001      	b.n	800aae8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aae8:	697b      	ldr	r3, [r7, #20]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000344 	.word	0x20000344
 800aaf8:	20000324 	.word	0x20000324
 800aafc:	20000220 	.word	0x20000220
 800ab00:	200002dc 	.word	0x200002dc
 800ab04:	2000021c 	.word	0x2000021c
 800ab08:	20000330 	.word	0x20000330

0800ab0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab14:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <vTaskInternalSetTimeOutState+0x24>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <vTaskInternalSetTimeOutState+0x28>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	605a      	str	r2, [r3, #4]
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	20000334 	.word	0x20000334
 800ab34:	20000320 	.word	0x20000320

0800ab38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d109      	bne.n	800ab5c <xTaskCheckForTimeOut+0x24>
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	613b      	str	r3, [r7, #16]
 800ab5a:	e7fe      	b.n	800ab5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <xTaskCheckForTimeOut+0x3e>
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	e7fe      	b.n	800ab74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ab76:	f000 fc89 	bl	800b48c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab7a:	4b1d      	ldr	r3, [pc, #116]	; (800abf0 <xTaskCheckForTimeOut+0xb8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d102      	bne.n	800ab9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab94:	2300      	movs	r3, #0
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	e023      	b.n	800abe2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <xTaskCheckForTimeOut+0xbc>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d007      	beq.n	800abb6 <xTaskCheckForTimeOut+0x7e>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	429a      	cmp	r2, r3
 800abae:	d302      	bcc.n	800abb6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	61fb      	str	r3, [r7, #28]
 800abb4:	e015      	b.n	800abe2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d20b      	bcs.n	800abd8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	1ad2      	subs	r2, r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff ff9d 	bl	800ab0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
 800abd6:	e004      	b.n	800abe2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abde:	2301      	movs	r3, #1
 800abe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abe2:	f000 fc81 	bl	800b4e8 <vPortExitCritical>

	return xReturn;
 800abe6:	69fb      	ldr	r3, [r7, #28]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20000320 	.word	0x20000320
 800abf4:	20000334 	.word	0x20000334

0800abf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abfc:	4b03      	ldr	r3, [pc, #12]	; (800ac0c <vTaskMissedYield+0x14>)
 800abfe:	2201      	movs	r2, #1
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20000330 	.word	0x20000330

0800ac10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac18:	f000 f852 	bl	800acc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac1c:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <prvIdleTask+0x28>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d9f9      	bls.n	800ac18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac24:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <prvIdleTask+0x2c>)
 800ac26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2a:	601a      	str	r2, [r3, #0]
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac34:	e7f0      	b.n	800ac18 <prvIdleTask+0x8>
 800ac36:	bf00      	nop
 800ac38:	20000220 	.word	0x20000220
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac46:	2300      	movs	r3, #0
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	e00c      	b.n	800ac66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4a12      	ldr	r2, [pc, #72]	; (800aca0 <prvInitialiseTaskLists+0x60>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe fb37 	bl	80092ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3301      	adds	r3, #1
 800ac64:	607b      	str	r3, [r7, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b06      	cmp	r3, #6
 800ac6a:	d9ef      	bls.n	800ac4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac6c:	480d      	ldr	r0, [pc, #52]	; (800aca4 <prvInitialiseTaskLists+0x64>)
 800ac6e:	f7fe fb2e 	bl	80092ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac72:	480d      	ldr	r0, [pc, #52]	; (800aca8 <prvInitialiseTaskLists+0x68>)
 800ac74:	f7fe fb2b 	bl	80092ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac78:	480c      	ldr	r0, [pc, #48]	; (800acac <prvInitialiseTaskLists+0x6c>)
 800ac7a:	f7fe fb28 	bl	80092ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac7e:	480c      	ldr	r0, [pc, #48]	; (800acb0 <prvInitialiseTaskLists+0x70>)
 800ac80:	f7fe fb25 	bl	80092ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac84:	480b      	ldr	r0, [pc, #44]	; (800acb4 <prvInitialiseTaskLists+0x74>)
 800ac86:	f7fe fb22 	bl	80092ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac8a:	4b0b      	ldr	r3, [pc, #44]	; (800acb8 <prvInitialiseTaskLists+0x78>)
 800ac8c:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <prvInitialiseTaskLists+0x64>)
 800ac8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <prvInitialiseTaskLists+0x7c>)
 800ac92:	4a05      	ldr	r2, [pc, #20]	; (800aca8 <prvInitialiseTaskLists+0x68>)
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000220 	.word	0x20000220
 800aca4:	200002ac 	.word	0x200002ac
 800aca8:	200002c0 	.word	0x200002c0
 800acac:	200002dc 	.word	0x200002dc
 800acb0:	200002f0 	.word	0x200002f0
 800acb4:	20000308 	.word	0x20000308
 800acb8:	200002d4 	.word	0x200002d4
 800acbc:	200002d8 	.word	0x200002d8

0800acc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acc6:	e019      	b.n	800acfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acc8:	f000 fbe0 	bl	800b48c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800accc:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <prvCheckTasksWaitingTermination+0x4c>)
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3304      	adds	r3, #4
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe fb82 	bl	80093e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <prvCheckTasksWaitingTermination+0x50>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <prvCheckTasksWaitingTermination+0x50>)
 800ace6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <prvCheckTasksWaitingTermination+0x54>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3b01      	subs	r3, #1
 800acee:	4a09      	ldr	r2, [pc, #36]	; (800ad14 <prvCheckTasksWaitingTermination+0x54>)
 800acf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acf2:	f000 fbf9 	bl	800b4e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f80e 	bl	800ad18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <prvCheckTasksWaitingTermination+0x54>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e1      	bne.n	800acc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	200002f0 	.word	0x200002f0
 800ad10:	2000031c 	.word	0x2000031c
 800ad14:	20000304 	.word	0x20000304

0800ad18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d108      	bne.n	800ad3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fcd8 	bl	800b6e4 <vPortFree>
				vPortFree( pxTCB );
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fcd5 	bl	800b6e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad3a:	e017      	b.n	800ad6c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d103      	bne.n	800ad4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fccc 	bl	800b6e4 <vPortFree>
	}
 800ad4c:	e00e      	b.n	800ad6c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d009      	beq.n	800ad6c <prvDeleteTCB+0x54>
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e7fe      	b.n	800ad6a <prvDeleteTCB+0x52>
	}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <prvResetNextTaskUnblockTime+0x44>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <prvResetNextTaskUnblockTime+0x14>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <prvResetNextTaskUnblockTime+0x16>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <prvResetNextTaskUnblockTime+0x48>)
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad96:	e008      	b.n	800adaa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ad98:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <prvResetNextTaskUnblockTime+0x44>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4a05      	ldr	r2, [pc, #20]	; (800adbc <prvResetNextTaskUnblockTime+0x48>)
 800ada8:	6013      	str	r3, [r2, #0]
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	200002d4 	.word	0x200002d4
 800adbc:	2000033c 	.word	0x2000033c

0800adc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <xTaskGetSchedulerState+0x34>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d102      	bne.n	800add4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adce:	2301      	movs	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	e008      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add4:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <xTaskGetSchedulerState+0x38>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800addc:	2302      	movs	r3, #2
 800adde:	607b      	str	r3, [r7, #4]
 800ade0:	e001      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ade2:	2300      	movs	r3, #0
 800ade4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ade6:	687b      	ldr	r3, [r7, #4]
	}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20000328 	.word	0x20000328
 800adf8:	20000344 	.word	0x20000344

0800adfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d06e      	beq.n	800aef0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae16:	4b39      	ldr	r3, [pc, #228]	; (800aefc <xTaskPriorityInherit+0x100>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d25e      	bcs.n	800aede <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	699b      	ldr	r3, [r3, #24]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	db06      	blt.n	800ae36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae28:	4b34      	ldr	r3, [pc, #208]	; (800aefc <xTaskPriorityInherit+0x100>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	f1c3 0207 	rsb	r2, r3, #7
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6959      	ldr	r1, [r3, #20]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4a2e      	ldr	r2, [pc, #184]	; (800af00 <xTaskPriorityInherit+0x104>)
 800ae48:	4413      	add	r3, r2
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	d101      	bne.n	800ae52 <xTaskPriorityInherit+0x56>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e000      	b.n	800ae54 <xTaskPriorityInherit+0x58>
 800ae52:	2300      	movs	r3, #0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d03a      	beq.n	800aece <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fac0 	bl	80093e2 <uxListRemove>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d115      	bne.n	800ae94 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6c:	4924      	ldr	r1, [pc, #144]	; (800af00 <xTaskPriorityInherit+0x104>)
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <xTaskPriorityInherit+0x98>
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	2201      	movs	r2, #1
 800ae84:	fa02 f303 	lsl.w	r3, r2, r3
 800ae88:	43da      	mvns	r2, r3
 800ae8a:	4b1e      	ldr	r3, [pc, #120]	; (800af04 <xTaskPriorityInherit+0x108>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	4a1c      	ldr	r2, [pc, #112]	; (800af04 <xTaskPriorityInherit+0x108>)
 800ae92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae94:	4b19      	ldr	r3, [pc, #100]	; (800aefc <xTaskPriorityInherit+0x100>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	2201      	movs	r2, #1
 800aea4:	409a      	lsls	r2, r3
 800aea6:	4b17      	ldr	r3, [pc, #92]	; (800af04 <xTaskPriorityInherit+0x108>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	4a15      	ldr	r2, [pc, #84]	; (800af04 <xTaskPriorityInherit+0x108>)
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4a10      	ldr	r2, [pc, #64]	; (800af00 <xTaskPriorityInherit+0x104>)
 800aebe:	441a      	add	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	3304      	adds	r3, #4
 800aec4:	4619      	mov	r1, r3
 800aec6:	4610      	mov	r0, r2
 800aec8:	f7fe fa2e 	bl	8009328 <vListInsertEnd>
 800aecc:	e004      	b.n	800aed8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aece:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <xTaskPriorityInherit+0x100>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	e008      	b.n	800aef0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aee2:	4b06      	ldr	r3, [pc, #24]	; (800aefc <xTaskPriorityInherit+0x100>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d201      	bcs.n	800aef0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aef0:	68fb      	ldr	r3, [r7, #12]
	}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	2000021c 	.word	0x2000021c
 800af00:	20000220 	.word	0x20000220
 800af04:	20000324 	.word	0x20000324

0800af08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d06c      	beq.n	800aff8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af1e:	4b39      	ldr	r3, [pc, #228]	; (800b004 <xTaskPriorityDisinherit+0xfc>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	429a      	cmp	r2, r3
 800af26:	d009      	beq.n	800af3c <xTaskPriorityDisinherit+0x34>
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e7fe      	b.n	800af3a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af40:	2b00      	cmp	r3, #0
 800af42:	d109      	bne.n	800af58 <xTaskPriorityDisinherit+0x50>
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	60bb      	str	r3, [r7, #8]
 800af56:	e7fe      	b.n	800af56 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d044      	beq.n	800aff8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af72:	2b00      	cmp	r3, #0
 800af74:	d140      	bne.n	800aff8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	3304      	adds	r3, #4
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fa31 	bl	80093e2 <uxListRemove>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d115      	bne.n	800afb2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8a:	491f      	ldr	r1, [pc, #124]	; (800b008 <xTaskPriorityDisinherit+0x100>)
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	440b      	add	r3, r1
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <xTaskPriorityDisinherit+0xaa>
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	2201      	movs	r2, #1
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	43da      	mvns	r2, r3
 800afa8:	4b18      	ldr	r3, [pc, #96]	; (800b00c <xTaskPriorityDisinherit+0x104>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4013      	ands	r3, r2
 800afae:	4a17      	ldr	r2, [pc, #92]	; (800b00c <xTaskPriorityDisinherit+0x104>)
 800afb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbe:	f1c3 0207 	rsb	r2, r3, #7
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	2201      	movs	r2, #1
 800afcc:	409a      	lsls	r2, r3
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <xTaskPriorityDisinherit+0x104>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <xTaskPriorityDisinherit+0x104>)
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4a08      	ldr	r2, [pc, #32]	; (800b008 <xTaskPriorityDisinherit+0x100>)
 800afe6:	441a      	add	r2, r3
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	3304      	adds	r3, #4
 800afec:	4619      	mov	r1, r3
 800afee:	4610      	mov	r0, r2
 800aff0:	f7fe f99a 	bl	8009328 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aff4:	2301      	movs	r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff8:	697b      	ldr	r3, [r7, #20]
	}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	2000021c 	.word	0x2000021c
 800b008:	20000220 	.word	0x20000220
 800b00c:	20000324 	.word	0x20000324

0800b010 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b01e:	2301      	movs	r3, #1
 800b020:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 8086 	beq.w	800b136 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d109      	bne.n	800b046 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	e7fe      	b.n	800b044 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d902      	bls.n	800b056 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	e002      	b.n	800b05c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	69fa      	ldr	r2, [r7, #28]
 800b062:	429a      	cmp	r2, r3
 800b064:	d067      	beq.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d162      	bne.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b070:	4b33      	ldr	r3, [pc, #204]	; (800b140 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	429a      	cmp	r2, r3
 800b078:	d109      	bne.n	800b08e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	60bb      	str	r3, [r7, #8]
 800b08c:	e7fe      	b.n	800b08c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	69fa      	ldr	r2, [r7, #28]
 800b098:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	db04      	blt.n	800b0ac <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	f1c3 0207 	rsb	r2, r3, #7
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	6959      	ldr	r1, [r3, #20]
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4a22      	ldr	r2, [pc, #136]	; (800b144 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b0bc:	4413      	add	r3, r2
 800b0be:	4299      	cmp	r1, r3
 800b0c0:	d101      	bne.n	800b0c6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d034      	beq.n	800b136 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fe f986 	bl	80093e2 <uxListRemove>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d115      	bne.n	800b108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	4918      	ldr	r1, [pc, #96]	; (800b144 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fc:	43da      	mvns	r2, r3
 800b0fe:	4b12      	ldr	r3, [pc, #72]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4013      	ands	r3, r2
 800b104:	4a10      	ldr	r2, [pc, #64]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b106:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	2201      	movs	r2, #1
 800b10e:	409a      	lsls	r2, r3
 800b110:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4313      	orrs	r3, r2
 800b116:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a07      	ldr	r2, [pc, #28]	; (800b144 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b128:	441a      	add	r2, r3
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe f8f9 	bl	8009328 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b136:	bf00      	nop
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	2000021c 	.word	0x2000021c
 800b144:	20000220 	.word	0x20000220
 800b148:	20000324 	.word	0x20000324

0800b14c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b14c:	b480      	push	{r7}
 800b14e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b150:	4b07      	ldr	r3, [pc, #28]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b15e:	3201      	adds	r2, #1
 800b160:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b162:	4b03      	ldr	r3, [pc, #12]	; (800b170 <pvTaskIncrementMutexHeldCount+0x24>)
 800b164:	681b      	ldr	r3, [r3, #0]
	}
 800b166:	4618      	mov	r0, r3
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	2000021c 	.word	0x2000021c

0800b174 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b17e:	4b29      	ldr	r3, [pc, #164]	; (800b224 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b184:	4b28      	ldr	r3, [pc, #160]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3304      	adds	r3, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe f929 	bl	80093e2 <uxListRemove>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b196:	4b24      	ldr	r3, [pc, #144]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19c:	2201      	movs	r2, #1
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	43da      	mvns	r2, r3
 800b1a4:	4b21      	ldr	r3, [pc, #132]	; (800b22c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	4a20      	ldr	r2, [pc, #128]	; (800b22c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b4:	d10a      	bne.n	800b1cc <prvAddCurrentTaskToDelayedList+0x58>
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d007      	beq.n	800b1cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	481a      	ldr	r0, [pc, #104]	; (800b230 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b1c6:	f7fe f8af 	bl	8009328 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1ca:	e026      	b.n	800b21a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1d4:	4b14      	ldr	r3, [pc, #80]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d209      	bcs.n	800b1f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1e4:	4b13      	ldr	r3, [pc, #76]	; (800b234 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	f7fe f8bd 	bl	8009370 <vListInsert>
}
 800b1f6:	e010      	b.n	800b21a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1f8:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3304      	adds	r3, #4
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f7fe f8b3 	bl	8009370 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b20a:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	d202      	bcs.n	800b21a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b214:	4a09      	ldr	r2, [pc, #36]	; (800b23c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	6013      	str	r3, [r2, #0]
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000320 	.word	0x20000320
 800b228:	2000021c 	.word	0x2000021c
 800b22c:	20000324 	.word	0x20000324
 800b230:	20000308 	.word	0x20000308
 800b234:	200002d8 	.word	0x200002d8
 800b238:	200002d4 	.word	0x200002d4
 800b23c:	2000033c 	.word	0x2000033c

0800b240 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3b04      	subs	r3, #4
 800b250:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b04      	subs	r3, #4
 800b25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f023 0201 	bic.w	r2, r3, #1
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b270:	4a0c      	ldr	r2, [pc, #48]	; (800b2a4 <pxPortInitialiseStack+0x64>)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3b14      	subs	r3, #20
 800b27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3b04      	subs	r3, #4
 800b286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f06f 0202 	mvn.w	r2, #2
 800b28e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3b20      	subs	r3, #32
 800b294:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b296:	68fb      	ldr	r3, [r7, #12]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	0800b2a9 	.word	0x0800b2a9

0800b2a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2b2:	4b11      	ldr	r3, [pc, #68]	; (800b2f8 <prvTaskExitError+0x50>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ba:	d009      	beq.n	800b2d0 <prvTaskExitError+0x28>
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e7fe      	b.n	800b2ce <prvTaskExitError+0x26>
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2e2:	bf00      	nop
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0fc      	beq.n	800b2e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2ea:	bf00      	nop
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	20000008 	.word	0x20000008
 800b2fc:	00000000 	.word	0x00000000

0800b300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <pxCurrentTCBConst2>)
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	6808      	ldr	r0, [r1, #0]
 800b306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	f380 8809 	msr	PSP, r0
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	f380 8811 	msr	BASEPRI, r0
 800b31a:	4770      	bx	lr
 800b31c:	f3af 8000 	nop.w

0800b320 <pxCurrentTCBConst2>:
 800b320:	2000021c 	.word	0x2000021c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop

0800b328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b328:	4808      	ldr	r0, [pc, #32]	; (800b34c <prvPortStartFirstTask+0x24>)
 800b32a:	6800      	ldr	r0, [r0, #0]
 800b32c:	6800      	ldr	r0, [r0, #0]
 800b32e:	f380 8808 	msr	MSP, r0
 800b332:	f04f 0000 	mov.w	r0, #0
 800b336:	f380 8814 	msr	CONTROL, r0
 800b33a:	b662      	cpsie	i
 800b33c:	b661      	cpsie	f
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	df00      	svc	0
 800b348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b34a:	bf00      	nop
 800b34c:	e000ed08 	.word	0xe000ed08

0800b350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b356:	4b44      	ldr	r3, [pc, #272]	; (800b468 <xPortStartScheduler+0x118>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a44      	ldr	r2, [pc, #272]	; (800b46c <xPortStartScheduler+0x11c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d109      	bne.n	800b374 <xPortStartScheduler+0x24>
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
 800b372:	e7fe      	b.n	800b372 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b374:	4b3c      	ldr	r3, [pc, #240]	; (800b468 <xPortStartScheduler+0x118>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a3d      	ldr	r2, [pc, #244]	; (800b470 <xPortStartScheduler+0x120>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d109      	bne.n	800b392 <xPortStartScheduler+0x42>
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	e7fe      	b.n	800b390 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b392:	4b38      	ldr	r3, [pc, #224]	; (800b474 <xPortStartScheduler+0x124>)
 800b394:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	22ff      	movs	r2, #255	; 0xff
 800b3a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	4b30      	ldr	r3, [pc, #192]	; (800b478 <xPortStartScheduler+0x128>)
 800b3b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3ba:	4b30      	ldr	r3, [pc, #192]	; (800b47c <xPortStartScheduler+0x12c>)
 800b3bc:	2207      	movs	r2, #7
 800b3be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3c0:	e009      	b.n	800b3d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <xPortStartScheduler+0x12c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	4a2c      	ldr	r2, [pc, #176]	; (800b47c <xPortStartScheduler+0x12c>)
 800b3ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3d6:	78fb      	ldrb	r3, [r7, #3]
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3de:	2b80      	cmp	r3, #128	; 0x80
 800b3e0:	d0ef      	beq.n	800b3c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3e2:	4b26      	ldr	r3, [pc, #152]	; (800b47c <xPortStartScheduler+0x12c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f1c3 0307 	rsb	r3, r3, #7
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d009      	beq.n	800b402 <xPortStartScheduler+0xb2>
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	60bb      	str	r3, [r7, #8]
 800b400:	e7fe      	b.n	800b400 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b402:	4b1e      	ldr	r3, [pc, #120]	; (800b47c <xPortStartScheduler+0x12c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <xPortStartScheduler+0x12c>)
 800b40a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b40c:	4b1b      	ldr	r3, [pc, #108]	; (800b47c <xPortStartScheduler+0x12c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b414:	4a19      	ldr	r2, [pc, #100]	; (800b47c <xPortStartScheduler+0x12c>)
 800b416:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b420:	4b17      	ldr	r3, [pc, #92]	; (800b480 <xPortStartScheduler+0x130>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a16      	ldr	r2, [pc, #88]	; (800b480 <xPortStartScheduler+0x130>)
 800b426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b42a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b42c:	4b14      	ldr	r3, [pc, #80]	; (800b480 <xPortStartScheduler+0x130>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a13      	ldr	r2, [pc, #76]	; (800b480 <xPortStartScheduler+0x130>)
 800b432:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b436:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b438:	f000 f8d6 	bl	800b5e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b43c:	4b11      	ldr	r3, [pc, #68]	; (800b484 <xPortStartScheduler+0x134>)
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b442:	f000 f8f5 	bl	800b630 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b446:	4b10      	ldr	r3, [pc, #64]	; (800b488 <xPortStartScheduler+0x138>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a0f      	ldr	r2, [pc, #60]	; (800b488 <xPortStartScheduler+0x138>)
 800b44c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b450:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b452:	f7ff ff69 	bl	800b328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b456:	f7ff fa79 	bl	800a94c <vTaskSwitchContext>
	prvTaskExitError();
 800b45a:	f7ff ff25 	bl	800b2a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	e000ed00 	.word	0xe000ed00
 800b46c:	410fc271 	.word	0x410fc271
 800b470:	410fc270 	.word	0x410fc270
 800b474:	e000e400 	.word	0xe000e400
 800b478:	20000348 	.word	0x20000348
 800b47c:	2000034c 	.word	0x2000034c
 800b480:	e000ed20 	.word	0xe000ed20
 800b484:	20000008 	.word	0x20000008
 800b488:	e000ef34 	.word	0xe000ef34

0800b48c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4a4:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <vPortEnterCritical+0x54>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	4a0d      	ldr	r2, [pc, #52]	; (800b4e0 <vPortEnterCritical+0x54>)
 800b4ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4ae:	4b0c      	ldr	r3, [pc, #48]	; (800b4e0 <vPortEnterCritical+0x54>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d10e      	bne.n	800b4d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4b6:	4b0b      	ldr	r3, [pc, #44]	; (800b4e4 <vPortEnterCritical+0x58>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <vPortEnterCritical+0x48>
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	603b      	str	r3, [r7, #0]
 800b4d2:	e7fe      	b.n	800b4d2 <vPortEnterCritical+0x46>
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	20000008 	.word	0x20000008
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ee:	4b11      	ldr	r3, [pc, #68]	; (800b534 <vPortExitCritical+0x4c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <vPortExitCritical+0x22>
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	607b      	str	r3, [r7, #4]
 800b508:	e7fe      	b.n	800b508 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b50a:	4b0a      	ldr	r3, [pc, #40]	; (800b534 <vPortExitCritical+0x4c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3b01      	subs	r3, #1
 800b510:	4a08      	ldr	r2, [pc, #32]	; (800b534 <vPortExitCritical+0x4c>)
 800b512:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b514:	4b07      	ldr	r3, [pc, #28]	; (800b534 <vPortExitCritical+0x4c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d104      	bne.n	800b526 <vPortExitCritical+0x3e>
 800b51c:	2300      	movs	r3, #0
 800b51e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000008 	.word	0x20000008
	...

0800b540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f7ff f9ec 	bl	800a94c <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	2000021c 	.word	0x2000021c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5c0:	f7ff f908 	bl	800a7d4 <xTaskIncrementTick>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <xPortSysTickHandler+0x3c>)
 800b5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	e000ed04 	.word	0xe000ed04

0800b5e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	; (800b61c <vPortSetupTimerInterrupt+0x34>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	; (800b620 <vPortSetupTimerInterrupt+0x38>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <vPortSetupTimerInterrupt+0x3c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a0a      	ldr	r2, [pc, #40]	; (800b628 <vPortSetupTimerInterrupt+0x40>)
 800b5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b602:	099b      	lsrs	r3, r3, #6
 800b604:	4a09      	ldr	r2, [pc, #36]	; (800b62c <vPortSetupTimerInterrupt+0x44>)
 800b606:	3b01      	subs	r3, #1
 800b608:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b60a:	4b04      	ldr	r3, [pc, #16]	; (800b61c <vPortSetupTimerInterrupt+0x34>)
 800b60c:	2207      	movs	r2, #7
 800b60e:	601a      	str	r2, [r3, #0]
}
 800b610:	bf00      	nop
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	e000e010 	.word	0xe000e010
 800b620:	e000e018 	.word	0xe000e018
 800b624:	20000020 	.word	0x20000020
 800b628:	10624dd3 	.word	0x10624dd3
 800b62c:	e000e014 	.word	0xe000e014

0800b630 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b630:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b640 <vPortEnableVFP+0x10>
 800b634:	6801      	ldr	r1, [r0, #0]
 800b636:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b63a:	6001      	str	r1, [r0, #0]
 800b63c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b63e:	bf00      	nop
 800b640:	e000ed88 	.word	0xe000ed88

0800b644 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b64a:	f3ef 8305 	mrs	r3, IPSR
 800b64e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d913      	bls.n	800b67e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b656:	4a16      	ldr	r2, [pc, #88]	; (800b6b0 <vPortValidateInterruptPriority+0x6c>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b660:	4b14      	ldr	r3, [pc, #80]	; (800b6b4 <vPortValidateInterruptPriority+0x70>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	7afa      	ldrb	r2, [r7, #11]
 800b666:	429a      	cmp	r2, r3
 800b668:	d209      	bcs.n	800b67e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	607b      	str	r3, [r7, #4]
 800b67c:	e7fe      	b.n	800b67c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b67e:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <vPortValidateInterruptPriority+0x74>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <vPortValidateInterruptPriority+0x78>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d909      	bls.n	800b6a2 <vPortValidateInterruptPriority+0x5e>
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	e7fe      	b.n	800b6a0 <vPortValidateInterruptPriority+0x5c>
	}
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	e000e3f0 	.word	0xe000e3f0
 800b6b4:	20000348 	.word	0x20000348
 800b6b8:	e000ed0c 	.word	0xe000ed0c
 800b6bc:	2000034c 	.word	0x2000034c

0800b6c0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800b6c8:	f7fe ffda 	bl	800a680 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f003 f923 	bl	800e918 <malloc>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6d6:	f7fe ffe1 	bl	800a69c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800b6da:	68fb      	ldr	r3, [r7, #12]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	if( pv )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d006      	beq.n	800b700 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800b6f2:	f7fe ffc5 	bl	800a680 <vTaskSuspendAll>
		{
			free( pv );
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f003 f916 	bl	800e928 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800b6fc:	f7fe ffce 	bl	800a69c <xTaskResumeAll>
	}
}
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	460a      	mov	r2, r1
 800b712:	71fb      	strb	r3, [r7, #7]
 800b714:	4613      	mov	r3, r2
 800b716:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	b25a      	sxtb	r2, r3
 800b71e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b722:	4313      	orrs	r3, r2
 800b724:	b25b      	sxtb	r3, r3
 800b726:	b2db      	uxtb	r3, r3
 800b728:	4619      	mov	r1, r3
 800b72a:	2001      	movs	r0, #1
 800b72c:	f000 f832 	bl	800b794 <writeByteToReg>
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b746:	2200      	movs	r2, #0
 800b748:	2110      	movs	r1, #16
 800b74a:	4809      	ldr	r0, [pc, #36]	; (800b770 <writeCMD+0x38>)
 800b74c:	f7f6 fb14 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b750:	f107 010c 	add.w	r1, r7, #12
 800b754:	2332      	movs	r3, #50	; 0x32
 800b756:	2201      	movs	r2, #1
 800b758:	4806      	ldr	r0, [pc, #24]	; (800b774 <writeCMD+0x3c>)
 800b75a:	f7f9 fb7d 	bl	8004e58 <HAL_SPI_Transmit>
	CS_1();
 800b75e:	2201      	movs	r2, #1
 800b760:	2110      	movs	r1, #16
 800b762:	4803      	ldr	r0, [pc, #12]	; (800b770 <writeCMD+0x38>)
 800b764:	f7f6 fb08 	bl	8001d78 <HAL_GPIO_WritePin>
}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	40020000 	.word	0x40020000
 800b774:	20014da0 	.word	0x20014da0

0800b778 <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	4619      	mov	r1, r3
 800b786:	2003      	movs	r0, #3
 800b788:	f000 f804 	bl	800b794 <writeByteToReg>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	460a      	mov	r2, r1
 800b79e:	71fb      	strb	r3, [r7, #7]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b7b2:	79bb      	ldrb	r3, [r7, #6]
 800b7b4:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2110      	movs	r1, #16
 800b7ba:	4809      	ldr	r0, [pc, #36]	; (800b7e0 <writeByteToReg+0x4c>)
 800b7bc:	f7f6 fadc 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b7c0:	f107 010c 	add.w	r1, r7, #12
 800b7c4:	2364      	movs	r3, #100	; 0x64
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	4806      	ldr	r0, [pc, #24]	; (800b7e4 <writeByteToReg+0x50>)
 800b7ca:	f7f9 fb45 	bl	8004e58 <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	2110      	movs	r1, #16
 800b7d2:	4803      	ldr	r0, [pc, #12]	; (800b7e0 <writeByteToReg+0x4c>)
 800b7d4:	f7f6 fad0 	bl	8001d78 <HAL_GPIO_WritePin>

}
 800b7d8:	bf00      	nop
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	40020000 	.word	0x40020000
 800b7e4:	20014da0 	.word	0x20014da0

0800b7e8 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	2002      	movs	r0, #2
 800b7f8:	f7ff ffcc 	bl	800b794 <writeByteToReg>
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	e009      	b.n	800b824 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b810:	2108      	movs	r1, #8
 800b812:	4809      	ldr	r0, [pc, #36]	; (800b838 <waitDRDY+0x34>)
 800b814:	f7f6 fa98 	bl	8001d48 <HAL_GPIO_ReadPin>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d007      	beq.n	800b82e <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3301      	adds	r3, #1
 800b822:	607b      	str	r3, [r7, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a05      	ldr	r2, [pc, #20]	; (800b83c <waitDRDY+0x38>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d9f1      	bls.n	800b810 <waitDRDY+0xc>
				break;
			}
		}
}
 800b82c:	e000      	b.n	800b830 <waitDRDY+0x2c>
				break;
 800b82e:	bf00      	nop
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	40020000 	.word	0x40020000
 800b83c:	026259ff 	.word	0x026259ff

0800b840 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
	waitDRDY();
 800b846:	f7ff ffdd 	bl	800b804 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b84a:	2000      	movs	r0, #0
 800b84c:	f000 f820 	bl	800b890 <readByteFromReg>
 800b850:	4603      	mov	r3, r0
 800b852:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	091b      	lsrs	r3, r3, #4
 800b85a:	b2db      	uxtb	r3, r3
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b86a:	23ff      	movs	r3, #255	; 0xff
 800b86c:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b872:	1dba      	adds	r2, r7, #6
 800b874:	1df9      	adds	r1, r7, #7
 800b876:	2332      	movs	r3, #50	; 0x32
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	2301      	movs	r3, #1
 800b87c:	4803      	ldr	r0, [pc, #12]	; (800b88c <receive8bit+0x28>)
 800b87e:	f7f9 fc1f 	bl	80050c0 <HAL_SPI_TransmitReceive>
	return read;
 800b882:	79bb      	ldrb	r3, [r7, #6]



}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20014da0 	.word	0x20014da0

0800b890 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	f043 0310 	orr.w	r3, r3, #16
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2110      	movs	r1, #16
 800b8ac:	480d      	ldr	r0, [pc, #52]	; (800b8e4 <readByteFromReg+0x54>)
 800b8ae:	f7f6 fa63 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b8b2:	f107 010c 	add.w	r1, r7, #12
 800b8b6:	2332      	movs	r3, #50	; 0x32
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	480b      	ldr	r0, [pc, #44]	; (800b8e8 <readByteFromReg+0x58>)
 800b8bc:	f7f9 facc 	bl	8004e58 <HAL_SPI_Transmit>
	delay_us(10);
 800b8c0:	200a      	movs	r0, #10
 800b8c2:	f000 f969 	bl	800bb98 <delay_us>
	uint8_t read = receive8bit();
 800b8c6:	f7ff ffcd 	bl	800b864 <receive8bit>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	2110      	movs	r1, #16
 800b8d2:	4804      	ldr	r0, [pc, #16]	; (800b8e4 <readByteFromReg+0x54>)
 800b8d4:	f7f6 fa50 	bl	8001d78 <HAL_GPIO_WritePin>

	return read;
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	40020000 	.word	0x40020000
 800b8e8:	20014da0 	.word	0x20014da0

0800b8ec <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b8f6:	2350      	movs	r3, #80	; 0x50
 800b8f8:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	f043 0304 	orr.w	r3, r3, #4
 800b904:	b25b      	sxtb	r3, r3
 800b906:	b2db      	uxtb	r3, r3
 800b908:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b90a:	2200      	movs	r2, #0
 800b90c:	2110      	movs	r1, #16
 800b90e:	4809      	ldr	r0, [pc, #36]	; (800b934 <setBuffer+0x48>)
 800b910:	f7f6 fa32 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b914:	1d39      	adds	r1, r7, #4
 800b916:	2332      	movs	r3, #50	; 0x32
 800b918:	2202      	movs	r2, #2
 800b91a:	4807      	ldr	r0, [pc, #28]	; (800b938 <setBuffer+0x4c>)
 800b91c:	f7f9 fa9c 	bl	8004e58 <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b920:	2201      	movs	r2, #1
 800b922:	2110      	movs	r1, #16
 800b924:	4803      	ldr	r0, [pc, #12]	; (800b934 <setBuffer+0x48>)
 800b926:	f7f6 fa27 	bl	8001d78 <HAL_GPIO_WritePin>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	40020000 	.word	0x40020000
 800b938:	20014da0 	.word	0x20014da0

0800b93c <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	b099      	sub	sp, #100	; 0x64
 800b942:	af0e      	add	r7, sp, #56	; 0x38
 800b944:	61f8      	str	r0, [r7, #28]
 800b946:	61b9      	str	r1, [r7, #24]
	if(USARTBLE.sendflag ==1)
 800b948:	4b3a      	ldr	r3, [pc, #232]	; (800ba34 <BLE_USART+0xf8>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d06b      	beq.n	800ba28 <BLE_USART+0xec>
	{
		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b950:	4839      	ldr	r0, [pc, #228]	; (800ba38 <BLE_USART+0xfc>)
 800b952:	f7f4 fc9d 	bl	8000290 <strlen>
 800b956:	4603      	mov	r3, r0
 800b958:	2b80      	cmp	r3, #128	; 0x80
 800b95a:	d804      	bhi.n	800b966 <BLE_USART+0x2a>
 800b95c:	4836      	ldr	r0, [pc, #216]	; (800ba38 <BLE_USART+0xfc>)
 800b95e:	f7f4 fc97 	bl	8000290 <strlen>
 800b962:	4603      	mov	r3, r0
 800b964:	e000      	b.n	800b968 <BLE_USART+0x2c>
 800b966:	2380      	movs	r3, #128	; 0x80
 800b968:	4a32      	ldr	r2, [pc, #200]	; (800ba34 <BLE_USART+0xf8>)
 800b96a:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4


		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	4618      	mov	r0, r3
 800b974:	f7f4 fdf8 	bl	8000568 <__aeabi_f2d>
 800b978:	4680      	mov	r8, r0
 800b97a:	4689      	mov	r9, r1
				sendpData->Statistic_max,sendpData->Statistic_min,sendpData->Statistic_var,sendpData->Statistic_rms,
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	681b      	ldr	r3, [r3, #0]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b980:	4618      	mov	r0, r3
 800b982:	f7f4 fdf1 	bl	8000568 <__aeabi_f2d>
 800b986:	4682      	mov	sl, r0
 800b988:	468b      	mov	fp, r1
				sendpData->Statistic_max,sendpData->Statistic_min,sendpData->Statistic_var,sendpData->Statistic_rms,
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	685b      	ldr	r3, [r3, #4]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f4 fdea 	bl	8000568 <__aeabi_f2d>
 800b994:	e9c7 0104 	strd	r0, r1, [r7, #16]
				sendpData->Statistic_max,sendpData->Statistic_min,sendpData->Statistic_var,sendpData->Statistic_rms,
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	689b      	ldr	r3, [r3, #8]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f4 fde3 	bl	8000568 <__aeabi_f2d>
 800b9a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
				sendpData->Statistic_max,sendpData->Statistic_min,sendpData->Statistic_var,sendpData->Statistic_rms,
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	68db      	ldr	r3, [r3, #12]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f4 fddc 	bl	8000568 <__aeabi_f2d>
 800b9b0:	e9c7 0100 	strd	r0, r1, [r7]
				sendpData->Statistic_mean, sendpData->Statistic_crestFactor);
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	691b      	ldr	r3, [r3, #16]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7f4 fdd5 	bl	8000568 <__aeabi_f2d>
 800b9be:	4605      	mov	r5, r0
 800b9c0:	460e      	mov	r6, r1
				sendpData->Statistic_mean, sendpData->Statistic_crestFactor);
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	699b      	ldr	r3, [r3, #24]
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall,
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f4 fdce 	bl	8000568 <__aeabi_f2d>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b9d4:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 800b9d8:	ed97 7b00 	vldr	d7, [r7]
 800b9dc:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9e0:	ed97 7b02 	vldr	d7, [r7, #8]
 800b9e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b9e8:	ed97 7b04 	vldr	d7, [r7, #16]
 800b9ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9f0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800b9f4:	e9cd 8900 	strd	r8, r9, [sp]
 800b9f8:	4a10      	ldr	r2, [pc, #64]	; (800ba3c <BLE_USART+0x100>)
 800b9fa:	2180      	movs	r1, #128	; 0x80
 800b9fc:	480e      	ldr	r0, [pc, #56]	; (800ba38 <BLE_USART+0xfc>)
 800b9fe:	f002 fc5d 	bl	800e2bc <snprintf_>
		USARTBLE.sendTimeout = 100 ;
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <BLE_USART+0xf8>)
 800ba04:	2264      	movs	r2, #100	; 0x64
 800ba06:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 800ba0a:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <BLE_USART+0xf8>)
 800ba0c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	461a      	mov	r2, r3
 800ba14:	4908      	ldr	r1, [pc, #32]	; (800ba38 <BLE_USART+0xfc>)
 800ba16:	69f8      	ldr	r0, [r7, #28]
 800ba18:	f7fa f84e 	bl	8005ab8 <HAL_UART_Transmit_DMA>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <BLE_USART+0xec>
		{
			float a = 1;
 800ba22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ba26:	627b      	str	r3, [r7, #36]	; 0x24
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 800ba28:	bf00      	nop
 800ba2a:	372c      	adds	r7, #44	; 0x2c
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba32:	bf00      	nop
 800ba34:	2000cba0 	.word	0x2000cba0
 800ba38:	2000cc40 	.word	0x2000cc40
 800ba3c:	08010720 	.word	0x08010720

0800ba40 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 800ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 800ba4a:	f04f 0300 	mov.w	r3, #0
 800ba4e:	617b      	str	r3, [r7, #20]
	float ans = 0;
 800ba50:	f04f 0300 	mov.w	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<n; i++)
 800ba56:	2300      	movs	r3, #0
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	e016      	b.n	800ba8a <Calculate_FreqOverAll+0x4a>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	ed93 7a00 	vldr	s14, [r3]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	4413      	add	r3, r2
 800ba70:	edd3 7a00 	vldr	s15, [r3]
 800ba74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba78:	ed97 7a05 	vldr	s14, [r7, #20]
 800ba7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba80:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i<n; i++)
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	3301      	adds	r3, #1
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	dbe4      	blt.n	800ba5c <Calculate_FreqOverAll+0x1c>
	}

	ans = sqrt(ParsevalFftPower)/n;
 800ba92:	6978      	ldr	r0, [r7, #20]
 800ba94:	f7f4 fd68 	bl	8000568 <__aeabi_f2d>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	ec44 3b10 	vmov	d0, r3, r4
 800baa0:	f004 fcc0 	bl	8010424 <sqrt>
 800baa4:	ec56 5b10 	vmov	r5, r6, d0
 800baa8:	6838      	ldr	r0, [r7, #0]
 800baaa:	f7f4 fd4b 	bl	8000544 <__aeabi_i2d>
 800baae:	4603      	mov	r3, r0
 800bab0:	460c      	mov	r4, r1
 800bab2:	461a      	mov	r2, r3
 800bab4:	4623      	mov	r3, r4
 800bab6:	4628      	mov	r0, r5
 800bab8:	4631      	mov	r1, r6
 800baba:	f7f4 fed7 	bl	800086c <__aeabi_ddiv>
 800babe:	4603      	mov	r3, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	4618      	mov	r0, r3
 800bac4:	4621      	mov	r1, r4
 800bac6:	f7f5 f89f 	bl	8000c08 <__aeabi_d2f>
 800baca:	4603      	mov	r3, r0
 800bacc:	60fb      	str	r3, [r7, #12]
	return ans;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	ee07 3a90 	vmov	s15, r3
}
 800bad4:	eeb0 0a67 	vmov.f32	s0, s15
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bae0 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	4603      	mov	r3, r0
 800bae8:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800baea:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <delay_init+0x44>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a0d      	ldr	r2, [pc, #52]	; (800bb24 <delay_init+0x44>)
 800baf0:	f023 0304 	bic.w	r3, r3, #4
 800baf4:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	08db      	lsrs	r3, r3, #3
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <delay_init+0x48>)
 800bafe:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800bb00:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <delay_init+0x48>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	461a      	mov	r2, r3
 800bb08:	0152      	lsls	r2, r2, #5
 800bb0a:	1ad2      	subs	r2, r2, r3
 800bb0c:	0092      	lsls	r2, r2, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <delay_init+0x4c>)
 800bb16:	801a      	strh	r2, [r3, #0]
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	e000e010 	.word	0xe000e010
 800bb28:	20000350 	.word	0x20000350
 800bb2c:	20000352 	.word	0x20000352

0800bb30 <delay_ms>:

void delay_ms(uint16_t nms)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	4a14      	ldr	r2, [pc, #80]	; (800bb90 <delay_ms+0x60>)
 800bb3e:	8812      	ldrh	r2, [r2, #0]
 800bb40:	4611      	mov	r1, r2
 800bb42:	4a14      	ldr	r2, [pc, #80]	; (800bb94 <delay_ms+0x64>)
 800bb44:	fb01 f303 	mul.w	r3, r1, r3
 800bb48:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800bb4a:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <delay_ms+0x64>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800bb50:	4b10      	ldr	r3, [pc, #64]	; (800bb94 <delay_ms+0x64>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a0f      	ldr	r2, [pc, #60]	; (800bb94 <delay_ms+0x64>)
 800bb56:	f043 0301 	orr.w	r3, r3, #1
 800bb5a:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800bb5c:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <delay_ms+0x64>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <delay_ms+0x46>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0f2      	beq.n	800bb5c <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800bb76:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <delay_ms+0x64>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <delay_ms+0x64>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	609a      	str	r2, [r3, #8]
}
 800bb82:	bf00      	nop
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20000352 	.word	0x20000352
 800bb94:	e000e010 	.word	0xe000e010

0800bb98 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800bba0:	4b14      	ldr	r3, [pc, #80]	; (800bbf4 <delay_us+0x5c>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4619      	mov	r1, r3
 800bba6:	4a14      	ldr	r2, [pc, #80]	; (800bbf8 <delay_us+0x60>)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	fb03 f301 	mul.w	r3, r3, r1
 800bbae:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800bbb0:	4b11      	ldr	r3, [pc, #68]	; (800bbf8 <delay_us+0x60>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800bbb6:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <delay_us+0x60>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a0f      	ldr	r2, [pc, #60]	; (800bbf8 <delay_us+0x60>)
 800bbbc:	f043 0301 	orr.w	r3, r3, #1
 800bbc0:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	; (800bbf8 <delay_us+0x60>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d004      	beq.n	800bbdc <delay_us+0x44>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0f2      	beq.n	800bbc2 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800bbdc:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <delay_us+0x60>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <delay_us+0x60>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	609a      	str	r2, [r3, #8]
}
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	20000350 	.word	0x20000350
 800bbf8:	e000e010 	.word	0xe000e010

0800bbfc <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800bc00:	4b03      	ldr	r3, [pc, #12]	; (800bc10 <TM_Delay_Init+0x14>)
 800bc02:	221e      	movs	r2, #30
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	200047e0 	.word	0x200047e0

0800bc14 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <TM_DelayMicros+0x30>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	fb02 f303 	mul.w	r3, r2, r3
 800bc26:	3b0a      	subs	r3, #10
 800bc28:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800bc2a:	bf00      	nop
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1e5a      	subs	r2, r3, #1
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1fa      	bne.n	800bc2c <TM_DelayMicros+0x18>
}
 800bc36:	bf00      	nop
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	200047e0 	.word	0x200047e0

0800bc48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4a07      	ldr	r2, [pc, #28]	; (800bc74 <vApplicationGetIdleTaskMemory+0x2c>)
 800bc58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	4a06      	ldr	r2, [pc, #24]	; (800bc78 <vApplicationGetIdleTaskMemory+0x30>)
 800bc5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	22c8      	movs	r2, #200	; 0xc8
 800bc64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800bc66:	bf00      	nop
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20000354 	.word	0x20000354
 800bc78:	200003a8 	.word	0x200003a8

0800bc7c <readIICEEPROM_2402C>:
 * IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800bc82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc86:	9302      	str	r3, [sp, #8]
 800bc88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <readIICEEPROM_2402C+0x28>)
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	2310      	movs	r3, #16
 800bc94:	2200      	movs	r2, #0
 800bc96:	21a1      	movs	r1, #161	; 0xa1
 800bc98:	4803      	ldr	r0, [pc, #12]	; (800bca8 <readIICEEPROM_2402C+0x2c>)
 800bc9a:	f7f6 fb09 	bl	80022b0 <HAL_I2C_Mem_Read>
}
 800bc9e:	bf00      	nop
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	20004a18 	.word	0x20004a18
 800bca8:	200049c4 	.word	0x200049c4

0800bcac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bcac:	b5b0      	push	{r4, r5, r7, lr}
 800bcae:	b0a6      	sub	sp, #152	; 0x98
 800bcb0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bcb2:	f7f5 f979 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bcb6:	f000 f927 	bl	800bf08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bcba:	f000 fa99 	bl	800c1f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800bcbe:	f000 fa51 	bl	800c164 <MX_DMA_Init>
  MX_SPI1_Init();
 800bcc2:	f000 f9ef 	bl	800c0a4 <MX_SPI1_Init>
  MX_I2C1_Init();
 800bcc6:	f000 f989 	bl	800bfdc <MX_I2C1_Init>
  MX_I2C2_Init();
 800bcca:	f000 f9bd 	bl	800c048 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 800bcce:	f000 fa1f 	bl	800c110 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  statisticDataSet = rawData;
 800bcd2:	4b76      	ldr	r3, [pc, #472]	; (800beac <main+0x200>)
 800bcd4:	4a76      	ldr	r2, [pc, #472]	; (800beb0 <main+0x204>)
 800bcd6:	601a      	str	r2, [r3, #0]
  dataLength = sizeof(dataRecive)/sizeof(float);
 800bcd8:	4b76      	ldr	r3, [pc, #472]	; (800beb4 <main+0x208>)
 800bcda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bcde:	601a      	str	r2, [r3, #0]

  //Initialize ADS1256 data buffer size
  ADS1256.data_index = 0;
 800bce0:	4b75      	ldr	r3, [pc, #468]	; (800beb8 <main+0x20c>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
  ADS1256.data_length = dataLength;
 800bce6:	4b73      	ldr	r3, [pc, #460]	; (800beb4 <main+0x208>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a73      	ldr	r2, [pc, #460]	; (800beb8 <main+0x20c>)
 800bcec:	6053      	str	r3, [r2, #4]

  //Initialize Frequency range to collection to feature
  //F2B.f = 1.4567;

  //Initialize delay systick
  delay_init(122);
 800bcee:	207a      	movs	r0, #122	; 0x7a
 800bcf0:	f7ff fef6 	bl	800bae0 <delay_init>
  TM_Delay_Init();
 800bcf4:	f7ff ff82 	bl	800bbfc <TM_Delay_Init>

  readIICEEPROM_2402C();
 800bcf8:	f7ff ffc0 	bl	800bc7c <readIICEEPROM_2402C>
  //Reset ADS1256
  writeCMD(CMD_RESET);
 800bcfc:	20fe      	movs	r0, #254	; 0xfe
 800bcfe:	f7ff fd1b 	bl	800b738 <writeCMD>
  delay_ms(10);
 800bd02:	200a      	movs	r0, #10
 800bd04:	f7ff ff14 	bl	800bb30 <delay_ms>
  TM_DelayMicros(1);
 800bd08:	2001      	movs	r0, #1
 800bd0a:	f7ff ff83 	bl	800bc14 <TM_DelayMicros>

  //Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
  setBuffer();
 800bd0e:	f7ff fded 	bl	800b8ec <setBuffer>
  setPGA(PGA_GAIN1);
 800bd12:	2000      	movs	r0, #0
 800bd14:	f7ff fd68 	bl	800b7e8 <setPGA>
  setDataRate(DRATE_15000);
 800bd18:	20e0      	movs	r0, #224	; 0xe0
 800bd1a:	f7ff fd2d 	bl	800b778 <setDataRate>

  //Read chip id
  id = readChipID();
 800bd1e:	f7ff fd8f 	bl	800b840 <readChipID>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b65      	ldr	r3, [pc, #404]	; (800bebc <main+0x210>)
 800bd28:	701a      	strb	r2, [r3, #0]

  delay_ms(500);// wait for initialization
 800bd2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bd2e:	f7ff feff 	bl	800bb30 <delay_ms>

  uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800bd32:	4b63      	ldr	r3, [pc, #396]	; (800bec0 <main+0x214>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800bd3a:	4b62      	ldr	r3, [pc, #392]	; (800bec4 <main+0x218>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  // Set differential analog input channel.
  setDIFFChannel(posChannels[0], negChannels[0]);
 800bd42:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800bd46:	f897 2090 	ldrb.w	r2, [r7, #144]	; 0x90
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fcdb 	bl	800b708 <setDIFFChannel>
  delay_us(15);
 800bd52:	200f      	movs	r0, #15
 800bd54:	f7ff ff20 	bl	800bb98 <delay_us>
  writeCMD(CMD_SYNC);    // SYNC command
 800bd58:	20fc      	movs	r0, #252	; 0xfc
 800bd5a:	f7ff fced 	bl	800b738 <writeCMD>
  delay_us(10);
 800bd5e:	200a      	movs	r0, #10
 800bd60:	f7ff ff1a 	bl	800bb98 <delay_us>
  writeCMD(CMD_WAKEUP);  // WAKEUP command
 800bd64:	2000      	movs	r0, #0
 800bd66:	f7ff fce7 	bl	800b738 <writeCMD>
  delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800bd6a:	200f      	movs	r0, #15
 800bd6c:	f7ff ff14 	bl	800bb98 <delay_us>



  // Set continuous mode.
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 0)
 800bd70:	2120      	movs	r1, #32
 800bd72:	4855      	ldr	r0, [pc, #340]	; (800bec8 <main+0x21c>)
 800bd74:	f7f5 ffe8 	bl	8001d48 <HAL_GPIO_ReadPin>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d119      	bne.n	800bdb2 <main+0x106>
  {
	  waitDRDY();
 800bd7e:	f7ff fd41 	bl	800b804 <waitDRDY>
	  CS_0();
 800bd82:	2200      	movs	r2, #0
 800bd84:	2110      	movs	r1, #16
 800bd86:	4851      	ldr	r0, [pc, #324]	; (800becc <main+0x220>)
 800bd88:	f7f5 fff6 	bl	8001d78 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800bd8c:	2332      	movs	r3, #50	; 0x32
 800bd8e:	2201      	movs	r2, #1
 800bd90:	494f      	ldr	r1, [pc, #316]	; (800bed0 <main+0x224>)
 800bd92:	4850      	ldr	r0, [pc, #320]	; (800bed4 <main+0x228>)
 800bd94:	f7f9 f860 	bl	8004e58 <HAL_SPI_Transmit>
	  delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800bd98:	2019      	movs	r0, #25
 800bd9a:	f7ff fec9 	bl	800bb30 <delay_ms>
	  ADS1256.data_startFlag = 1;
 800bd9e:	4b46      	ldr	r3, [pc, #280]	; (800beb8 <main+0x20c>)
 800bda0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800bda4:	3308      	adds	r3, #8
 800bda6:	2201      	movs	r2, #1
 800bda8:	701a      	strb	r2, [r3, #0]
	  delay_us(1);
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7ff fef4 	bl	800bb98 <delay_us>
 800bdb0:	e002      	b.n	800bdb8 <main+0x10c>
  }
  else
  {
	  delay_us(1);
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f7ff fef0 	bl	800bb98 <delay_us>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800bdc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800bdc8:	2101      	movs	r1, #1
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fa23 	bl	8009216 <osSemaphoreCreate>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	4b41      	ldr	r3, [pc, #260]	; (800bed8 <main+0x22c>)
 800bdd4:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800bde2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800bde6:	2101      	movs	r1, #1
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fd fa14 	bl	8009216 <osSemaphoreCreate>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	4b3a      	ldr	r3, [pc, #232]	; (800bedc <main+0x230>)
 800bdf2:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800bdf4:	4b3a      	ldr	r3, [pc, #232]	; (800bee0 <main+0x234>)
 800bdf6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bdfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800be00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be04:	2100      	movs	r1, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f7fd fa38 	bl	800927c <osMessageCreate>
 800be0c:	4602      	mov	r2, r0
 800be0e:	4b35      	ldr	r3, [pc, #212]	; (800bee4 <main+0x238>)
 800be10:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800be12:	4b35      	ldr	r3, [pc, #212]	; (800bee8 <main+0x23c>)
 800be14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800be18:	461d      	mov	r5, r3
 800be1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800be26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800be2a:	2100      	movs	r1, #0
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fd f992 	bl	8009156 <osThreadCreate>
 800be32:	4602      	mov	r2, r0
 800be34:	4b2d      	ldr	r3, [pc, #180]	; (800beec <main+0x240>)
 800be36:	601a      	str	r2, [r3, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 200);
 800be38:	4b2d      	ldr	r3, [pc, #180]	; (800bef0 <main+0x244>)
 800be3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800be3e:	461d      	mov	r5, r3
 800be40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800be4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f7fd f97f 	bl	8009156 <osThreadCreate>
 800be58:	4602      	mov	r2, r0
 800be5a:	4b26      	ldr	r3, [pc, #152]	; (800bef4 <main+0x248>)
 800be5c:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, LED_Thread, osPriorityAboveNormal, 0, 200);
 800be5e:	4b26      	ldr	r3, [pc, #152]	; (800bef8 <main+0x24c>)
 800be60:	f107 041c 	add.w	r4, r7, #28
 800be64:	461d      	mov	r5, r3
 800be66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800be72:	f107 031c 	add.w	r3, r7, #28
 800be76:	2100      	movs	r1, #0
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fd f96c 	bl	8009156 <osThreadCreate>
 800be7e:	4602      	mov	r2, r0
 800be80:	4b1e      	ldr	r3, [pc, #120]	; (800befc <main+0x250>)
 800be82:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, StartTask04, osPriorityRealtime, 0, 200);
 800be84:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <main+0x254>)
 800be86:	463c      	mov	r4, r7
 800be88:	461d      	mov	r5, r3
 800be8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 800be96:	463b      	mov	r3, r7
 800be98:	2100      	movs	r1, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fd f95b 	bl	8009156 <osThreadCreate>
 800bea0:	4602      	mov	r2, r0
 800bea2:	4b18      	ldr	r3, [pc, #96]	; (800bf04 <main+0x258>)
 800bea4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800bea6:	f7fd f94f 	bl	8009148 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800beaa:	e7fe      	b.n	800beaa <main+0x1fe>
 800beac:	20004800 	.word	0x20004800
 800beb0:	20008b98 	.word	0x20008b98
 800beb4:	200006e8 	.word	0x200006e8
 800beb8:	200006fc 	.word	0x200006fc
 800bebc:	200006c8 	.word	0x200006c8
 800bec0:	08010744 	.word	0x08010744
 800bec4:	08010748 	.word	0x08010748
 800bec8:	40020800 	.word	0x40020800
 800becc:	40020000 	.word	0x40020000
 800bed0:	20000010 	.word	0x20000010
 800bed4:	20014da0 	.word	0x20014da0
 800bed8:	20004b1c 	.word	0x20004b1c
 800bedc:	20018ec0 	.word	0x20018ec0
 800bee0:	0801074c 	.word	0x0801074c
 800bee4:	20008b90 	.word	0x20008b90
 800bee8:	08010768 	.word	0x08010768
 800beec:	20004b28 	.word	0x20004b28
 800bef0:	08010790 	.word	0x08010790
 800bef4:	20004b18 	.word	0x20004b18
 800bef8:	080107b8 	.word	0x080107b8
 800befc:	20004b24 	.word	0x20004b24
 800bf00:	080107e0 	.word	0x080107e0
 800bf04:	20008b8c 	.word	0x20008b8c

0800bf08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b094      	sub	sp, #80	; 0x50
 800bf0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bf0e:	f107 0320 	add.w	r3, r7, #32
 800bf12:	2230      	movs	r2, #48	; 0x30
 800bf14:	2100      	movs	r1, #0
 800bf16:	4618      	mov	r0, r3
 800bf18:	f002 fd19 	bl	800e94e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bf1c:	f107 030c 	add.w	r3, r7, #12
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	605a      	str	r2, [r3, #4]
 800bf26:	609a      	str	r2, [r3, #8]
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60bb      	str	r3, [r7, #8]
 800bf30:	4b28      	ldr	r3, [pc, #160]	; (800bfd4 <SystemClock_Config+0xcc>)
 800bf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf34:	4a27      	ldr	r2, [pc, #156]	; (800bfd4 <SystemClock_Config+0xcc>)
 800bf36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf3a:	6413      	str	r3, [r2, #64]	; 0x40
 800bf3c:	4b25      	ldr	r3, [pc, #148]	; (800bfd4 <SystemClock_Config+0xcc>)
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf44:	60bb      	str	r3, [r7, #8]
 800bf46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf48:	2300      	movs	r3, #0
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	4b22      	ldr	r3, [pc, #136]	; (800bfd8 <SystemClock_Config+0xd0>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a21      	ldr	r2, [pc, #132]	; (800bfd8 <SystemClock_Config+0xd0>)
 800bf52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	4b1f      	ldr	r3, [pc, #124]	; (800bfd8 <SystemClock_Config+0xd0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf60:	607b      	str	r3, [r7, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bf64:	2302      	movs	r3, #2
 800bf66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bf6c:	2310      	movs	r3, #16
 800bf6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bf70:	2302      	movs	r3, #2
 800bf72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bf74:	2300      	movs	r3, #0
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800bf78:	2308      	movs	r3, #8
 800bf7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 122;
 800bf7c:	237a      	movs	r3, #122	; 0x7a
 800bf7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bf80:	2302      	movs	r3, #2
 800bf82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800bf84:	2304      	movs	r3, #4
 800bf86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bf88:	f107 0320 	add.w	r3, r7, #32
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f8 faf5 	bl	800457c <HAL_RCC_OscConfig>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800bf98:	f000 fd4f 	bl	800ca3a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bf9c:	230f      	movs	r3, #15
 800bf9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bfa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bfac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bfae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800bfb4:	f107 030c 	add.w	r3, r7, #12
 800bfb8:	2104      	movs	r1, #4
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f8 fd20 	bl	8004a00 <HAL_RCC_ClockConfig>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800bfc6:	f000 fd38 	bl	800ca3a <Error_Handler>
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3750      	adds	r7, #80	; 0x50
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	40023800 	.word	0x40023800
 800bfd8:	40007000 	.word	0x40007000

0800bfdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bfe0:	4b15      	ldr	r3, [pc, #84]	; (800c038 <MX_I2C1_Init+0x5c>)
 800bfe2:	4a16      	ldr	r2, [pc, #88]	; (800c03c <MX_I2C1_Init+0x60>)
 800bfe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <MX_I2C1_Init+0x5c>)
 800bfe8:	4a15      	ldr	r2, [pc, #84]	; (800c040 <MX_I2C1_Init+0x64>)
 800bfea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bfec:	4b12      	ldr	r3, [pc, #72]	; (800c038 <MX_I2C1_Init+0x5c>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 4;
 800bff2:	4b11      	ldr	r3, [pc, #68]	; (800c038 <MX_I2C1_Init+0x5c>)
 800bff4:	2204      	movs	r2, #4
 800bff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <MX_I2C1_Init+0x5c>)
 800bffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c000:	4b0d      	ldr	r3, [pc, #52]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c002:	2200      	movs	r2, #0
 800c004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c006:	4b0c      	ldr	r3, [pc, #48]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c008:	2200      	movs	r2, #0
 800c00a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800c00c:	4b0a      	ldr	r3, [pc, #40]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c00e:	2240      	movs	r2, #64	; 0x40
 800c010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800c012:	4b09      	ldr	r3, [pc, #36]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c014:	2280      	movs	r2, #128	; 0x80
 800c016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c018:	4807      	ldr	r0, [pc, #28]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c01a:	f7f5 fef9 	bl	8001e10 <HAL_I2C_Init>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800c024:	f000 fd09 	bl	800ca3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, I2cbuffer, 2);
 800c028:	2202      	movs	r2, #2
 800c02a:	4906      	ldr	r1, [pc, #24]	; (800c044 <MX_I2C1_Init+0x68>)
 800c02c:	4802      	ldr	r0, [pc, #8]	; (800c038 <MX_I2C1_Init+0x5c>)
 800c02e:	f7f6 f817 	bl	8002060 <HAL_I2C_Slave_Receive_IT>
  /* USER CODE END I2C1_Init 2 */

}
 800c032:	bf00      	nop
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20004970 	.word	0x20004970
 800c03c:	40005400 	.word	0x40005400
 800c040:	000186a0 	.word	0x000186a0
 800c044:	20004808 	.word	0x20004808

0800c048 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c04c:	4b12      	ldr	r3, [pc, #72]	; (800c098 <MX_I2C2_Init+0x50>)
 800c04e:	4a13      	ldr	r2, [pc, #76]	; (800c09c <MX_I2C2_Init+0x54>)
 800c050:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800c052:	4b11      	ldr	r3, [pc, #68]	; (800c098 <MX_I2C2_Init+0x50>)
 800c054:	4a12      	ldr	r2, [pc, #72]	; (800c0a0 <MX_I2C2_Init+0x58>)
 800c056:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c058:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <MX_I2C2_Init+0x50>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 8;
 800c05e:	4b0e      	ldr	r3, [pc, #56]	; (800c098 <MX_I2C2_Init+0x50>)
 800c060:	2208      	movs	r2, #8
 800c062:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c064:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <MX_I2C2_Init+0x50>)
 800c066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c06a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c06c:	4b0a      	ldr	r3, [pc, #40]	; (800c098 <MX_I2C2_Init+0x50>)
 800c06e:	2200      	movs	r2, #0
 800c070:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800c072:	4b09      	ldr	r3, [pc, #36]	; (800c098 <MX_I2C2_Init+0x50>)
 800c074:	2200      	movs	r2, #0
 800c076:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <MX_I2C2_Init+0x50>)
 800c07a:	2240      	movs	r2, #64	; 0x40
 800c07c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c07e:	4b06      	ldr	r3, [pc, #24]	; (800c098 <MX_I2C2_Init+0x50>)
 800c080:	2200      	movs	r2, #0
 800c082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c084:	4804      	ldr	r0, [pc, #16]	; (800c098 <MX_I2C2_Init+0x50>)
 800c086:	f7f5 fec3 	bl	8001e10 <HAL_I2C_Init>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800c090:	f000 fcd3 	bl	800ca3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c094:	bf00      	nop
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200049c4 	.word	0x200049c4
 800c09c:	40005800 	.word	0x40005800
 800c0a0:	000186a0 	.word	0x000186a0

0800c0a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c0a8:	4b17      	ldr	r3, [pc, #92]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0aa:	4a18      	ldr	r2, [pc, #96]	; (800c10c <MX_SPI1_Init+0x68>)
 800c0ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c0ae:	4b16      	ldr	r3, [pc, #88]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c0b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c0bc:	4b12      	ldr	r3, [pc, #72]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0c2:	4b11      	ldr	r3, [pc, #68]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c0ce:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c0d6:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0d8:	2220      	movs	r2, #32
 800c0da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0e8:	4b07      	ldr	r3, [pc, #28]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c0ee:	4b06      	ldr	r3, [pc, #24]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c0f4:	4804      	ldr	r0, [pc, #16]	; (800c108 <MX_SPI1_Init+0x64>)
 800c0f6:	f7f8 fe4b 	bl	8004d90 <HAL_SPI_Init>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c100:	f000 fc9b 	bl	800ca3a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c104:	bf00      	nop
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20014da0 	.word	0x20014da0
 800c10c:	40013000 	.word	0x40013000

0800c110 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800c114:	4b11      	ldr	r3, [pc, #68]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c116:	4a12      	ldr	r2, [pc, #72]	; (800c160 <MX_USART6_UART_Init+0x50>)
 800c118:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800c11a:	4b10      	ldr	r3, [pc, #64]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c11c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c120:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c124:	2200      	movs	r2, #0
 800c126:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c12e:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c130:	2200      	movs	r2, #0
 800c132:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c134:	4b09      	ldr	r3, [pc, #36]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c136:	220c      	movs	r2, #12
 800c138:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c13a:	4b08      	ldr	r3, [pc, #32]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c142:	2200      	movs	r2, #0
 800c144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c146:	4805      	ldr	r0, [pc, #20]	; (800c15c <MX_USART6_UART_Init+0x4c>)
 800c148:	f7f9 fc68 	bl	8005a1c <HAL_UART_Init>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800c152:	f000 fc72 	bl	800ca3a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c156:	bf00      	nop
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20014d60 	.word	0x20014d60
 800c160:	40011400 	.word	0x40011400

0800c164 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c16a:	2300      	movs	r3, #0
 800c16c:	607b      	str	r3, [r7, #4]
 800c16e:	4b1f      	ldr	r3, [pc, #124]	; (800c1ec <MX_DMA_Init+0x88>)
 800c170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c172:	4a1e      	ldr	r2, [pc, #120]	; (800c1ec <MX_DMA_Init+0x88>)
 800c174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c178:	6313      	str	r3, [r2, #48]	; 0x30
 800c17a:	4b1c      	ldr	r3, [pc, #112]	; (800c1ec <MX_DMA_Init+0x88>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c182:	607b      	str	r3, [r7, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c186:	2300      	movs	r3, #0
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	4b18      	ldr	r3, [pc, #96]	; (800c1ec <MX_DMA_Init+0x88>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18e:	4a17      	ldr	r2, [pc, #92]	; (800c1ec <MX_DMA_Init+0x88>)
 800c190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c194:	6313      	str	r3, [r2, #48]	; 0x30
 800c196:	4b15      	ldr	r3, [pc, #84]	; (800c1ec <MX_DMA_Init+0x88>)
 800c198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2105      	movs	r1, #5
 800c1a6:	2011      	movs	r0, #17
 800c1a8:	f7f5 f84b 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800c1ac:	2011      	movs	r0, #17
 800c1ae:	f7f5 f864 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2105      	movs	r1, #5
 800c1b6:	2038      	movs	r0, #56	; 0x38
 800c1b8:	f7f5 f843 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c1bc:	2038      	movs	r0, #56	; 0x38
 800c1be:	f7f5 f85c 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2105      	movs	r1, #5
 800c1c6:	203b      	movs	r0, #59	; 0x3b
 800c1c8:	f7f5 f83b 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c1cc:	203b      	movs	r0, #59	; 0x3b
 800c1ce:	f7f5 f854 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2105      	movs	r1, #5
 800c1d6:	2045      	movs	r0, #69	; 0x45
 800c1d8:	f7f5 f833 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800c1dc:	2045      	movs	r0, #69	; 0x45
 800c1de:	f7f5 f84c 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	40023800 	.word	0x40023800

0800c1f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	; 0x28
 800c1f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1f6:	f107 0314 	add.w	r3, r7, #20
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	605a      	str	r2, [r3, #4]
 800c200:	609a      	str	r2, [r3, #8]
 800c202:	60da      	str	r2, [r3, #12]
 800c204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c206:	2300      	movs	r3, #0
 800c208:	613b      	str	r3, [r7, #16]
 800c20a:	4b41      	ldr	r3, [pc, #260]	; (800c310 <MX_GPIO_Init+0x120>)
 800c20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20e:	4a40      	ldr	r2, [pc, #256]	; (800c310 <MX_GPIO_Init+0x120>)
 800c210:	f043 0301 	orr.w	r3, r3, #1
 800c214:	6313      	str	r3, [r2, #48]	; 0x30
 800c216:	4b3e      	ldr	r3, [pc, #248]	; (800c310 <MX_GPIO_Init+0x120>)
 800c218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	613b      	str	r3, [r7, #16]
 800c220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c222:	2300      	movs	r3, #0
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	4b3a      	ldr	r3, [pc, #232]	; (800c310 <MX_GPIO_Init+0x120>)
 800c228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22a:	4a39      	ldr	r2, [pc, #228]	; (800c310 <MX_GPIO_Init+0x120>)
 800c22c:	f043 0304 	orr.w	r3, r3, #4
 800c230:	6313      	str	r3, [r2, #48]	; 0x30
 800c232:	4b37      	ldr	r3, [pc, #220]	; (800c310 <MX_GPIO_Init+0x120>)
 800c234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c236:	f003 0304 	and.w	r3, r3, #4
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c23e:	2300      	movs	r3, #0
 800c240:	60bb      	str	r3, [r7, #8]
 800c242:	4b33      	ldr	r3, [pc, #204]	; (800c310 <MX_GPIO_Init+0x120>)
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	4a32      	ldr	r2, [pc, #200]	; (800c310 <MX_GPIO_Init+0x120>)
 800c248:	f043 0302 	orr.w	r3, r3, #2
 800c24c:	6313      	str	r3, [r2, #48]	; 0x30
 800c24e:	4b30      	ldr	r3, [pc, #192]	; (800c310 <MX_GPIO_Init+0x120>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	60bb      	str	r3, [r7, #8]
 800c258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c25a:	2300      	movs	r3, #0
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	4b2c      	ldr	r3, [pc, #176]	; (800c310 <MX_GPIO_Init+0x120>)
 800c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c262:	4a2b      	ldr	r2, [pc, #172]	; (800c310 <MX_GPIO_Init+0x120>)
 800c264:	f043 0308 	orr.w	r3, r3, #8
 800c268:	6313      	str	r3, [r2, #48]	; 0x30
 800c26a:	4b29      	ldr	r3, [pc, #164]	; (800c310 <MX_GPIO_Init+0x120>)
 800c26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26e:	f003 0308 	and.w	r3, r3, #8
 800c272:	607b      	str	r3, [r7, #4]
 800c274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c276:	2200      	movs	r2, #0
 800c278:	2110      	movs	r1, #16
 800c27a:	4826      	ldr	r0, [pc, #152]	; (800c314 <MX_GPIO_Init+0x124>)
 800c27c:	f7f5 fd7c 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800c280:	2200      	movs	r2, #0
 800c282:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800c286:	4824      	ldr	r0, [pc, #144]	; (800c318 <MX_GPIO_Init+0x128>)
 800c288:	f7f5 fd76 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c28c:	2308      	movs	r3, #8
 800c28e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c290:	4b22      	ldr	r3, [pc, #136]	; (800c31c <MX_GPIO_Init+0x12c>)
 800c292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c294:	2300      	movs	r3, #0
 800c296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c298:	f107 0314 	add.w	r3, r7, #20
 800c29c:	4619      	mov	r1, r3
 800c29e:	481d      	ldr	r0, [pc, #116]	; (800c314 <MX_GPIO_Init+0x124>)
 800c2a0:	f7f5 fbb8 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2b4:	f107 0314 	add.w	r3, r7, #20
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4816      	ldr	r0, [pc, #88]	; (800c314 <MX_GPIO_Init+0x124>)
 800c2bc:	f7f5 fbaa 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2cc:	f107 0314 	add.w	r3, r7, #20
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4813      	ldr	r0, [pc, #76]	; (800c320 <MX_GPIO_Init+0x130>)
 800c2d4:	f7f5 fb9e 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800c2d8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c2dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2ea:	f107 0314 	add.w	r3, r7, #20
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4809      	ldr	r0, [pc, #36]	; (800c318 <MX_GPIO_Init+0x128>)
 800c2f2:	f7f5 fb8f 	bl	8001a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2105      	movs	r1, #5
 800c2fa:	2009      	movs	r0, #9
 800c2fc:	f7f4 ffa1 	bl	8001242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c300:	2009      	movs	r0, #9
 800c302:	f7f4 ffba 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 800c306:	bf00      	nop
 800c308:	3728      	adds	r7, #40	; 0x28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	40023800 	.word	0x40023800
 800c314:	40020000 	.word	0x40020000
 800c318:	40020c00 	.word	0x40020c00
 800c31c:	10210000 	.word	0x10210000
 800c320:	40020800 	.word	0x40020800

0800c324 <I2C1_EV_IRQHandler>:

/* USER CODE BEGIN 4 */

void I2C1_EV_IRQHandler(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c328:	4839      	ldr	r0, [pc, #228]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c32a:	f7f6 f9e7 	bl	80026fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

    //if(buffer[0] == 0x50 && buffer[1] == 0x30)
    switch(I2cbuffer[0])
 800c32e:	4b39      	ldr	r3, [pc, #228]	; (800c414 <I2C1_EV_IRQHandler+0xf0>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	3b01      	subs	r3, #1
 800c334:	2b07      	cmp	r3, #7
 800c336:	d863      	bhi.n	800c400 <I2C1_EV_IRQHandler+0xdc>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <I2C1_EV_IRQHandler+0x1c>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c361 	.word	0x0800c361
 800c344:	0800c375 	.word	0x0800c375
 800c348:	0800c389 	.word	0x0800c389
 800c34c:	0800c39d 	.word	0x0800c39d
 800c350:	0800c3b1 	.word	0x0800c3b1
 800c354:	0800c3c5 	.word	0x0800c3c5
 800c358:	0800c3d9 	.word	0x0800c3d9
 800c35c:	0800c3ed 	.word	0x0800c3ed
    {
    	case 0x01:
    		F2B.f = statistic_value.Statistic_FreqOvall;
 800c360:	4b2d      	ldr	r3, [pc, #180]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	4a2d      	ldr	r2, [pc, #180]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c366:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c368:	2204      	movs	r2, #4
 800c36a:	492c      	ldr	r1, [pc, #176]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c36c:	4828      	ldr	r0, [pc, #160]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c36e:	f7f5 fee7 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
	    break;
 800c372:	e045      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
    	case 0x02:
			F2B.f = statistic_value.Statistic_max;
 800c374:	4b28      	ldr	r3, [pc, #160]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a28      	ldr	r2, [pc, #160]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c37a:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c37c:	2204      	movs	r2, #4
 800c37e:	4927      	ldr	r1, [pc, #156]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c380:	4823      	ldr	r0, [pc, #140]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c382:	f7f5 fedd 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c386:	e03b      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x03:
			F2B.f = statistic_value.Statistic_min;
 800c388:	4b23      	ldr	r3, [pc, #140]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	4a23      	ldr	r2, [pc, #140]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c38e:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c390:	2204      	movs	r2, #4
 800c392:	4922      	ldr	r1, [pc, #136]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c394:	481e      	ldr	r0, [pc, #120]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c396:	f7f5 fed3 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c39a:	e031      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x04:
			F2B.f = statistic_value.Statistic_var;
 800c39c:	4b1e      	ldr	r3, [pc, #120]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	4a1e      	ldr	r2, [pc, #120]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3a2:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c3a4:	2204      	movs	r2, #4
 800c3a6:	491d      	ldr	r1, [pc, #116]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3a8:	4819      	ldr	r0, [pc, #100]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c3aa:	f7f5 fec9 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c3ae:	e027      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x05:
			F2B.f = statistic_value.Statistic_rms;
 800c3b0:	4b19      	ldr	r3, [pc, #100]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	4a19      	ldr	r2, [pc, #100]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3b6:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	4918      	ldr	r1, [pc, #96]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3bc:	4814      	ldr	r0, [pc, #80]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c3be:	f7f5 febf 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c3c2:	e01d      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x06:
			F2B.f = statistic_value.Statistic_mean;
 800c3c4:	4b14      	ldr	r3, [pc, #80]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	4a14      	ldr	r2, [pc, #80]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3ca:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c3cc:	2204      	movs	r2, #4
 800c3ce:	4913      	ldr	r1, [pc, #76]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3d0:	480f      	ldr	r0, [pc, #60]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c3d2:	f7f5 feb5 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c3d6:	e013      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x07:
			F2B.f = statistic_value.Statistic_std;
 800c3d8:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3de:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	490e      	ldr	r1, [pc, #56]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3e4:	480a      	ldr	r0, [pc, #40]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c3e6:	f7f5 feab 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c3ea:	e009      	b.n	800c400 <I2C1_EV_IRQHandler+0xdc>
     	case 0x08:
			F2B.f = statistic_value.Statistic_FreqPeak[0];
 800c3ec:	4b0a      	ldr	r3, [pc, #40]	; (800c418 <I2C1_EV_IRQHandler+0xf4>)
 800c3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f0:	4a0a      	ldr	r2, [pc, #40]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3f2:	6013      	str	r3, [r2, #0]
			if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, F2B.byte, 4) == HAL_OK)
 800c3f4:	2204      	movs	r2, #4
 800c3f6:	4909      	ldr	r1, [pc, #36]	; (800c41c <I2C1_EV_IRQHandler+0xf8>)
 800c3f8:	4805      	ldr	r0, [pc, #20]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c3fa:	f7f5 fea1 	bl	8002140 <HAL_I2C_Slave_Transmit_DMA>
			{

			}
		break;
 800c3fe:	bf00      	nop
    }
*/



    HAL_I2C_Slave_Receive_IT(&hi2c1, I2cbuffer, 2);
 800c400:	2202      	movs	r2, #2
 800c402:	4904      	ldr	r1, [pc, #16]	; (800c414 <I2C1_EV_IRQHandler+0xf0>)
 800c404:	4802      	ldr	r0, [pc, #8]	; (800c410 <I2C1_EV_IRQHandler+0xec>)
 800c406:	f7f5 fe2b 	bl	8002060 <HAL_I2C_Slave_Receive_IT>
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800c40a:	bf00      	nop
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20004970 	.word	0x20004970
 800c414:	20004808 	.word	0x20004808
 800c418:	20004740 	.word	0x20004740
 800c41c:	20004804 	.word	0x20004804

0800c420 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 800c42a:	88fb      	ldrh	r3, [r7, #6]
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d126      	bne.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>
 800c430:	4b15      	ldr	r3, [pc, #84]	; (800c488 <HAL_GPIO_EXTI_Callback+0x68>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b03      	cmp	r3, #3
 800c436:	d122      	bne.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>
 800c438:	4b14      	ldr	r3, [pc, #80]	; (800c48c <HAL_GPIO_EXTI_Callback+0x6c>)
 800c43a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c43e:	3308      	adds	r3, #8
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d11b      	bne.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <HAL_GPIO_EXTI_Callback+0x70>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d117      	bne.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>


		    /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken);
 800c452:	4b10      	ldr	r3, [pc, #64]	; (800c494 <HAL_GPIO_EXTI_Callback+0x74>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f107 020c 	add.w	r2, r7, #12
 800c45a:	4611      	mov	r1, r2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fd fa1b 	bl	8009898 <xQueueGiveFromISR>

		if(xHigherPriorityTaskWoken == pdTRUE)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d10a      	bne.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>
		{
			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d007      	beq.n	800c47e <HAL_GPIO_EXTI_Callback+0x5e>
 800c46e:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <HAL_GPIO_EXTI_Callback+0x78>)
 800c470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	f3bf 8f6f 	isb	sy
		}

	}
}
 800c47e:	bf00      	nop
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	200006c8 	.word	0x200006c8
 800c48c:	200006fc 	.word	0x200006fc
 800c490:	20014df8 	.word	0x20014df8
 800c494:	20004b1c 	.word	0x20004b1c
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
    
    
    

  /* USER CODE BEGIN 5 */
  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800c4a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c4a8:	60fb      	str	r3, [r7, #12]
  //portBASE_TYPE xStatus;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c4aa:	4b41      	ldr	r3, [pc, #260]	; (800c5b0 <ADC_Thread+0x114>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68f9      	ldr	r1, [r7, #12]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fd fb57 	bl	8009b64 <xQueueSemaphoreTake>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d1f6      	bne.n	800c4aa <ADC_Thread+0xe>
 800c4bc:	4b3d      	ldr	r3, [pc, #244]	; (800c5b4 <ADC_Thread+0x118>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1f2      	bne.n	800c4aa <ADC_Thread+0xe>
			HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	4a3c      	ldr	r2, [pc, #240]	; (800c5b8 <ADC_Thread+0x11c>)
 800c4c8:	493c      	ldr	r1, [pc, #240]	; (800c5bc <ADC_Thread+0x120>)
 800c4ca:	483d      	ldr	r0, [pc, #244]	; (800c5c0 <ADC_Thread+0x124>)
 800c4cc:	f7f8 ff9a 	bl	8005404 <HAL_SPI_TransmitReceive_DMA>

					// construct 24 bit value
			read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 800c4d0:	4b39      	ldr	r3, [pc, #228]	; (800c5b8 <ADC_Thread+0x11c>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	041b      	lsls	r3, r3, #16
 800c4d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4da:	4a3a      	ldr	r2, [pc, #232]	; (800c5c4 <ADC_Thread+0x128>)
 800c4dc:	6013      	str	r3, [r2, #0]
			read |= ((int32_t)Databuffer[1] << 8);
 800c4de:	4b36      	ldr	r3, [pc, #216]	; (800c5b8 <ADC_Thread+0x11c>)
 800c4e0:	785b      	ldrb	r3, [r3, #1]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	4b37      	ldr	r3, [pc, #220]	; (800c5c4 <ADC_Thread+0x128>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	4a36      	ldr	r2, [pc, #216]	; (800c5c4 <ADC_Thread+0x128>)
 800c4ec:	6013      	str	r3, [r2, #0]
			read |= Databuffer[2];
 800c4ee:	4b32      	ldr	r3, [pc, #200]	; (800c5b8 <ADC_Thread+0x11c>)
 800c4f0:	789b      	ldrb	r3, [r3, #2]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4b33      	ldr	r3, [pc, #204]	; (800c5c4 <ADC_Thread+0x128>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	4a32      	ldr	r2, [pc, #200]	; (800c5c4 <ADC_Thread+0x128>)
 800c4fc:	6013      	str	r3, [r2, #0]
			if (read & 0x800000){
 800c4fe:	4b31      	ldr	r3, [pc, #196]	; (800c5c4 <ADC_Thread+0x128>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <ADC_Thread+0x7c>
				read |= 0xFF000000;
 800c50a:	4b2e      	ldr	r3, [pc, #184]	; (800c5c4 <ADC_Thread+0x128>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c512:	461a      	mov	r2, r3
 800c514:	4b2b      	ldr	r3, [pc, #172]	; (800c5c4 <ADC_Thread+0x128>)
 800c516:	601a      	str	r2, [r3, #0]

			}

			data = read;
 800c518:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <ADC_Thread+0x128>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c524:	4b28      	ldr	r3, [pc, #160]	; (800c5c8 <ADC_Thread+0x12c>)
 800c526:	edc3 7a00 	vstr	s15, [r3]
			data = data / 1670000;
 800c52a:	4b27      	ldr	r3, [pc, #156]	; (800c5c8 <ADC_Thread+0x12c>)
 800c52c:	ed93 7a00 	vldr	s14, [r3]
 800c530:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c5cc <ADC_Thread+0x130>
 800c534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c538:	4b23      	ldr	r3, [pc, #140]	; (800c5c8 <ADC_Thread+0x12c>)
 800c53a:	edc3 7a00 	vstr	s15, [r3]
			ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800c53e:	4b24      	ldr	r3, [pc, #144]	; (800c5d0 <ADC_Thread+0x134>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a21      	ldr	r2, [pc, #132]	; (800c5c8 <ADC_Thread+0x12c>)
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	4922      	ldr	r1, [pc, #136]	; (800c5d0 <ADC_Thread+0x134>)
 800c548:	3302      	adds	r3, #2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	440b      	add	r3, r1
 800c54e:	601a      	str	r2, [r3, #0]
			ADS1256.data_index++;
 800c550:	4b1f      	ldr	r3, [pc, #124]	; (800c5d0 <ADC_Thread+0x134>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	4a1e      	ldr	r2, [pc, #120]	; (800c5d0 <ADC_Thread+0x134>)
 800c558:	6013      	str	r3, [r2, #0]
			if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800c55a:	4b1d      	ldr	r3, [pc, #116]	; (800c5d0 <ADC_Thread+0x134>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b1c      	ldr	r3, [pc, #112]	; (800c5d0 <ADC_Thread+0x134>)
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	429a      	cmp	r2, r3
 800c564:	d11f      	bne.n	800c5a6 <ADC_Thread+0x10a>
			{

				/*send data to buffer*/
				BaseType_t xStatus;
				xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800c566:	4b1b      	ldr	r3, [pc, #108]	; (800c5d4 <ADC_Thread+0x138>)
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	2300      	movs	r3, #0
 800c56c:	2200      	movs	r2, #0
 800c56e:	491a      	ldr	r1, [pc, #104]	; (800c5d8 <ADC_Thread+0x13c>)
 800c570:	f7fd f898 	bl	80096a4 <xQueueGenericSend>
 800c574:	60b8      	str	r0, [r7, #8]
				queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c576:	4b17      	ldr	r3, [pc, #92]	; (800c5d4 <ADC_Thread+0x138>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fd fbfa 	bl	8009d74 <uxQueueMessagesWaiting>
 800c580:	4602      	mov	r2, r0
 800c582:	4b16      	ldr	r3, [pc, #88]	; (800c5dc <ADC_Thread+0x140>)
 800c584:	601a      	str	r2, [r3, #0]

				if(xStatus == pdPASS)
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d104      	bne.n	800c596 <ADC_Thread+0xfa>
				{
					vTaskResume(FFT_TaskHandle);
 800c58c:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <ADC_Thread+0x144>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd ffbb 	bl	800a50c <vTaskResume>
				};


			  	ADS1256.data_index = 0;
 800c596:	4b0e      	ldr	r3, [pc, #56]	; (800c5d0 <ADC_Thread+0x134>)
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800c59c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c5a0:	4810      	ldr	r0, [pc, #64]	; (800c5e4 <ADC_Thread+0x148>)
 800c5a2:	f7f5 fc02 	bl	8001daa <HAL_GPIO_TogglePin>
			}

			TM_DelayMicros(8);
 800c5a6:	2008      	movs	r0, #8
 800c5a8:	f7ff fb34 	bl	800bc14 <TM_DelayMicros>
	 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800c5ac:	e77d      	b.n	800c4aa <ADC_Thread+0xe>
 800c5ae:	bf00      	nop
 800c5b0:	20004b1c 	.word	0x20004b1c
 800c5b4:	20014df8 	.word	0x20014df8
 800c5b8:	200006d4 	.word	0x200006d4
 800c5bc:	2000000c 	.word	0x2000000c
 800c5c0:	20014da0 	.word	0x20014da0
 800c5c4:	200006cc 	.word	0x200006cc
 800c5c8:	20008b94 	.word	0x20008b94
 800c5cc:	49cbdb80 	.word	0x49cbdb80
 800c5d0:	200006fc 	.word	0x200006fc
 800c5d4:	20008b90 	.word	0x20008b90
 800c5d8:	2000001c 	.word	0x2000001c
 800c5dc:	2000490c 	.word	0x2000490c
 800c5e0:	20004b18 	.word	0x20004b18
 800c5e4:	40020c00 	.word	0x40020c00

0800c5e8 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
	//const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c5f0:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <FFT_Thread+0x48>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fd fbbd 	bl	8009d74 <uxQueueMessagesWaiting>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <FFT_Thread+0x4c>)
 800c5fe:	601a      	str	r2, [r3, #0]
	  if(queueCount!=0){
 800c600:	4b0c      	ldr	r3, [pc, #48]	; (800c634 <FFT_Thread+0x4c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 81fc 	beq.w	800ca02 <FFT_Thread+0x41a>
			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800c60a:	4b09      	ldr	r3, [pc, #36]	; (800c630 <FFT_Thread+0x48>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2264      	movs	r2, #100	; 0x64
 800c610:	4909      	ldr	r1, [pc, #36]	; (800c638 <FFT_Thread+0x50>)
 800c612:	4618      	mov	r0, r3
 800c614:	f7fd f9ca 	bl	80099ac <xQueueReceive>
 800c618:	60b8      	str	r0, [r7, #8]
			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800c61a:	4b05      	ldr	r3, [pc, #20]	; (800c630 <FFT_Thread+0x48>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fd fba8 	bl	8009d74 <uxQueueMessagesWaiting>
 800c624:	4602      	mov	r2, r0
 800c626:	4b03      	ldr	r3, [pc, #12]	; (800c634 <FFT_Thread+0x4c>)
 800c628:	601a      	str	r2, [r3, #0]

			for(uint32_t i = 0; i<dataLength; i++)
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e028      	b.n	800c682 <FFT_Thread+0x9a>
 800c630:	20008b90 	.word	0x20008b90
 800c634:	2000490c 	.word	0x2000490c
 800c638:	20014e5c 	.word	0x20014e5c
			{
				//recivedata5 = *(dataRecive[0]+i);
				rawData[i]=*(dataRecive[0]+i);
 800c63c:	4bae      	ldr	r3, [pc, #696]	; (800c8f8 <FFT_Thread+0x310>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4413      	add	r3, r2
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	49ac      	ldr	r1, [pc, #688]	; (800c8fc <FFT_Thread+0x314>)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	440b      	add	r3, r1
 800c650:	601a      	str	r2, [r3, #0]
				FFTdata[i*2] = *(dataRecive[0]+i);
 800c652:	4ba9      	ldr	r3, [pc, #676]	; (800c8f8 <FFT_Thread+0x310>)
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	441a      	add	r2, r3
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	49a7      	ldr	r1, [pc, #668]	; (800c900 <FFT_Thread+0x318>)
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	440b      	add	r3, r1
 800c668:	601a      	str	r2, [r3, #0]
				FFTdata[i*2+1] = 0;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	3301      	adds	r3, #1
 800c670:	4aa3      	ldr	r2, [pc, #652]	; (800c900 <FFT_Thread+0x318>)
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
			for(uint32_t i = 0; i<dataLength; i++)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	3301      	adds	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	4ba0      	ldr	r3, [pc, #640]	; (800c904 <FFT_Thread+0x31c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d3d7      	bcc.n	800c63c <FFT_Thread+0x54>
			}

			if(xStatus == pdPASS)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d1ae      	bne.n	800c5f0 <FFT_Thread+0x8>
			{

				/* Process the data through the CFFT/CIFFT module */
				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800c692:	4b9d      	ldr	r3, [pc, #628]	; (800c908 <FFT_Thread+0x320>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	b2da      	uxtb	r2, r3
 800c698:	4b9c      	ldr	r3, [pc, #624]	; (800c90c <FFT_Thread+0x324>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	4998      	ldr	r1, [pc, #608]	; (800c900 <FFT_Thread+0x318>)
 800c6a0:	489b      	ldr	r0, [pc, #620]	; (800c910 <FFT_Thread+0x328>)
 800c6a2:	f7fb fc90 	bl	8007fc6 <arm_cfft_f32>

				/* Process the data through the Complex Magnitude Module for
				calculating the magnitude at each bin */
				arm_cmplx_mag_f32(FFTdata, testOutput, fftSize);
 800c6a6:	4b9b      	ldr	r3, [pc, #620]	; (800c914 <FFT_Thread+0x32c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	499a      	ldr	r1, [pc, #616]	; (800c918 <FFT_Thread+0x330>)
 800c6ae:	4894      	ldr	r0, [pc, #592]	; (800c900 <FFT_Thread+0x318>)
 800c6b0:	f7f9 ff76 	bl	80065a0 <arm_cmplx_mag_f32>

				/* Calculates maxValue and returns corresponding BIN value */
				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 800c6b4:	4b97      	ldr	r3, [pc, #604]	; (800c914 <FFT_Thread+0x32c>)
 800c6b6:	6819      	ldr	r1, [r3, #0]
 800c6b8:	4b98      	ldr	r3, [pc, #608]	; (800c91c <FFT_Thread+0x334>)
 800c6ba:	4a99      	ldr	r2, [pc, #612]	; (800c920 <FFT_Thread+0x338>)
 800c6bc:	4896      	ldr	r0, [pc, #600]	; (800c918 <FFT_Thread+0x330>)
 800c6be:	f7fa f82f 	bl	8006720 <arm_max_f32>
				 * It kindly would be
				 *  testOutput[] = 2/N * testOutput[0:N/2]
				 *
				 * */

				maxValue = maxValue*2 / dataLength;
 800c6c2:	4b97      	ldr	r3, [pc, #604]	; (800c920 <FFT_Thread+0x338>)
 800c6c4:	edd3 7a00 	vldr	s15, [r3]
 800c6c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c6cc:	4b8d      	ldr	r3, [pc, #564]	; (800c904 <FFT_Thread+0x31c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	ee07 3a90 	vmov	s15, r3
 800c6d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6dc:	4b90      	ldr	r3, [pc, #576]	; (800c920 <FFT_Thread+0x338>)
 800c6de:	edc3 7a00 	vstr	s15, [r3]
					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
				}
				 */

				/*Calculate math function*/
				statistic_value.Statistic_FreqOvall = Calculate_FreqOverAll(testOutput, dataLength);
 800c6e2:	4b88      	ldr	r3, [pc, #544]	; (800c904 <FFT_Thread+0x31c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	488b      	ldr	r0, [pc, #556]	; (800c918 <FFT_Thread+0x330>)
 800c6ea:	f7ff f9a9 	bl	800ba40 <Calculate_FreqOverAll>
 800c6ee:	eef0 7a40 	vmov.f32	s15, s0
 800c6f2:	4b8c      	ldr	r3, [pc, #560]	; (800c924 <FFT_Thread+0x33c>)
 800c6f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				arm_max_f32(statisticDataSet, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800c6f8:	4b8b      	ldr	r3, [pc, #556]	; (800c928 <FFT_Thread+0x340>)
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	4b81      	ldr	r3, [pc, #516]	; (800c904 <FFT_Thread+0x31c>)
 800c6fe:	6819      	ldr	r1, [r3, #0]
 800c700:	4b8a      	ldr	r3, [pc, #552]	; (800c92c <FFT_Thread+0x344>)
 800c702:	4a88      	ldr	r2, [pc, #544]	; (800c924 <FFT_Thread+0x33c>)
 800c704:	f7fa f80c 	bl	8006720 <arm_max_f32>
				arm_min_f32(statisticDataSet, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800c708:	4b87      	ldr	r3, [pc, #540]	; (800c928 <FFT_Thread+0x340>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	4b7d      	ldr	r3, [pc, #500]	; (800c904 <FFT_Thread+0x31c>)
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	4b87      	ldr	r3, [pc, #540]	; (800c930 <FFT_Thread+0x348>)
 800c712:	4a88      	ldr	r2, [pc, #544]	; (800c934 <FFT_Thread+0x34c>)
 800c714:	f7fa f909 	bl	800692a <arm_min_f32>
				arm_var_f32(statisticDataSet, dataLength, &statistic_value.Statistic_var);
 800c718:	4b83      	ldr	r3, [pc, #524]	; (800c928 <FFT_Thread+0x340>)
 800c71a:	6818      	ldr	r0, [r3, #0]
 800c71c:	4b79      	ldr	r3, [pc, #484]	; (800c904 <FFT_Thread+0x31c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a85      	ldr	r2, [pc, #532]	; (800c938 <FFT_Thread+0x350>)
 800c722:	4619      	mov	r1, r3
 800c724:	f7fa fb48 	bl	8006db8 <arm_var_f32>
				arm_rms_f32(statisticDataSet, dataLength, &statistic_value.Statistic_rms);
 800c728:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <FFT_Thread+0x340>)
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	4b75      	ldr	r3, [pc, #468]	; (800c904 <FFT_Thread+0x31c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a82      	ldr	r2, [pc, #520]	; (800c93c <FFT_Thread+0x354>)
 800c732:	4619      	mov	r1, r3
 800c734:	f7fa f9b1 	bl	8006a9a <arm_rms_f32>
				arm_mean_f32(statisticDataSet, dataLength, &statistic_value.Statistic_mean);
 800c738:	4b7b      	ldr	r3, [pc, #492]	; (800c928 <FFT_Thread+0x340>)
 800c73a:	6818      	ldr	r0, [r3, #0]
 800c73c:	4b71      	ldr	r3, [pc, #452]	; (800c904 <FFT_Thread+0x31c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a7f      	ldr	r2, [pc, #508]	; (800c940 <FFT_Thread+0x358>)
 800c742:	4619      	mov	r1, r3
 800c744:	f7fa f882 	bl	800684c <arm_mean_f32>
				arm_std_f32(statisticDataSet, dataLength, &statistic_value.Statistic_std);
 800c748:	4b77      	ldr	r3, [pc, #476]	; (800c928 <FFT_Thread+0x340>)
 800c74a:	6818      	ldr	r0, [r3, #0]
 800c74c:	4b6d      	ldr	r3, [pc, #436]	; (800c904 <FFT_Thread+0x31c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a7c      	ldr	r2, [pc, #496]	; (800c944 <FFT_Thread+0x35c>)
 800c752:	4619      	mov	r1, r3
 800c754:	f7fa fa48 	bl	8006be8 <arm_std_f32>
				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800c758:	4b72      	ldr	r3, [pc, #456]	; (800c924 <FFT_Thread+0x33c>)
 800c75a:	edd3 6a00 	vldr	s13, [r3]
 800c75e:	4b71      	ldr	r3, [pc, #452]	; (800c924 <FFT_Thread+0x33c>)
 800c760:	ed93 7a03 	vldr	s14, [r3, #12]
 800c764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c768:	4b6e      	ldr	r3, [pc, #440]	; (800c924 <FFT_Thread+0x33c>)
 800c76a:	edc3 7a06 	vstr	s15, [r3, #24]
				/*Calculate skewness and kurtosis will cause delay*/
				//statistic_value.Statistic_kurtosis = Calculate_kurtosis(statisticDataSet, dataLength);
				//statistic_value.Statistic_skewness = Calculate_skewness(statisticDataSet, dataLength);

				/*to calculate 3 times moving average*/
				averageTimes++;
 800c76e:	4b76      	ldr	r3, [pc, #472]	; (800c948 <FFT_Thread+0x360>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	b2da      	uxtb	r2, r3
 800c776:	4b74      	ldr	r3, [pc, #464]	; (800c948 <FFT_Thread+0x360>)
 800c778:	701a      	strb	r2, [r3, #0]
				if(averageTimes == 1)
 800c77a:	4b73      	ldr	r3, [pc, #460]	; (800c948 <FFT_Thread+0x360>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d12a      	bne.n	800c7d8 <FFT_Thread+0x1f0>
				{
					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800c782:	4b68      	ldr	r3, [pc, #416]	; (800c924 <FFT_Thread+0x33c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a67      	ldr	r2, [pc, #412]	; (800c924 <FFT_Thread+0x33c>)
 800c788:	6793      	str	r3, [r2, #120]	; 0x78
					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800c78a:	4b66      	ldr	r3, [pc, #408]	; (800c924 <FFT_Thread+0x33c>)
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4a65      	ldr	r2, [pc, #404]	; (800c924 <FFT_Thread+0x33c>)
 800c790:	67d3      	str	r3, [r2, #124]	; 0x7c
					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800c792:	4b64      	ldr	r3, [pc, #400]	; (800c924 <FFT_Thread+0x33c>)
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	4a63      	ldr	r2, [pc, #396]	; (800c924 <FFT_Thread+0x33c>)
 800c798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800c79c:	4b61      	ldr	r3, [pc, #388]	; (800c924 <FFT_Thread+0x33c>)
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	4a60      	ldr	r2, [pc, #384]	; (800c924 <FFT_Thread+0x33c>)
 800c7a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800c7a6:	4b5f      	ldr	r3, [pc, #380]	; (800c924 <FFT_Thread+0x33c>)
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	4a5e      	ldr	r2, [pc, #376]	; (800c924 <FFT_Thread+0x33c>)
 800c7ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800c7b0:	4b5c      	ldr	r3, [pc, #368]	; (800c924 <FFT_Thread+0x33c>)
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	4a5b      	ldr	r2, [pc, #364]	; (800c924 <FFT_Thread+0x33c>)
 800c7b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800c7ba:	4b5a      	ldr	r3, [pc, #360]	; (800c924 <FFT_Thread+0x33c>)
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7be:	4a59      	ldr	r2, [pc, #356]	; (800c924 <FFT_Thread+0x33c>)
 800c7c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800c7c4:	4b57      	ldr	r3, [pc, #348]	; (800c924 <FFT_Thread+0x33c>)
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	4a56      	ldr	r2, [pc, #344]	; (800c924 <FFT_Thread+0x33c>)
 800c7ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
					statistic_value.Statistic_kurtosis_Temp = statistic_value.Statistic_crestFactor;
 800c7ce:	4b55      	ldr	r3, [pc, #340]	; (800c924 <FFT_Thread+0x33c>)
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	4a54      	ldr	r2, [pc, #336]	; (800c924 <FFT_Thread+0x33c>)
 800c7d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

				}
				if(averageTimes == 2)
 800c7d8:	4b5b      	ldr	r3, [pc, #364]	; (800c948 <FFT_Thread+0x360>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d157      	bne.n	800c890 <FFT_Thread+0x2a8>
				{
					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800c7e0:	4b50      	ldr	r3, [pc, #320]	; (800c924 <FFT_Thread+0x33c>)
 800c7e2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800c7e6:	4b4f      	ldr	r3, [pc, #316]	; (800c924 <FFT_Thread+0x33c>)
 800c7e8:	edd3 7a00 	vldr	s15, [r3]
 800c7ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7f0:	4b4c      	ldr	r3, [pc, #304]	; (800c924 <FFT_Thread+0x33c>)
 800c7f2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800c7f6:	4b4b      	ldr	r3, [pc, #300]	; (800c924 <FFT_Thread+0x33c>)
 800c7f8:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800c7fc:	4b49      	ldr	r3, [pc, #292]	; (800c924 <FFT_Thread+0x33c>)
 800c7fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800c802:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c806:	4b47      	ldr	r3, [pc, #284]	; (800c924 <FFT_Thread+0x33c>)
 800c808:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800c80c:	4b45      	ldr	r3, [pc, #276]	; (800c924 <FFT_Thread+0x33c>)
 800c80e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800c812:	4b44      	ldr	r3, [pc, #272]	; (800c924 <FFT_Thread+0x33c>)
 800c814:	edd3 7a02 	vldr	s15, [r3, #8]
 800c818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c81c:	4b41      	ldr	r3, [pc, #260]	; (800c924 <FFT_Thread+0x33c>)
 800c81e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800c822:	4b40      	ldr	r3, [pc, #256]	; (800c924 <FFT_Thread+0x33c>)
 800c824:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800c828:	4b3e      	ldr	r3, [pc, #248]	; (800c924 <FFT_Thread+0x33c>)
 800c82a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c82e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c832:	4b3c      	ldr	r3, [pc, #240]	; (800c924 <FFT_Thread+0x33c>)
 800c834:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800c838:	4b3a      	ldr	r3, [pc, #232]	; (800c924 <FFT_Thread+0x33c>)
 800c83a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800c83e:	4b39      	ldr	r3, [pc, #228]	; (800c924 <FFT_Thread+0x33c>)
 800c840:	edd3 7a04 	vldr	s15, [r3, #16]
 800c844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c848:	4b36      	ldr	r3, [pc, #216]	; (800c924 <FFT_Thread+0x33c>)
 800c84a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800c84e:	4b35      	ldr	r3, [pc, #212]	; (800c924 <FFT_Thread+0x33c>)
 800c850:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800c854:	4b33      	ldr	r3, [pc, #204]	; (800c924 <FFT_Thread+0x33c>)
 800c856:	edd3 7a05 	vldr	s15, [r3, #20]
 800c85a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c85e:	4b31      	ldr	r3, [pc, #196]	; (800c924 <FFT_Thread+0x33c>)
 800c860:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800c864:	4b2f      	ldr	r3, [pc, #188]	; (800c924 <FFT_Thread+0x33c>)
 800c866:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800c86a:	4b2e      	ldr	r3, [pc, #184]	; (800c924 <FFT_Thread+0x33c>)
 800c86c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c874:	4b2b      	ldr	r3, [pc, #172]	; (800c924 <FFT_Thread+0x33c>)
 800c876:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800c87a:	4b2a      	ldr	r3, [pc, #168]	; (800c924 <FFT_Thread+0x33c>)
 800c87c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800c880:	4b28      	ldr	r3, [pc, #160]	; (800c924 <FFT_Thread+0x33c>)
 800c882:	edd3 7a06 	vldr	s15, [r3, #24]
 800c886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c88a:	4b26      	ldr	r3, [pc, #152]	; (800c924 <FFT_Thread+0x33c>)
 800c88c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

				}
				if(averageTimes == 3)
 800c890:	4b2d      	ldr	r3, [pc, #180]	; (800c948 <FFT_Thread+0x360>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b03      	cmp	r3, #3
 800c896:	f040 80ae 	bne.w	800c9f6 <FFT_Thread+0x40e>
				{
					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c89a:	4b22      	ldr	r3, [pc, #136]	; (800c924 <FFT_Thread+0x33c>)
 800c89c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
							statistic_value.Statistic_max) / 3;
 800c8a0:	4b20      	ldr	r3, [pc, #128]	; (800c924 <FFT_Thread+0x33c>)
 800c8a2:	edd3 7a00 	vldr	s15, [r3]
					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c8a6:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_max) / 3;
 800c8aa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800c8b2:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <FFT_Thread+0x33c>)
 800c8b4:	edc3 7a00 	vstr	s15, [r3]
					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c8b8:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <FFT_Thread+0x33c>)
 800c8ba:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
							statistic_value.Statistic_min) / 3;
 800c8be:	4b19      	ldr	r3, [pc, #100]	; (800c924 <FFT_Thread+0x33c>)
 800c8c0:	edd3 7a01 	vldr	s15, [r3, #4]
					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c8c4:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_min) / 3;
 800c8c8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800c8d0:	4b14      	ldr	r3, [pc, #80]	; (800c924 <FFT_Thread+0x33c>)
 800c8d2:	edc3 7a01 	vstr	s15, [r3, #4]
					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c8d6:	4b13      	ldr	r3, [pc, #76]	; (800c924 <FFT_Thread+0x33c>)
 800c8d8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
							statistic_value.Statistic_var) / 3;
 800c8dc:	4b11      	ldr	r3, [pc, #68]	; (800c924 <FFT_Thread+0x33c>)
 800c8de:	edd3 7a02 	vldr	s15, [r3, #8]
					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c8e2:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_var) / 3;
 800c8e6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800c8ee:	4b0d      	ldr	r3, [pc, #52]	; (800c924 <FFT_Thread+0x33c>)
 800c8f0:	edc3 7a02 	vstr	s15, [r3, #8]
 800c8f4:	e02a      	b.n	800c94c <FFT_Thread+0x364>
 800c8f6:	bf00      	nop
 800c8f8:	20014e5c 	.word	0x20014e5c
 800c8fc:	20008b98 	.word	0x20008b98
 800c900:	2000cd60 	.word	0x2000cd60
 800c904:	200006e8 	.word	0x200006e8
 800c908:	200006d8 	.word	0x200006d8
 800c90c:	20000018 	.word	0x20000018
 800c910:	0801a79c 	.word	0x0801a79c
 800c914:	20000014 	.word	0x20000014
 800c918:	20004b8c 	.word	0x20004b8c
 800c91c:	200006dc 	.word	0x200006dc
 800c920:	20004b20 	.word	0x20004b20
 800c924:	20004740 	.word	0x20004740
 800c928:	20004800 	.word	0x20004800
 800c92c:	200006e0 	.word	0x200006e0
 800c930:	200006e4 	.word	0x200006e4
 800c934:	20004744 	.word	0x20004744
 800c938:	20004748 	.word	0x20004748
 800c93c:	2000474c 	.word	0x2000474c
 800c940:	20004750 	.word	0x20004750
 800c944:	20004754 	.word	0x20004754
 800c948:	200006d0 	.word	0x200006d0
					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c94c:	4b2f      	ldr	r3, [pc, #188]	; (800ca0c <FFT_Thread+0x424>)
 800c94e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
							statistic_value.Statistic_rms) / 3;
 800c952:	4b2e      	ldr	r3, [pc, #184]	; (800ca0c <FFT_Thread+0x424>)
 800c954:	edd3 7a03 	vldr	s15, [r3, #12]
					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c958:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_rms) / 3;
 800c95c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c960:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800c964:	4b29      	ldr	r3, [pc, #164]	; (800ca0c <FFT_Thread+0x424>)
 800c966:	edc3 7a03 	vstr	s15, [r3, #12]
					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c96a:	4b28      	ldr	r3, [pc, #160]	; (800ca0c <FFT_Thread+0x424>)
 800c96c:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
							statistic_value.Statistic_mean) / 3;
 800c970:	4b26      	ldr	r3, [pc, #152]	; (800ca0c <FFT_Thread+0x424>)
 800c972:	edd3 7a04 	vldr	s15, [r3, #16]
					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c976:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_mean) / 3;
 800c97a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c97e:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800c982:	4b22      	ldr	r3, [pc, #136]	; (800ca0c <FFT_Thread+0x424>)
 800c984:	edc3 7a04 	vstr	s15, [r3, #16]
					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c988:	4b20      	ldr	r3, [pc, #128]	; (800ca0c <FFT_Thread+0x424>)
 800c98a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
							statistic_value.Statistic_std) / 3;
 800c98e:	4b1f      	ldr	r3, [pc, #124]	; (800ca0c <FFT_Thread+0x424>)
 800c990:	edd3 7a05 	vldr	s15, [r3, #20]
					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c994:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_std) / 3;
 800c998:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c99c:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800c9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ca0c <FFT_Thread+0x424>)
 800c9a2:	edc3 7a05 	vstr	s15, [r3, #20]
					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c9a6:	4b19      	ldr	r3, [pc, #100]	; (800ca0c <FFT_Thread+0x424>)
 800c9a8:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
							statistic_value.Statistic_FreqOvall) / 3;
 800c9ac:	4b17      	ldr	r3, [pc, #92]	; (800ca0c <FFT_Thread+0x424>)
 800c9ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c9b2:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_FreqOvall) / 3;
 800c9b6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c9ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800c9be:	4b13      	ldr	r3, [pc, #76]	; (800ca0c <FFT_Thread+0x424>)
 800c9c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c9c4:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <FFT_Thread+0x424>)
 800c9c6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
							statistic_value.Statistic_crestFactor) / 3;
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <FFT_Thread+0x424>)
 800c9cc:	edd3 7a06 	vldr	s15, [r3, #24]
					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c9d0:	ee37 7a27 	vadd.f32	s14, s14, s15
							statistic_value.Statistic_crestFactor) / 3;
 800c9d4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c9d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800c9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ca0c <FFT_Thread+0x424>)
 800c9de:	edc3 7a06 	vstr	s15, [r3, #24]

					USARTBLE.sendflag = 1;
 800c9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <FFT_Thread+0x428>)
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	701a      	strb	r2, [r3, #0]
					averageTimes = 0;
 800c9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <FFT_Thread+0x42c>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
					BLE_USART(&huart6, &statistic_value);
 800c9ee:	4907      	ldr	r1, [pc, #28]	; (800ca0c <FFT_Thread+0x424>)
 800c9f0:	4809      	ldr	r0, [pc, #36]	; (800ca18 <FFT_Thread+0x430>)
 800c9f2:	f7fe ffa3 	bl	800b93c <BLE_USART>

				//snprintf_(bb,20, "%.3f Pa", statistic_value.Statistic_max);



				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800c9f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c9fa:	4808      	ldr	r0, [pc, #32]	; (800ca1c <FFT_Thread+0x434>)
 800c9fc:	f7f5 f9d5 	bl	8001daa <HAL_GPIO_TogglePin>
 800ca00:	e5f6      	b.n	800c5f0 <FFT_Thread+0x8>
			}
*/
	  }

	  else{
		 vTaskSuspend(NULL);
 800ca02:	2000      	movs	r0, #0
 800ca04:	f7fd fcb6 	bl	800a374 <vTaskSuspend>
  {
 800ca08:	e5f2      	b.n	800c5f0 <FFT_Thread+0x8>
 800ca0a:	bf00      	nop
 800ca0c:	20004740 	.word	0x20004740
 800ca10:	2000cba0 	.word	0x2000cba0
 800ca14:	200006d0 	.word	0x200006d0
 800ca18:	20014d60 	.word	0x20014d60
 800ca1c:	40020c00 	.word	0x40020c00

0800ca20 <LED_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread */
void LED_Thread(void const * argument)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_Thread */
  /* Infinite loop */
  for(;;)
 800ca28:	e7fe      	b.n	800ca28 <LED_Thread+0x8>

0800ca2a <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ca32:	2001      	movs	r0, #1
 800ca34:	f7fc fbdb 	bl	80091ee <osDelay>
 800ca38:	e7fb      	b.n	800ca32 <StartTask04+0x8>

0800ca3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ca3e:	bf00      	nop
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60b9      	str	r1, [r7, #8]
 800ca50:	607a      	str	r2, [r7, #4]
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d204      	bcs.n	800ca6a <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4413      	add	r3, r2
 800ca66:	7bfa      	ldrb	r2, [r7, #15]
 800ca68:	701a      	strb	r2, [r3, #0]
  }
}
 800ca6a:	bf00      	nop
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]
 800ca82:	4603      	mov	r3, r0
 800ca84:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800ca86:	bf00      	nop
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b085      	sub	sp, #20
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e002      	b.n	800caa8 <_strnlen_s+0x16>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3301      	adds	r3, #1
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d004      	beq.n	800caba <_strnlen_s+0x28>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	1e5a      	subs	r2, r3, #1
 800cab4:	603a      	str	r2, [r7, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1f3      	bne.n	800caa2 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	1ad3      	subs	r3, r2, r3
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	2b2f      	cmp	r3, #47	; 0x2f
 800cada:	d904      	bls.n	800cae6 <_is_digit+0x1a>
 800cadc:	79fb      	ldrb	r3, [r7, #7]
 800cade:	2b39      	cmp	r3, #57	; 0x39
 800cae0:	d801      	bhi.n	800cae6 <_is_digit+0x1a>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e000      	b.n	800cae8 <_is_digit+0x1c>
 800cae6:	2300      	movs	r3, #0
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	b2db      	uxtb	r3, r3
}
 800caee:	4618      	mov	r0, r3
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cb06:	e00e      	b.n	800cb26 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	4618      	mov	r0, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	1c59      	adds	r1, r3, #1
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6011      	str	r1, [r2, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	4403      	add	r3, r0
 800cb22:	3b30      	subs	r3, #48	; 0x30
 800cb24:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff ffcd 	bl	800cacc <_is_digit>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e7      	bne.n	800cb08 <_atoi+0xe>
  }
  return i;
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800cb42:	b590      	push	{r4, r7, lr}
 800cb44:	b087      	sub	sp, #28
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
 800cb4e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800cb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb56:	f003 0302 	and.w	r3, r3, #2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d125      	bne.n	800cbaa <_out_rev+0x68>
 800cb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d120      	bne.n	800cbaa <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	e00a      	b.n	800cb84 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	1c53      	adds	r3, r2, #1
 800cb72:	607b      	str	r3, [r7, #4]
 800cb74:	68fc      	ldr	r4, [r7, #12]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	2020      	movs	r0, #32
 800cb7c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	3301      	adds	r3, #1
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d3f0      	bcc.n	800cb6e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800cb8c:	e00d      	b.n	800cbaa <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	3b01      	subs	r3, #1
 800cb92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	4413      	add	r3, r2
 800cb9a:	7818      	ldrb	r0, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	1c53      	adds	r3, r2, #1
 800cba0:	607b      	str	r3, [r7, #4]
 800cba2:	68fc      	ldr	r4, [r7, #12]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	47a0      	blx	r4
  while (len) {
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1ee      	bne.n	800cb8e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00e      	beq.n	800cbd8 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800cbba:	e007      	b.n	800cbcc <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	1c53      	adds	r3, r2, #1
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	68fc      	ldr	r4, [r7, #12]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	2020      	movs	r0, #32
 800cbca:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d8f1      	bhi.n	800cbbc <_out_rev+0x7a>
    }
  }

  return idx;
 800cbd8:	687b      	ldr	r3, [r7, #4]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd90      	pop	{r4, r7, pc}

0800cbe2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b088      	sub	sp, #32
 800cbe6:	af04      	add	r7, sp, #16
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
 800cbee:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d136      	bne.n	800cc68 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d018      	beq.n	800cc32 <_ntoa_format+0x50>
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d013      	beq.n	800cc32 <_ntoa_format+0x50>
 800cc0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d104      	bne.n	800cc1c <_ntoa_format+0x3a>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	f003 030c 	and.w	r3, r3, #12
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00a      	beq.n	800cc32 <_ntoa_format+0x50>
      width--;
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc22:	e006      	b.n	800cc32 <_ntoa_format+0x50>
      buf[len++] = '0';
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	61fa      	str	r2, [r7, #28]
 800cc2a:	69ba      	ldr	r2, [r7, #24]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	2230      	movs	r2, #48	; 0x30
 800cc30:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc32:	69fa      	ldr	r2, [r7, #28]
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d20a      	bcs.n	800cc50 <_ntoa_format+0x6e>
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	2b1f      	cmp	r3, #31
 800cc3e:	d9f1      	bls.n	800cc24 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc40:	e006      	b.n	800cc50 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	61fa      	str	r2, [r7, #28]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	2230      	movs	r2, #48	; 0x30
 800cc4e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d006      	beq.n	800cc68 <_ntoa_format+0x86>
 800cc5a:	69fa      	ldr	r2, [r7, #28]
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d202      	bcs.n	800cc68 <_ntoa_format+0x86>
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	2b1f      	cmp	r3, #31
 800cc66:	d9ec      	bls.n	800cc42 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	f003 0310 	and.w	r3, r3, #16
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d058      	beq.n	800cd24 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800cc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d116      	bne.n	800ccaa <_ntoa_format+0xc8>
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d013      	beq.n	800ccaa <_ntoa_format+0xc8>
 800cc82:	69fa      	ldr	r2, [r7, #28]
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d003      	beq.n	800cc92 <_ntoa_format+0xb0>
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d10b      	bne.n	800ccaa <_ntoa_format+0xc8>
      len--;
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d005      	beq.n	800ccaa <_ntoa_format+0xc8>
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	2b10      	cmp	r3, #16
 800cca2:	d102      	bne.n	800ccaa <_ntoa_format+0xc8>
        len--;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	2b10      	cmp	r3, #16
 800ccae:	d10f      	bne.n	800ccd0 <_ntoa_format+0xee>
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	f003 0320 	and.w	r3, r3, #32
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <_ntoa_format+0xee>
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	2b1f      	cmp	r3, #31
 800ccbe:	d807      	bhi.n	800ccd0 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	61fa      	str	r2, [r7, #28]
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	4413      	add	r3, r2
 800ccca:	2278      	movs	r2, #120	; 0x78
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	e01f      	b.n	800cd10 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	2b10      	cmp	r3, #16
 800ccd4:	d10f      	bne.n	800ccf6 <_ntoa_format+0x114>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f003 0320 	and.w	r3, r3, #32
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00a      	beq.n	800ccf6 <_ntoa_format+0x114>
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	2b1f      	cmp	r3, #31
 800cce4:	d807      	bhi.n	800ccf6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	61fa      	str	r2, [r7, #28]
 800ccec:	69ba      	ldr	r2, [r7, #24]
 800ccee:	4413      	add	r3, r2
 800ccf0:	2258      	movs	r2, #88	; 0x58
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	e00c      	b.n	800cd10 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d109      	bne.n	800cd10 <_ntoa_format+0x12e>
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	2b1f      	cmp	r3, #31
 800cd00:	d806      	bhi.n	800cd10 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	61fa      	str	r2, [r7, #28]
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	2262      	movs	r2, #98	; 0x62
 800cd0e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	2b1f      	cmp	r3, #31
 800cd14:	d806      	bhi.n	800cd24 <_ntoa_format+0x142>
      buf[len++] = '0';
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	61fa      	str	r2, [r7, #28]
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	4413      	add	r3, r2
 800cd20:	2230      	movs	r2, #48	; 0x30
 800cd22:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2b1f      	cmp	r3, #31
 800cd28:	d824      	bhi.n	800cd74 <_ntoa_format+0x192>
    if (negative) {
 800cd2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d007      	beq.n	800cd42 <_ntoa_format+0x160>
      buf[len++] = '-';
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	61fa      	str	r2, [r7, #28]
 800cd38:	69ba      	ldr	r2, [r7, #24]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	222d      	movs	r2, #45	; 0x2d
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	e018      	b.n	800cd74 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d007      	beq.n	800cd5c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	61fa      	str	r2, [r7, #28]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	4413      	add	r3, r2
 800cd56:	222b      	movs	r2, #43	; 0x2b
 800cd58:	701a      	strb	r2, [r3, #0]
 800cd5a:	e00b      	b.n	800cd74 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	f003 0308 	and.w	r3, r3, #8
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d006      	beq.n	800cd74 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	1c5a      	adds	r2, r3, #1
 800cd6a:	61fa      	str	r2, [r7, #28]
 800cd6c:	69ba      	ldr	r2, [r7, #24]
 800cd6e:	4413      	add	r3, r2
 800cd70:	2220      	movs	r2, #32
 800cd72:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	9302      	str	r3, [sp, #8]
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fed9 	bl	800cb42 <_out_rev>
 800cd90:	4603      	mov	r3, r0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b096      	sub	sp, #88	; 0x58
 800cd9e:	af08      	add	r7, sp, #32
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	607a      	str	r2, [r7, #4]
 800cda6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800cdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d103      	bne.n	800cdba <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800cdb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb4:	f023 0310 	bic.w	r3, r3, #16
 800cdb8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800cdba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <_ntoa_long+0x30>
 800cdc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d033      	beq.n	800ce32 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800cdca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdce:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cdd4:	fb01 f202 	mul.w	r2, r1, r2
 800cdd8:	1a9b      	subs	r3, r3, r2
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800cdde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cde2:	2b09      	cmp	r3, #9
 800cde4:	d804      	bhi.n	800cdf0 <_ntoa_long+0x56>
 800cde6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdea:	3330      	adds	r3, #48	; 0x30
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	e00d      	b.n	800ce0c <_ntoa_long+0x72>
 800cdf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf2:	f003 0320 	and.w	r3, r3, #32
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <_ntoa_long+0x64>
 800cdfa:	2241      	movs	r2, #65	; 0x41
 800cdfc:	e000      	b.n	800ce00 <_ntoa_long+0x66>
 800cdfe:	2261      	movs	r2, #97	; 0x61
 800ce00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce04:	4413      	add	r3, r2
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	3b0a      	subs	r3, #10
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0e:	1c59      	adds	r1, r3, #1
 800ce10:	6379      	str	r1, [r7, #52]	; 0x34
 800ce12:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ce16:	440b      	add	r3, r1
 800ce18:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ce1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce24:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ce26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <_ntoa_long+0x98>
 800ce2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2e:	2b1f      	cmp	r3, #31
 800ce30:	d9cb      	bls.n	800cdca <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ce32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce34:	9306      	str	r3, [sp, #24]
 800ce36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3c:	9304      	str	r3, [sp, #16]
 800ce3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce40:	9303      	str	r3, [sp, #12]
 800ce42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ce46:	9302      	str	r3, [sp, #8]
 800ce48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	f107 0310 	add.w	r3, r7, #16
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	68b9      	ldr	r1, [r7, #8]
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7ff fec2 	bl	800cbe2 <_ntoa_format>
 800ce5e:	4603      	mov	r3, r0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3738      	adds	r7, #56	; 0x38
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ce68:	b590      	push	{r4, r7, lr}
 800ce6a:	b097      	sub	sp, #92	; 0x5c
 800ce6c:	af08      	add	r7, sp, #32
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ce7a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ce7e:	4323      	orrs	r3, r4
 800ce80:	d103      	bne.n	800ce8a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800ce82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce84:	f023 0310 	bic.w	r3, r3, #16
 800ce88:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ce8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d003      	beq.n	800ce9c <_ntoa_long_long+0x34>
 800ce94:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ce98:	4323      	orrs	r3, r4
 800ce9a:	d039      	beq.n	800cf10 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800ce9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cea0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cea4:	f7f3 ff00 	bl	8000ca8 <__aeabi_uldivmod>
 800cea8:	461c      	mov	r4, r3
 800ceaa:	4613      	mov	r3, r2
 800ceac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ceb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ceb4:	2b09      	cmp	r3, #9
 800ceb6:	d804      	bhi.n	800cec2 <_ntoa_long_long+0x5a>
 800ceb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cebc:	3330      	adds	r3, #48	; 0x30
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	e00d      	b.n	800cede <_ntoa_long_long+0x76>
 800cec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <_ntoa_long_long+0x68>
 800cecc:	2241      	movs	r2, #65	; 0x41
 800cece:	e000      	b.n	800ced2 <_ntoa_long_long+0x6a>
 800ced0:	2261      	movs	r2, #97	; 0x61
 800ced2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ced6:	4413      	add	r3, r2
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	3b0a      	subs	r3, #10
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee0:	1c59      	adds	r1, r3, #1
 800cee2:	6379      	str	r1, [r7, #52]	; 0x34
 800cee4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cee8:	440b      	add	r3, r1
 800ceea:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ceee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cef6:	f7f3 fed7 	bl	8000ca8 <__aeabi_uldivmod>
 800cefa:	4603      	mov	r3, r0
 800cefc:	460c      	mov	r4, r1
 800cefe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800cf02:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800cf06:	4323      	orrs	r3, r4
 800cf08:	d002      	beq.n	800cf10 <_ntoa_long_long+0xa8>
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0c:	2b1f      	cmp	r3, #31
 800cf0e:	d9c5      	bls.n	800ce9c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800cf10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf14:	9206      	str	r2, [sp, #24]
 800cf16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf18:	9205      	str	r2, [sp, #20]
 800cf1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf1c:	9204      	str	r2, [sp, #16]
 800cf1e:	9303      	str	r3, [sp, #12]
 800cf20:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800cf24:	9302      	str	r3, [sp, #8]
 800cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	f107 0310 	add.w	r3, r7, #16
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	68b9      	ldr	r1, [r7, #8]
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff fe53 	bl	800cbe2 <_ntoa_format>
 800cf3c:	4603      	mov	r3, r0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	373c      	adds	r7, #60	; 0x3c
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd90      	pop	{r4, r7, pc}
	...

0800cf48 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cf48:	b590      	push	{r4, r7, lr}
 800cf4a:	b09d      	sub	sp, #116	; 0x74
 800cf4c:	af04      	add	r7, sp, #16
 800cf4e:	6178      	str	r0, [r7, #20]
 800cf50:	6139      	str	r1, [r7, #16]
 800cf52:	60fa      	str	r2, [r7, #12]
 800cf54:	60bb      	str	r3, [r7, #8]
 800cf56:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800cf5e:	f04f 0300 	mov.w	r3, #0
 800cf62:	f04f 0400 	mov.w	r4, #0
 800cf66:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800cf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf72:	f7f3 fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10f      	bne.n	800cf9c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800cf7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf7e:	9303      	str	r3, [sp, #12]
 800cf80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf82:	9302      	str	r3, [sp, #8]
 800cf84:	2303      	movs	r3, #3
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	4baf      	ldr	r3, [pc, #700]	; (800d248 <_ftoa+0x300>)
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	6939      	ldr	r1, [r7, #16]
 800cf92:	6978      	ldr	r0, [r7, #20]
 800cf94:	f7ff fdd5 	bl	800cb42 <_out_rev>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	e237      	b.n	800d40c <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800cfa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfa8:	f7f3 fda8 	bl	8000afc <__aeabi_dcmplt>
 800cfac:	4603      	mov	r3, r0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00f      	beq.n	800cfd2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800cfb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb4:	9303      	str	r3, [sp, #12]
 800cfb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfb8:	9302      	str	r3, [sp, #8]
 800cfba:	2304      	movs	r3, #4
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	4ba3      	ldr	r3, [pc, #652]	; (800d24c <_ftoa+0x304>)
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	6939      	ldr	r1, [r7, #16]
 800cfc8:	6978      	ldr	r0, [r7, #20]
 800cfca:	f7ff fdba 	bl	800cb42 <_out_rev>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	e21c      	b.n	800d40c <_ftoa+0x4c4>
  if (value > DBL_MAX)
 800cfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd6:	4b9e      	ldr	r3, [pc, #632]	; (800d250 <_ftoa+0x308>)
 800cfd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfdc:	f7f3 fdac 	bl	8000b38 <__aeabi_dcmpgt>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d01d      	beq.n	800d022 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800cfe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfe8:	f003 0304 	and.w	r3, r3, #4
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <_ftoa+0xac>
 800cff0:	4b98      	ldr	r3, [pc, #608]	; (800d254 <_ftoa+0x30c>)
 800cff2:	e000      	b.n	800cff6 <_ftoa+0xae>
 800cff4:	4b98      	ldr	r3, [pc, #608]	; (800d258 <_ftoa+0x310>)
 800cff6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cff8:	f002 0204 	and.w	r2, r2, #4
 800cffc:	2a00      	cmp	r2, #0
 800cffe:	d001      	beq.n	800d004 <_ftoa+0xbc>
 800d000:	2204      	movs	r2, #4
 800d002:	e000      	b.n	800d006 <_ftoa+0xbe>
 800d004:	2203      	movs	r2, #3
 800d006:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d008:	9103      	str	r1, [sp, #12]
 800d00a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d00c:	9102      	str	r1, [sp, #8]
 800d00e:	9201      	str	r2, [sp, #4]
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	6939      	ldr	r1, [r7, #16]
 800d018:	6978      	ldr	r0, [r7, #20]
 800d01a:	f7ff fd92 	bl	800cb42 <_out_rev>
 800d01e:	4603      	mov	r3, r0
 800d020:	e1f4      	b.n	800d40c <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800d022:	a385      	add	r3, pc, #532	; (adr r3, 800d238 <_ftoa+0x2f0>)
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d02c:	f7f3 fd84 	bl	8000b38 <__aeabi_dcmpgt>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d109      	bne.n	800d04a <_ftoa+0x102>
 800d036:	a382      	add	r3, pc, #520	; (adr r3, 800d240 <_ftoa+0x2f8>)
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d040:	f7f3 fd5c 	bl	8000afc <__aeabi_dcmplt>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00f      	beq.n	800d06a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d04a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d04c:	9302      	str	r3, [sp, #8]
 800d04e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	ed97 0b00 	vldr	d0, [r7]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	6939      	ldr	r1, [r7, #16]
 800d060:	6978      	ldr	r0, [r7, #20]
 800d062:	f000 f9dd 	bl	800d420 <_etoa>
 800d066:	4603      	mov	r3, r0
 800d068:	e1d0      	b.n	800d40c <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800d06a:	2300      	movs	r3, #0
 800d06c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800d070:	f04f 0200 	mov.w	r2, #0
 800d074:	f04f 0300 	mov.w	r3, #0
 800d078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d07c:	f7f3 fd3e 	bl	8000afc <__aeabi_dcmplt>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00e      	beq.n	800d0a4 <_ftoa+0x15c>
    negative = true;
 800d086:	2301      	movs	r3, #1
 800d088:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800d08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d090:	f04f 0000 	mov.w	r0, #0
 800d094:	f04f 0100 	mov.w	r1, #0
 800d098:	f7f3 f906 	bl	80002a8 <__aeabi_dsub>
 800d09c:	4603      	mov	r3, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800d0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10e      	bne.n	800d0cc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d0ae:	2306      	movs	r3, #6
 800d0b0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d0b2:	e00b      	b.n	800d0cc <_ftoa+0x184>
    buf[len++] = '0';
 800d0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d0ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d0be:	4413      	add	r3, r2
 800d0c0:	2230      	movs	r2, #48	; 0x30
 800d0c2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800d0c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ce:	2b1f      	cmp	r3, #31
 800d0d0:	d802      	bhi.n	800d0d8 <_ftoa+0x190>
 800d0d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0d4:	2b09      	cmp	r3, #9
 800d0d6:	d8ed      	bhi.n	800d0b4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800d0d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0dc:	f7f3 fd4c 	bl	8000b78 <__aeabi_d2iz>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800d0e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d0e6:	f7f3 fa2d 	bl	8000544 <__aeabi_i2d>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0f6:	f7f3 f8d7 	bl	80002a8 <__aeabi_dsub>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	4618      	mov	r0, r3
 800d100:	4621      	mov	r1, r4
 800d102:	4a56      	ldr	r2, [pc, #344]	; (800d25c <_ftoa+0x314>)
 800d104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	4413      	add	r3, r2
 800d10a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d10e:	461a      	mov	r2, r3
 800d110:	4623      	mov	r3, r4
 800d112:	f7f3 fa81 	bl	8000618 <__aeabi_dmul>
 800d116:	4603      	mov	r3, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d11e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d122:	f7f3 fd51 	bl	8000bc8 <__aeabi_d2uiz>
 800d126:	4603      	mov	r3, r0
 800d128:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d12a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d12c:	f7f3 f9fa 	bl	8000524 <__aeabi_ui2d>
 800d130:	4603      	mov	r3, r0
 800d132:	460c      	mov	r4, r1
 800d134:	461a      	mov	r2, r3
 800d136:	4623      	mov	r3, r4
 800d138:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d13c:	f7f3 f8b4 	bl	80002a8 <__aeabi_dsub>
 800d140:	4603      	mov	r3, r0
 800d142:	460c      	mov	r4, r1
 800d144:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d148:	f04f 0200 	mov.w	r2, #0
 800d14c:	4b44      	ldr	r3, [pc, #272]	; (800d260 <_ftoa+0x318>)
 800d14e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d152:	f7f3 fcf1 	bl	8000b38 <__aeabi_dcmpgt>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d018      	beq.n	800d18e <_ftoa+0x246>
    ++frac;
 800d15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15e:	3301      	adds	r3, #1
 800d160:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d162:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d164:	f7f3 f9de 	bl	8000524 <__aeabi_ui2d>
 800d168:	4a3c      	ldr	r2, [pc, #240]	; (800d25c <_ftoa+0x314>)
 800d16a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	4413      	add	r3, r2
 800d170:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d174:	461a      	mov	r2, r3
 800d176:	4623      	mov	r3, r4
 800d178:	f7f3 fcd4 	bl	8000b24 <__aeabi_dcmpge>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d01a      	beq.n	800d1b8 <_ftoa+0x270>
      frac = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d188:	3301      	adds	r3, #1
 800d18a:	657b      	str	r3, [r7, #84]	; 0x54
 800d18c:	e014      	b.n	800d1b8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 800d18e:	f04f 0200 	mov.w	r2, #0
 800d192:	4b33      	ldr	r3, [pc, #204]	; (800d260 <_ftoa+0x318>)
 800d194:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d198:	f7f3 fcb0 	bl	8000afc <__aeabi_dcmplt>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d004      	beq.n	800d1b2 <_ftoa+0x26a>
 800d1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d1b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d136      	bne.n	800d22c <_ftoa+0x2e4>
    diff = value - (double)whole;
 800d1be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d1c0:	f7f3 f9c0 	bl	8000544 <__aeabi_i2d>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1d0:	f7f3 f86a 	bl	80002a8 <__aeabi_dsub>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d1dc:	2301      	movs	r3, #1
 800d1de:	461c      	mov	r4, r3
 800d1e0:	f04f 0200 	mov.w	r2, #0
 800d1e4:	4b1e      	ldr	r3, [pc, #120]	; (800d260 <_ftoa+0x318>)
 800d1e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d1ea:	f7f3 fc87 	bl	8000afc <__aeabi_dcmplt>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <_ftoa+0x2b0>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	461c      	mov	r4, r3
 800d1f8:	b2e3      	uxtb	r3, r4
 800d1fa:	f083 0301 	eor.w	r3, r3, #1
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d109      	bne.n	800d218 <_ftoa+0x2d0>
 800d204:	f04f 0200 	mov.w	r2, #0
 800d208:	4b15      	ldr	r3, [pc, #84]	; (800d260 <_ftoa+0x318>)
 800d20a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d20e:	f7f3 fc93 	bl	8000b38 <__aeabi_dcmpgt>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d069      	beq.n	800d2ec <_ftoa+0x3a4>
 800d218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d21a:	f003 0301 	and.w	r3, r3, #1
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 8087 	beq.w	800d332 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d226:	3301      	adds	r3, #1
 800d228:	657b      	str	r3, [r7, #84]	; 0x54
 800d22a:	e082      	b.n	800d332 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800d22c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d22e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d230:	e039      	b.n	800d2a6 <_ftoa+0x35e>
 800d232:	bf00      	nop
 800d234:	f3af 8000 	nop.w
 800d238:	00000000 	.word	0x00000000
 800d23c:	41cdcd65 	.word	0x41cdcd65
 800d240:	00000000 	.word	0x00000000
 800d244:	c1cdcd65 	.word	0xc1cdcd65
 800d248:	080107fc 	.word	0x080107fc
 800d24c:	08010800 	.word	0x08010800
 800d250:	7fefffff 	.word	0x7fefffff
 800d254:	08010808 	.word	0x08010808
 800d258:	08010810 	.word	0x08010810
 800d25c:	0801a7b0 	.word	0x0801a7b0
 800d260:	3fe00000 	.word	0x3fe00000
      --count;
 800d264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d266:	3b01      	subs	r3, #1
 800d268:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d26c:	4b69      	ldr	r3, [pc, #420]	; (800d414 <_ftoa+0x4cc>)
 800d26e:	fba3 2301 	umull	r2, r3, r3, r1
 800d272:	08da      	lsrs	r2, r3, #3
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	1aca      	subs	r2, r1, r3
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d282:	1c59      	adds	r1, r3, #1
 800d284:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d286:	3230      	adds	r2, #48	; 0x30
 800d288:	b2d2      	uxtb	r2, r2
 800d28a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d28e:	440b      	add	r3, r1
 800d290:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800d294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d296:	4a5f      	ldr	r2, [pc, #380]	; (800d414 <_ftoa+0x4cc>)
 800d298:	fba2 2303 	umull	r2, r3, r2, r3
 800d29c:	08db      	lsrs	r3, r3, #3
 800d29e:	653b      	str	r3, [r7, #80]	; 0x50
 800d2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2a8:	2b1f      	cmp	r3, #31
 800d2aa:	d9db      	bls.n	800d264 <_ftoa+0x31c>
 800d2ac:	e00a      	b.n	800d2c4 <_ftoa+0x37c>
        break;
 800d2ae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d2b0:	e008      	b.n	800d2c4 <_ftoa+0x37c>
      buf[len++] = '0';
 800d2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d2b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d2bc:	4413      	add	r3, r2
 800d2be:	2230      	movs	r2, #48	; 0x30
 800d2c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c6:	2b1f      	cmp	r3, #31
 800d2c8:	d804      	bhi.n	800d2d4 <_ftoa+0x38c>
 800d2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2cc:	1e5a      	subs	r2, r3, #1
 800d2ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1ee      	bne.n	800d2b2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2d6:	2b1f      	cmp	r3, #31
 800d2d8:	d82b      	bhi.n	800d332 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800d2da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d2e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d2e4:	4413      	add	r3, r2
 800d2e6:	222e      	movs	r2, #46	; 0x2e
 800d2e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d2ec:	e021      	b.n	800d332 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800d2ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2f0:	4b49      	ldr	r3, [pc, #292]	; (800d418 <_ftoa+0x4d0>)
 800d2f2:	fb83 1302 	smull	r1, r3, r3, r2
 800d2f6:	1099      	asrs	r1, r3, #2
 800d2f8:	17d3      	asrs	r3, r2, #31
 800d2fa:	1ac9      	subs	r1, r1, r3
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	1ad1      	subs	r1, r2, r3
 800d306:	b2ca      	uxtb	r2, r1
 800d308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d30a:	1c59      	adds	r1, r3, #1
 800d30c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d30e:	3230      	adds	r2, #48	; 0x30
 800d310:	b2d2      	uxtb	r2, r2
 800d312:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d316:	440b      	add	r3, r1
 800d318:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800d31c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d31e:	4a3e      	ldr	r2, [pc, #248]	; (800d418 <_ftoa+0x4d0>)
 800d320:	fb82 1203 	smull	r1, r2, r2, r3
 800d324:	1092      	asrs	r2, r2, #2
 800d326:	17db      	asrs	r3, r3, #31
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	657b      	str	r3, [r7, #84]	; 0x54
 800d32c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d334:	2b1f      	cmp	r3, #31
 800d336:	d9da      	bls.n	800d2ee <_ftoa+0x3a6>
 800d338:	e000      	b.n	800d33c <_ftoa+0x3f4>
      break;
 800d33a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800d33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d33e:	f003 0302 	and.w	r3, r3, #2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d124      	bne.n	800d390 <_ftoa+0x448>
 800d346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d01f      	beq.n	800d390 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d352:	2b00      	cmp	r3, #0
 800d354:	d015      	beq.n	800d382 <_ftoa+0x43a>
 800d356:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d104      	bne.n	800d368 <_ftoa+0x420>
 800d35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d360:	f003 030c 	and.w	r3, r3, #12
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00c      	beq.n	800d382 <_ftoa+0x43a>
      width--;
 800d368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d36a:	3b01      	subs	r3, #1
 800d36c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d36e:	e008      	b.n	800d382 <_ftoa+0x43a>
      buf[len++] = '0';
 800d370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d376:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d37a:	4413      	add	r3, r2
 800d37c:	2230      	movs	r2, #48	; 0x30
 800d37e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d382:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d386:	429a      	cmp	r2, r3
 800d388:	d202      	bcs.n	800d390 <_ftoa+0x448>
 800d38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d38c:	2b1f      	cmp	r3, #31
 800d38e:	d9ef      	bls.n	800d370 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d392:	2b1f      	cmp	r3, #31
 800d394:	d82a      	bhi.n	800d3ec <_ftoa+0x4a4>
    if (negative) {
 800d396:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d009      	beq.n	800d3b2 <_ftoa+0x46a>
      buf[len++] = '-';
 800d39e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d3a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d3a8:	4413      	add	r3, r2
 800d3aa:	222d      	movs	r2, #45	; 0x2d
 800d3ac:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d3b0:	e01c      	b.n	800d3ec <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 800d3b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3b4:	f003 0304 	and.w	r3, r3, #4
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d009      	beq.n	800d3d0 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d3bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d3c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d3c6:	4413      	add	r3, r2
 800d3c8:	222b      	movs	r2, #43	; 0x2b
 800d3ca:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d3ce:	e00d      	b.n	800d3ec <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 800d3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3d2:	f003 0308 	and.w	r3, r3, #8
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d008      	beq.n	800d3ec <_ftoa+0x4a4>
      buf[len++] = ' ';
 800d3da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d3e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d3e4:	4413      	add	r3, r2
 800d3e6:	2220      	movs	r2, #32
 800d3e8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ee:	9303      	str	r3, [sp, #12]
 800d3f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3f2:	9302      	str	r3, [sp, #8]
 800d3f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3f6:	9301      	str	r3, [sp, #4]
 800d3f8:	f107 0318 	add.w	r3, r7, #24
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	6939      	ldr	r1, [r7, #16]
 800d404:	6978      	ldr	r0, [r7, #20]
 800d406:	f7ff fb9c 	bl	800cb42 <_out_rev>
 800d40a:	4603      	mov	r3, r0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3764      	adds	r7, #100	; 0x64
 800d410:	46bd      	mov	sp, r7
 800d412:	bd90      	pop	{r4, r7, pc}
 800d414:	cccccccd 	.word	0xcccccccd
 800d418:	66666667 	.word	0x66666667
 800d41c:	00000000 	.word	0x00000000

0800d420 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	b09d      	sub	sp, #116	; 0x74
 800d426:	af06      	add	r7, sp, #24
 800d428:	61f8      	str	r0, [r7, #28]
 800d42a:	61b9      	str	r1, [r7, #24]
 800d42c:	617a      	str	r2, [r7, #20]
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800d434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d438:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d43c:	f7f3 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d014      	beq.n	800d470 <_etoa+0x50>
 800d446:	f04f 32ff 	mov.w	r2, #4294967295
 800d44a:	4bc9      	ldr	r3, [pc, #804]	; (800d770 <_etoa+0x350>)
 800d44c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d450:	f7f3 fb72 	bl	8000b38 <__aeabi_dcmpgt>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10a      	bne.n	800d470 <_etoa+0x50>
 800d45a:	f04f 32ff 	mov.w	r2, #4294967295
 800d45e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d466:	f7f3 fb49 	bl	8000afc <__aeabi_dcmplt>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d012      	beq.n	800d496 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d474:	9302      	str	r3, [sp, #8]
 800d476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	ed97 0b02 	vldr	d0, [r7, #8]
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	69b9      	ldr	r1, [r7, #24]
 800d48c:	69f8      	ldr	r0, [r7, #28]
 800d48e:	f7ff fd5b 	bl	800cf48 <_ftoa>
 800d492:	4603      	mov	r3, r0
 800d494:	e24f      	b.n	800d936 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800d496:	2301      	movs	r3, #1
 800d498:	461c      	mov	r4, r3
 800d49a:	f04f 0200 	mov.w	r2, #0
 800d49e:	f04f 0300 	mov.w	r3, #0
 800d4a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4a6:	f7f3 fb29 	bl	8000afc <__aeabi_dcmplt>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <_etoa+0x94>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	461c      	mov	r4, r3
 800d4b4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 800d4b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d005      	beq.n	800d4cc <_etoa+0xac>
    value = -value;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	60bb      	str	r3, [r7, #8]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d4ca:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800d4cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d4d8:	2306      	movs	r3, #6
 800d4da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800d4de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d4e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800d4e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d4ea:	f04f 0300 	mov.w	r3, #0
 800d4ee:	f04f 0400 	mov.w	r4, #0
 800d4f2:	0d13      	lsrs	r3, r2, #20
 800d4f4:	2400      	movs	r4, #0
 800d4f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4fe:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800d500:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d504:	f04f 31ff 	mov.w	r1, #4294967295
 800d508:	4a9a      	ldr	r2, [pc, #616]	; (800d774 <_etoa+0x354>)
 800d50a:	ea03 0801 	and.w	r8, r3, r1
 800d50e:	ea04 0902 	and.w	r9, r4, r2
 800d512:	f04f 0100 	mov.w	r1, #0
 800d516:	4a98      	ldr	r2, [pc, #608]	; (800d778 <_etoa+0x358>)
 800d518:	ea48 0301 	orr.w	r3, r8, r1
 800d51c:	ea49 0402 	orr.w	r4, r9, r2
 800d520:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800d524:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d526:	f7f3 f80d 	bl	8000544 <__aeabi_i2d>
 800d52a:	a385      	add	r3, pc, #532	; (adr r3, 800d740 <_etoa+0x320>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f3 f872 	bl	8000618 <__aeabi_dmul>
 800d534:	4603      	mov	r3, r0
 800d536:	460c      	mov	r4, r1
 800d538:	4618      	mov	r0, r3
 800d53a:	4621      	mov	r1, r4
 800d53c:	a382      	add	r3, pc, #520	; (adr r3, 800d748 <_etoa+0x328>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f7f2 feb3 	bl	80002ac <__adddf3>
 800d546:	4603      	mov	r3, r0
 800d548:	460c      	mov	r4, r1
 800d54a:	4698      	mov	r8, r3
 800d54c:	46a1      	mov	r9, r4
 800d54e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	4b89      	ldr	r3, [pc, #548]	; (800d77c <_etoa+0x35c>)
 800d558:	f7f2 fea6 	bl	80002a8 <__aeabi_dsub>
 800d55c:	4603      	mov	r3, r0
 800d55e:	460c      	mov	r4, r1
 800d560:	4618      	mov	r0, r3
 800d562:	4621      	mov	r1, r4
 800d564:	a37a      	add	r3, pc, #488	; (adr r3, 800d750 <_etoa+0x330>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f7f3 f855 	bl	8000618 <__aeabi_dmul>
 800d56e:	4603      	mov	r3, r0
 800d570:	460c      	mov	r4, r1
 800d572:	461a      	mov	r2, r3
 800d574:	4623      	mov	r3, r4
 800d576:	4640      	mov	r0, r8
 800d578:	4649      	mov	r1, r9
 800d57a:	f7f2 fe97 	bl	80002ac <__adddf3>
 800d57e:	4603      	mov	r3, r0
 800d580:	460c      	mov	r4, r1
 800d582:	4618      	mov	r0, r3
 800d584:	4621      	mov	r1, r4
 800d586:	f7f3 faf7 	bl	8000b78 <__aeabi_d2iz>
 800d58a:	4603      	mov	r3, r0
 800d58c:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800d58e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d590:	f7f2 ffd8 	bl	8000544 <__aeabi_i2d>
 800d594:	a370      	add	r3, pc, #448	; (adr r3, 800d758 <_etoa+0x338>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 f83d 	bl	8000618 <__aeabi_dmul>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	4b75      	ldr	r3, [pc, #468]	; (800d780 <_etoa+0x360>)
 800d5ac:	f7f2 fe7e 	bl	80002ac <__adddf3>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	f7f3 fade 	bl	8000b78 <__aeabi_d2iz>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800d5c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d5c2:	f7f2 ffbf 	bl	8000544 <__aeabi_i2d>
 800d5c6:	a366      	add	r3, pc, #408	; (adr r3, 800d760 <_etoa+0x340>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	f7f3 f824 	bl	8000618 <__aeabi_dmul>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	4698      	mov	r8, r3
 800d5d6:	46a1      	mov	r9, r4
 800d5d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5da:	f7f2 ffb3 	bl	8000544 <__aeabi_i2d>
 800d5de:	a362      	add	r3, pc, #392	; (adr r3, 800d768 <_etoa+0x348>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f3 f818 	bl	8000618 <__aeabi_dmul>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	f7f2 fe58 	bl	80002a8 <__aeabi_dsub>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 800d600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d604:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d608:	f7f3 f806 	bl	8000618 <__aeabi_dmul>
 800d60c:	4603      	mov	r3, r0
 800d60e:	460c      	mov	r4, r1
 800d610:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800d614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d616:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d61a:	4619      	mov	r1, r3
 800d61c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800d620:	f04f 0300 	mov.w	r3, #0
 800d624:	f04f 0400 	mov.w	r4, #0
 800d628:	050c      	lsls	r4, r1, #20
 800d62a:	2300      	movs	r3, #0
 800d62c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800d630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d634:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	f7f2 fe36 	bl	80002ac <__adddf3>
 800d640:	4603      	mov	r3, r0
 800d642:	460c      	mov	r4, r1
 800d644:	469a      	mov	sl, r3
 800d646:	46a3      	mov	fp, r4
 800d648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d64c:	f04f 0000 	mov.w	r0, #0
 800d650:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d654:	f7f2 fe28 	bl	80002a8 <__aeabi_dsub>
 800d658:	4603      	mov	r3, r0
 800d65a:	460c      	mov	r4, r1
 800d65c:	e9c7 3400 	strd	r3, r4, [r7]
 800d660:	f04f 0200 	mov.w	r2, #0
 800d664:	4b47      	ldr	r3, [pc, #284]	; (800d784 <_etoa+0x364>)
 800d666:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d66a:	f7f3 f8ff 	bl	800086c <__aeabi_ddiv>
 800d66e:	4603      	mov	r3, r0
 800d670:	460c      	mov	r4, r1
 800d672:	4618      	mov	r0, r3
 800d674:	4621      	mov	r1, r4
 800d676:	f04f 0200 	mov.w	r2, #0
 800d67a:	4b43      	ldr	r3, [pc, #268]	; (800d788 <_etoa+0x368>)
 800d67c:	f7f2 fe16 	bl	80002ac <__adddf3>
 800d680:	4603      	mov	r3, r0
 800d682:	460c      	mov	r4, r1
 800d684:	461a      	mov	r2, r3
 800d686:	4623      	mov	r3, r4
 800d688:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d68c:	f7f3 f8ee 	bl	800086c <__aeabi_ddiv>
 800d690:	4603      	mov	r3, r0
 800d692:	460c      	mov	r4, r1
 800d694:	4618      	mov	r0, r3
 800d696:	4621      	mov	r1, r4
 800d698:	f04f 0200 	mov.w	r2, #0
 800d69c:	4b3b      	ldr	r3, [pc, #236]	; (800d78c <_etoa+0x36c>)
 800d69e:	f7f2 fe05 	bl	80002ac <__adddf3>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d6ae:	f7f3 f8dd 	bl	800086c <__aeabi_ddiv>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6be:	f7f2 fdf5 	bl	80002ac <__adddf3>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	f7f3 f8cd 	bl	800086c <__aeabi_ddiv>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	4621      	mov	r1, r4
 800d6da:	f04f 0200 	mov.w	r2, #0
 800d6de:	4b26      	ldr	r3, [pc, #152]	; (800d778 <_etoa+0x358>)
 800d6e0:	f7f2 fde4 	bl	80002ac <__adddf3>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	4623      	mov	r3, r4
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	f7f2 ff92 	bl	8000618 <__aeabi_dmul>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800d6fc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d700:	461a      	mov	r2, r3
 800d702:	4623      	mov	r3, r4
 800d704:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d708:	f7f3 f9f8 	bl	8000afc <__aeabi_dcmplt>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00d      	beq.n	800d72e <_etoa+0x30e>
    expval--;
 800d712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d714:	3b01      	subs	r3, #1
 800d716:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800d718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	4b19      	ldr	r3, [pc, #100]	; (800d788 <_etoa+0x368>)
 800d722:	f7f3 f8a3 	bl	800086c <__aeabi_ddiv>
 800d726:	4603      	mov	r3, r0
 800d728:	460c      	mov	r4, r1
 800d72a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800d72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d730:	2b63      	cmp	r3, #99	; 0x63
 800d732:	dc2d      	bgt.n	800d790 <_etoa+0x370>
 800d734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d736:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d73a:	db29      	blt.n	800d790 <_etoa+0x370>
 800d73c:	2304      	movs	r3, #4
 800d73e:	e028      	b.n	800d792 <_etoa+0x372>
 800d740:	509f79fb 	.word	0x509f79fb
 800d744:	3fd34413 	.word	0x3fd34413
 800d748:	8b60c8b3 	.word	0x8b60c8b3
 800d74c:	3fc68a28 	.word	0x3fc68a28
 800d750:	636f4361 	.word	0x636f4361
 800d754:	3fd287a7 	.word	0x3fd287a7
 800d758:	0979a371 	.word	0x0979a371
 800d75c:	400a934f 	.word	0x400a934f
 800d760:	bbb55516 	.word	0xbbb55516
 800d764:	40026bb1 	.word	0x40026bb1
 800d768:	fefa39ef 	.word	0xfefa39ef
 800d76c:	3fe62e42 	.word	0x3fe62e42
 800d770:	7fefffff 	.word	0x7fefffff
 800d774:	000fffff 	.word	0x000fffff
 800d778:	3ff00000 	.word	0x3ff00000
 800d77c:	3ff80000 	.word	0x3ff80000
 800d780:	3fe00000 	.word	0x3fe00000
 800d784:	402c0000 	.word	0x402c0000
 800d788:	40240000 	.word	0x40240000
 800d78c:	40180000 	.word	0x40180000
 800d790:	2305      	movs	r3, #5
 800d792:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800d794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d03d      	beq.n	800d81c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800d7a0:	a367      	add	r3, pc, #412	; (adr r3, 800d940 <_etoa+0x520>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7aa:	f7f3 f9bb 	bl	8000b24 <__aeabi_dcmpge>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d024      	beq.n	800d7fe <_etoa+0x3de>
 800d7b4:	a364      	add	r3, pc, #400	; (adr r3, 800d948 <_etoa+0x528>)
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7be:	f7f3 f99d 	bl	8000afc <__aeabi_dcmplt>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d01a      	beq.n	800d7fe <_etoa+0x3de>
      if ((int)prec > expval) {
 800d7c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	da07      	bge.n	800d7e2 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 800d7d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7e0:	e002      	b.n	800d7e8 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800d7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d7f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	657b      	str	r3, [r7, #84]	; 0x54
 800d7fc:	e00e      	b.n	800d81c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800d7fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <_etoa+0x3fc>
 800d806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d80a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d004      	beq.n	800d81c <_etoa+0x3fc>
        --prec;
 800d812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d816:	3b01      	subs	r3, #1
 800d818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800d81c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d820:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800d822:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d828:	429a      	cmp	r2, r3
 800d82a:	d904      	bls.n	800d836 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800d82c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d834:	e001      	b.n	800d83a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800d83a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d83e:	f003 0302 	and.w	r3, r3, #2
 800d842:	2b00      	cmp	r3, #0
 800d844:	d004      	beq.n	800d850 <_etoa+0x430>
 800d846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800d84c:	2300      	movs	r3, #0
 800d84e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800d850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <_etoa+0x44e>
    value /= conv.F;
 800d856:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d85a:	461a      	mov	r2, r3
 800d85c:	4623      	mov	r3, r4
 800d85e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d862:	f7f3 f803 	bl	800086c <__aeabi_ddiv>
 800d866:	4603      	mov	r3, r0
 800d868:	460c      	mov	r4, r1
 800d86a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800d872:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d876:	2b00      	cmp	r3, #0
 800d878:	d004      	beq.n	800d884 <_etoa+0x464>
 800d87a:	68bd      	ldr	r5, [r7, #8]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800d882:	e001      	b.n	800d888 <_etoa+0x468>
 800d884:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800d888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d88c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	ec46 5b10 	vmov	d0, r5, r6
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	69b9      	ldr	r1, [r7, #24]
 800d8a6:	69f8      	ldr	r0, [r7, #28]
 800d8a8:	f7ff fb4e 	bl	800cf48 <_ftoa>
 800d8ac:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800d8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d03f      	beq.n	800d934 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800d8b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8b8:	f003 0320 	and.w	r3, r3, #32
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <_etoa+0x4a4>
 800d8c0:	2045      	movs	r0, #69	; 0x45
 800d8c2:	e000      	b.n	800d8c6 <_etoa+0x4a6>
 800d8c4:	2065      	movs	r0, #101	; 0x65
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	1c53      	adds	r3, r2, #1
 800d8ca:	617b      	str	r3, [r7, #20]
 800d8cc:	69fc      	ldr	r4, [r7, #28]
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	69b9      	ldr	r1, [r7, #24]
 800d8d2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800d8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfb8      	it	lt
 800d8da:	425b      	neglt	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8e0:	0fdb      	lsrs	r3, r3, #31
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8e6:	3a01      	subs	r2, #1
 800d8e8:	2105      	movs	r1, #5
 800d8ea:	9105      	str	r1, [sp, #20]
 800d8ec:	9204      	str	r2, [sp, #16]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	9203      	str	r2, [sp, #12]
 800d8f2:	220a      	movs	r2, #10
 800d8f4:	9202      	str	r2, [sp, #8]
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	9000      	str	r0, [sp, #0]
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	69b9      	ldr	r1, [r7, #24]
 800d900:	69f8      	ldr	r0, [r7, #28]
 800d902:	f7ff fa4a 	bl	800cd9a <_ntoa_long>
 800d906:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800d908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d90c:	f003 0302 	and.w	r3, r3, #2
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00f      	beq.n	800d934 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800d914:	e007      	b.n	800d926 <_etoa+0x506>
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	1c53      	adds	r3, r2, #1
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	69fc      	ldr	r4, [r7, #28]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	69b9      	ldr	r1, [r7, #24]
 800d922:	2020      	movs	r0, #32
 800d924:	47a0      	blx	r4
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d930:	429a      	cmp	r2, r3
 800d932:	d8f0      	bhi.n	800d916 <_etoa+0x4f6>
    }
  }
  return idx;
 800d934:	697b      	ldr	r3, [r7, #20]
}
 800d936:	4618      	mov	r0, r3
 800d938:	375c      	adds	r7, #92	; 0x5c
 800d93a:	46bd      	mov	sp, r7
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	eb1c432d 	.word	0xeb1c432d
 800d944:	3f1a36e2 	.word	0x3f1a36e2
 800d948:	00000000 	.word	0x00000000
 800d94c:	412e8480 	.word	0x412e8480

0800d950 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800d950:	b5b0      	push	{r4, r5, r7, lr}
 800d952:	b0a0      	sub	sp, #128	; 0x80
 800d954:	af0a      	add	r7, sp, #40	; 0x28
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	f040 8492 	bne.w	800e28e <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800d96a:	4ba0      	ldr	r3, [pc, #640]	; (800dbec <_vsnprintf+0x29c>)
 800d96c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800d96e:	f000 bc8e 	b.w	800e28e <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b25      	cmp	r3, #37	; 0x25
 800d978:	d00d      	beq.n	800d996 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	7818      	ldrb	r0, [r3, #0]
 800d97e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d980:	1c53      	adds	r3, r2, #1
 800d982:	647b      	str	r3, [r7, #68]	; 0x44
 800d984:	68fc      	ldr	r4, [r7, #12]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68b9      	ldr	r1, [r7, #8]
 800d98a:	47a0      	blx	r4
      format++;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	603b      	str	r3, [r7, #0]
      continue;
 800d992:	f000 bc7c 	b.w	800e28e <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	3301      	adds	r3, #1
 800d99a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800d99c:	2300      	movs	r3, #0
 800d99e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	3b20      	subs	r3, #32
 800d9a6:	2b10      	cmp	r3, #16
 800d9a8:	d856      	bhi.n	800da58 <_vsnprintf+0x108>
 800d9aa:	a201      	add	r2, pc, #4	; (adr r2, 800d9b0 <_vsnprintf+0x60>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800da31 	.word	0x0800da31
 800d9b4:	0800da59 	.word	0x0800da59
 800d9b8:	0800da59 	.word	0x0800da59
 800d9bc:	0800da45 	.word	0x0800da45
 800d9c0:	0800da59 	.word	0x0800da59
 800d9c4:	0800da59 	.word	0x0800da59
 800d9c8:	0800da59 	.word	0x0800da59
 800d9cc:	0800da59 	.word	0x0800da59
 800d9d0:	0800da59 	.word	0x0800da59
 800d9d4:	0800da59 	.word	0x0800da59
 800d9d8:	0800da59 	.word	0x0800da59
 800d9dc:	0800da1d 	.word	0x0800da1d
 800d9e0:	0800da59 	.word	0x0800da59
 800d9e4:	0800da09 	.word	0x0800da09
 800d9e8:	0800da59 	.word	0x0800da59
 800d9ec:	0800da59 	.word	0x0800da59
 800d9f0:	0800d9f5 	.word	0x0800d9f5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f6:	f043 0301 	orr.w	r3, r3, #1
 800d9fa:	657b      	str	r3, [r7, #84]	; 0x54
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	3301      	adds	r3, #1
 800da00:	603b      	str	r3, [r7, #0]
 800da02:	2301      	movs	r3, #1
 800da04:	64bb      	str	r3, [r7, #72]	; 0x48
 800da06:	e02a      	b.n	800da5e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800da08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da0a:	f043 0302 	orr.w	r3, r3, #2
 800da0e:	657b      	str	r3, [r7, #84]	; 0x54
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	3301      	adds	r3, #1
 800da14:	603b      	str	r3, [r7, #0]
 800da16:	2301      	movs	r3, #1
 800da18:	64bb      	str	r3, [r7, #72]	; 0x48
 800da1a:	e020      	b.n	800da5e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800da1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da1e:	f043 0304 	orr.w	r3, r3, #4
 800da22:	657b      	str	r3, [r7, #84]	; 0x54
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	603b      	str	r3, [r7, #0]
 800da2a:	2301      	movs	r3, #1
 800da2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800da2e:	e016      	b.n	800da5e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800da30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da32:	f043 0308 	orr.w	r3, r3, #8
 800da36:	657b      	str	r3, [r7, #84]	; 0x54
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	3301      	adds	r3, #1
 800da3c:	603b      	str	r3, [r7, #0]
 800da3e:	2301      	movs	r3, #1
 800da40:	64bb      	str	r3, [r7, #72]	; 0x48
 800da42:	e00c      	b.n	800da5e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800da44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da46:	f043 0310 	orr.w	r3, r3, #16
 800da4a:	657b      	str	r3, [r7, #84]	; 0x54
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	3301      	adds	r3, #1
 800da50:	603b      	str	r3, [r7, #0]
 800da52:	2301      	movs	r3, #1
 800da54:	64bb      	str	r3, [r7, #72]	; 0x48
 800da56:	e002      	b.n	800da5e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800da58:	2300      	movs	r3, #0
 800da5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800da5c:	bf00      	nop
      }
    } while (n);
 800da5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da60:	2b00      	cmp	r3, #0
 800da62:	d19d      	bne.n	800d9a0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800da64:	2300      	movs	r3, #0
 800da66:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff f82d 	bl	800cacc <_is_digit>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <_vsnprintf+0x134>
      width = _atoi(&format);
 800da78:	463b      	mov	r3, r7
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff f83d 	bl	800cafa <_atoi>
 800da80:	6538      	str	r0, [r7, #80]	; 0x50
 800da82:	e018      	b.n	800dab6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b2a      	cmp	r3, #42	; 0x2a
 800da8a:	d114      	bne.n	800dab6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800da8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da8e:	1d1a      	adds	r2, r3, #4
 800da90:	66ba      	str	r2, [r7, #104]	; 0x68
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	da07      	bge.n	800daac <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800da9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da9e:	f043 0302 	orr.w	r3, r3, #2
 800daa2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa6:	425b      	negs	r3, r3
 800daa8:	653b      	str	r3, [r7, #80]	; 0x50
 800daaa:	e001      	b.n	800dab0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	3301      	adds	r3, #1
 800dab4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b2e      	cmp	r3, #46	; 0x2e
 800dac0:	d124      	bne.n	800db0c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800dac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dac8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	3301      	adds	r3, #1
 800dace:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fe fff9 	bl	800cacc <_is_digit>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800dae0:	463b      	mov	r3, r7
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff f809 	bl	800cafa <_atoi>
 800dae8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800daea:	e00f      	b.n	800db0c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b2a      	cmp	r3, #42	; 0x2a
 800daf2:	d10b      	bne.n	800db0c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800daf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daf6:	1d1a      	adds	r2, r3, #4
 800daf8:	66ba      	str	r2, [r7, #104]	; 0x68
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db04:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	3301      	adds	r3, #1
 800db0a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	3b68      	subs	r3, #104	; 0x68
 800db12:	2b12      	cmp	r3, #18
 800db14:	d866      	bhi.n	800dbe4 <_vsnprintf+0x294>
 800db16:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <_vsnprintf+0x1cc>)
 800db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1c:	0800db8f 	.word	0x0800db8f
 800db20:	0800dbe5 	.word	0x0800dbe5
 800db24:	0800dbc5 	.word	0x0800dbc5
 800db28:	0800dbe5 	.word	0x0800dbe5
 800db2c:	0800db69 	.word	0x0800db69
 800db30:	0800dbe5 	.word	0x0800dbe5
 800db34:	0800dbe5 	.word	0x0800dbe5
 800db38:	0800dbe5 	.word	0x0800dbe5
 800db3c:	0800dbe5 	.word	0x0800dbe5
 800db40:	0800dbe5 	.word	0x0800dbe5
 800db44:	0800dbe5 	.word	0x0800dbe5
 800db48:	0800dbe5 	.word	0x0800dbe5
 800db4c:	0800dbb5 	.word	0x0800dbb5
 800db50:	0800dbe5 	.word	0x0800dbe5
 800db54:	0800dbe5 	.word	0x0800dbe5
 800db58:	0800dbe5 	.word	0x0800dbe5
 800db5c:	0800dbe5 	.word	0x0800dbe5
 800db60:	0800dbe5 	.word	0x0800dbe5
 800db64:	0800dbd5 	.word	0x0800dbd5
      case 'l' :
        flags |= FLAGS_LONG;
 800db68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db6e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	3301      	adds	r3, #1
 800db74:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b6c      	cmp	r3, #108	; 0x6c
 800db7c:	d134      	bne.n	800dbe8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800db7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800db84:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	603b      	str	r3, [r7, #0]
        }
        break;
 800db8c:	e02c      	b.n	800dbe8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800db8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b68      	cmp	r3, #104	; 0x68
 800dba2:	d125      	bne.n	800dbf0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800dba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbaa:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	603b      	str	r3, [r7, #0]
        }
        break;
 800dbb2:	e01d      	b.n	800dbf0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800dbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	603b      	str	r3, [r7, #0]
        break;
 800dbc2:	e016      	b.n	800dbf2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800dbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	603b      	str	r3, [r7, #0]
        break;
 800dbd2:	e00e      	b.n	800dbf2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800dbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbda:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	603b      	str	r3, [r7, #0]
        break;
 800dbe2:	e006      	b.n	800dbf2 <_vsnprintf+0x2a2>
      default :
        break;
 800dbe4:	bf00      	nop
 800dbe6:	e004      	b.n	800dbf2 <_vsnprintf+0x2a2>
        break;
 800dbe8:	bf00      	nop
 800dbea:	e002      	b.n	800dbf2 <_vsnprintf+0x2a2>
 800dbec:	0800ca77 	.word	0x0800ca77
        break;
 800dbf0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	3b25      	subs	r3, #37	; 0x25
 800dbf8:	2b53      	cmp	r3, #83	; 0x53
 800dbfa:	f200 833b 	bhi.w	800e274 <_vsnprintf+0x924>
 800dbfe:	a201      	add	r2, pc, #4	; (adr r2, 800dc04 <_vsnprintf+0x2b4>)
 800dc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc04:	0800e25d 	.word	0x0800e25d
 800dc08:	0800e275 	.word	0x0800e275
 800dc0c:	0800e275 	.word	0x0800e275
 800dc10:	0800e275 	.word	0x0800e275
 800dc14:	0800e275 	.word	0x0800e275
 800dc18:	0800e275 	.word	0x0800e275
 800dc1c:	0800e275 	.word	0x0800e275
 800dc20:	0800e275 	.word	0x0800e275
 800dc24:	0800e275 	.word	0x0800e275
 800dc28:	0800e275 	.word	0x0800e275
 800dc2c:	0800e275 	.word	0x0800e275
 800dc30:	0800e275 	.word	0x0800e275
 800dc34:	0800e275 	.word	0x0800e275
 800dc38:	0800e275 	.word	0x0800e275
 800dc3c:	0800e275 	.word	0x0800e275
 800dc40:	0800e275 	.word	0x0800e275
 800dc44:	0800e275 	.word	0x0800e275
 800dc48:	0800e275 	.word	0x0800e275
 800dc4c:	0800e275 	.word	0x0800e275
 800dc50:	0800e275 	.word	0x0800e275
 800dc54:	0800e275 	.word	0x0800e275
 800dc58:	0800e275 	.word	0x0800e275
 800dc5c:	0800e275 	.word	0x0800e275
 800dc60:	0800e275 	.word	0x0800e275
 800dc64:	0800e275 	.word	0x0800e275
 800dc68:	0800e275 	.word	0x0800e275
 800dc6c:	0800e275 	.word	0x0800e275
 800dc70:	0800e275 	.word	0x0800e275
 800dc74:	0800e275 	.word	0x0800e275
 800dc78:	0800e275 	.word	0x0800e275
 800dc7c:	0800e275 	.word	0x0800e275
 800dc80:	0800e275 	.word	0x0800e275
 800dc84:	0800e02d 	.word	0x0800e02d
 800dc88:	0800dfe1 	.word	0x0800dfe1
 800dc8c:	0800e02d 	.word	0x0800e02d
 800dc90:	0800e275 	.word	0x0800e275
 800dc94:	0800e275 	.word	0x0800e275
 800dc98:	0800e275 	.word	0x0800e275
 800dc9c:	0800e275 	.word	0x0800e275
 800dca0:	0800e275 	.word	0x0800e275
 800dca4:	0800e275 	.word	0x0800e275
 800dca8:	0800e275 	.word	0x0800e275
 800dcac:	0800e275 	.word	0x0800e275
 800dcb0:	0800e275 	.word	0x0800e275
 800dcb4:	0800e275 	.word	0x0800e275
 800dcb8:	0800e275 	.word	0x0800e275
 800dcbc:	0800e275 	.word	0x0800e275
 800dcc0:	0800e275 	.word	0x0800e275
 800dcc4:	0800e275 	.word	0x0800e275
 800dcc8:	0800e275 	.word	0x0800e275
 800dccc:	0800e275 	.word	0x0800e275
 800dcd0:	0800dd55 	.word	0x0800dd55
 800dcd4:	0800e275 	.word	0x0800e275
 800dcd8:	0800e275 	.word	0x0800e275
 800dcdc:	0800e275 	.word	0x0800e275
 800dce0:	0800e275 	.word	0x0800e275
 800dce4:	0800e275 	.word	0x0800e275
 800dce8:	0800e275 	.word	0x0800e275
 800dcec:	0800e275 	.word	0x0800e275
 800dcf0:	0800e275 	.word	0x0800e275
 800dcf4:	0800e275 	.word	0x0800e275
 800dcf8:	0800dd55 	.word	0x0800dd55
 800dcfc:	0800e099 	.word	0x0800e099
 800dd00:	0800dd55 	.word	0x0800dd55
 800dd04:	0800e02d 	.word	0x0800e02d
 800dd08:	0800dfe1 	.word	0x0800dfe1
 800dd0c:	0800e02d 	.word	0x0800e02d
 800dd10:	0800e275 	.word	0x0800e275
 800dd14:	0800dd55 	.word	0x0800dd55
 800dd18:	0800e275 	.word	0x0800e275
 800dd1c:	0800e275 	.word	0x0800e275
 800dd20:	0800e275 	.word	0x0800e275
 800dd24:	0800e275 	.word	0x0800e275
 800dd28:	0800e275 	.word	0x0800e275
 800dd2c:	0800dd55 	.word	0x0800dd55
 800dd30:	0800e1d1 	.word	0x0800e1d1
 800dd34:	0800e275 	.word	0x0800e275
 800dd38:	0800e275 	.word	0x0800e275
 800dd3c:	0800e10d 	.word	0x0800e10d
 800dd40:	0800e275 	.word	0x0800e275
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800e275 	.word	0x0800e275
 800dd4c:	0800e275 	.word	0x0800e275
 800dd50:	0800dd55 	.word	0x0800dd55
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b78      	cmp	r3, #120	; 0x78
 800dd5a:	d003      	beq.n	800dd64 <_vsnprintf+0x414>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b58      	cmp	r3, #88	; 0x58
 800dd62:	d102      	bne.n	800dd6a <_vsnprintf+0x41a>
          base = 16U;
 800dd64:	2310      	movs	r3, #16
 800dd66:	643b      	str	r3, [r7, #64]	; 0x40
 800dd68:	e013      	b.n	800dd92 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b6f      	cmp	r3, #111	; 0x6f
 800dd70:	d102      	bne.n	800dd78 <_vsnprintf+0x428>
          base =  8U;
 800dd72:	2308      	movs	r3, #8
 800dd74:	643b      	str	r3, [r7, #64]	; 0x40
 800dd76:	e00c      	b.n	800dd92 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b62      	cmp	r3, #98	; 0x62
 800dd7e:	d102      	bne.n	800dd86 <_vsnprintf+0x436>
          base =  2U;
 800dd80:	2302      	movs	r3, #2
 800dd82:	643b      	str	r3, [r7, #64]	; 0x40
 800dd84:	e005      	b.n	800dd92 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800dd86:	230a      	movs	r3, #10
 800dd88:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800dd8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd8c:	f023 0310 	bic.w	r3, r3, #16
 800dd90:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b58      	cmp	r3, #88	; 0x58
 800dd98:	d103      	bne.n	800dda2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800dd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd9c:	f043 0320 	orr.w	r3, r3, #32
 800dda0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	2b69      	cmp	r3, #105	; 0x69
 800dda8:	d007      	beq.n	800ddba <_vsnprintf+0x46a>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b64      	cmp	r3, #100	; 0x64
 800ddb0:	d003      	beq.n	800ddba <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800ddb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddb4:	f023 030c 	bic.w	r3, r3, #12
 800ddb8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800ddba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800ddc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddc6:	f023 0301 	bic.w	r3, r3, #1
 800ddca:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b69      	cmp	r3, #105	; 0x69
 800ddd2:	d004      	beq.n	800ddde <_vsnprintf+0x48e>
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b64      	cmp	r3, #100	; 0x64
 800ddda:	f040 808d 	bne.w	800def8 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800ddde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dde0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d02e      	beq.n	800de46 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800dde8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddea:	3307      	adds	r3, #7
 800ddec:	f023 0307 	bic.w	r3, r3, #7
 800ddf0:	f103 0208 	add.w	r2, r3, #8
 800ddf4:	66ba      	str	r2, [r7, #104]	; 0x68
 800ddf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ddfa:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ddfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f174 0200 	sbcs.w	r2, r4, #0
 800de08:	da02      	bge.n	800de10 <_vsnprintf+0x4c0>
 800de0a:	425b      	negs	r3, r3
 800de0c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800de10:	4619      	mov	r1, r3
 800de12:	4622      	mov	r2, r4
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	0fdb      	lsrs	r3, r3, #31
 800de18:	b2d8      	uxtb	r0, r3
 800de1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de1c:	f04f 0400 	mov.w	r4, #0
 800de20:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800de22:	9508      	str	r5, [sp, #32]
 800de24:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800de26:	9507      	str	r5, [sp, #28]
 800de28:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800de2a:	9506      	str	r5, [sp, #24]
 800de2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800de30:	9002      	str	r0, [sp, #8]
 800de32:	e9cd 1200 	strd	r1, r2, [sp]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de3a:	68b9      	ldr	r1, [r7, #8]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f7ff f813 	bl	800ce68 <_ntoa_long_long>
 800de42:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800de44:	e0c8      	b.n	800dfd8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800de46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01e      	beq.n	800de8e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800de50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de52:	1d1a      	adds	r2, r3, #4
 800de54:	66ba      	str	r2, [r7, #104]	; 0x68
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	bfb8      	it	lt
 800de60:	425b      	neglt	r3, r3
 800de62:	4619      	mov	r1, r3
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	0fdb      	lsrs	r3, r3, #31
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de6c:	9205      	str	r2, [sp, #20]
 800de6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de70:	9204      	str	r2, [sp, #16]
 800de72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de74:	9203      	str	r2, [sp, #12]
 800de76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de78:	9202      	str	r2, [sp, #8]
 800de7a:	9301      	str	r3, [sp, #4]
 800de7c:	9100      	str	r1, [sp, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7fe ff88 	bl	800cd9a <_ntoa_long>
 800de8a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800de8c:	e0a4      	b.n	800dfd8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800de8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <_vsnprintf+0x554>
 800de98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	66ba      	str	r2, [r7, #104]	; 0x68
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	e00e      	b.n	800dec2 <_vsnprintf+0x572>
 800dea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d005      	beq.n	800deba <_vsnprintf+0x56a>
 800deae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800deb0:	1d1a      	adds	r2, r3, #4
 800deb2:	66ba      	str	r2, [r7, #104]	; 0x68
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	b21b      	sxth	r3, r3
 800deb8:	e003      	b.n	800dec2 <_vsnprintf+0x572>
 800deba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800debc:	1d1a      	adds	r2, r3, #4
 800debe:	66ba      	str	r2, [r7, #104]	; 0x68
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bfb8      	it	lt
 800deca:	425b      	neglt	r3, r3
 800decc:	4619      	mov	r1, r3
 800dece:	6a3b      	ldr	r3, [r7, #32]
 800ded0:	0fdb      	lsrs	r3, r3, #31
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ded6:	9205      	str	r2, [sp, #20]
 800ded8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deda:	9204      	str	r2, [sp, #16]
 800dedc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dede:	9203      	str	r2, [sp, #12]
 800dee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dee2:	9202      	str	r2, [sp, #8]
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	9100      	str	r1, [sp, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deec:	68b9      	ldr	r1, [r7, #8]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7fe ff53 	bl	800cd9a <_ntoa_long>
 800def4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800def6:	e06f      	b.n	800dfd8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800def8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800defa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800defe:	2b00      	cmp	r3, #0
 800df00:	d020      	beq.n	800df44 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800df02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df04:	3307      	adds	r3, #7
 800df06:	f023 0307 	bic.w	r3, r3, #7
 800df0a:	f103 0208 	add.w	r2, r3, #8
 800df0e:	66ba      	str	r2, [r7, #104]	; 0x68
 800df10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800df14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df16:	4611      	mov	r1, r2
 800df18:	f04f 0200 	mov.w	r2, #0
 800df1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df1e:	9008      	str	r0, [sp, #32]
 800df20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800df22:	9007      	str	r0, [sp, #28]
 800df24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df26:	9006      	str	r0, [sp, #24]
 800df28:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800df2c:	2200      	movs	r2, #0
 800df2e:	9202      	str	r2, [sp, #8]
 800df30:	e9cd 3400 	strd	r3, r4, [sp]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df38:	68b9      	ldr	r1, [r7, #8]
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7fe ff94 	bl	800ce68 <_ntoa_long_long>
 800df40:	6478      	str	r0, [r7, #68]	; 0x44
 800df42:	e049      	b.n	800dfd8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800df44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d016      	beq.n	800df7c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800df4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df50:	1d1a      	adds	r2, r3, #4
 800df52:	66ba      	str	r2, [r7, #104]	; 0x68
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df58:	9205      	str	r2, [sp, #20]
 800df5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df5c:	9204      	str	r2, [sp, #16]
 800df5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df60:	9203      	str	r2, [sp, #12]
 800df62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df64:	9202      	str	r2, [sp, #8]
 800df66:	2200      	movs	r2, #0
 800df68:	9201      	str	r2, [sp, #4]
 800df6a:	9300      	str	r3, [sp, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df70:	68b9      	ldr	r1, [r7, #8]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7fe ff11 	bl	800cd9a <_ntoa_long>
 800df78:	6478      	str	r0, [r7, #68]	; 0x44
 800df7a:	e02d      	b.n	800dfd8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800df7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <_vsnprintf+0x642>
 800df86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df88:	1d1a      	adds	r2, r3, #4
 800df8a:	66ba      	str	r2, [r7, #104]	; 0x68
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	e00e      	b.n	800dfb0 <_vsnprintf+0x660>
 800df92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <_vsnprintf+0x658>
 800df9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	66ba      	str	r2, [r7, #104]	; 0x68
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	e003      	b.n	800dfb0 <_vsnprintf+0x660>
 800dfa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfaa:	1d1a      	adds	r2, r3, #4
 800dfac:	66ba      	str	r2, [r7, #104]	; 0x68
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800dfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb4:	9305      	str	r3, [sp, #20]
 800dfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfbc:	9303      	str	r3, [sp, #12]
 800dfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfc0:	9302      	str	r3, [sp, #8]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9301      	str	r3, [sp, #4]
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfce:	68b9      	ldr	r1, [r7, #8]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7fe fee2 	bl	800cd9a <_ntoa_long>
 800dfd6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	603b      	str	r3, [r7, #0]
        break;
 800dfde:	e156      	b.n	800e28e <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b46      	cmp	r3, #70	; 0x46
 800dfe6:	d103      	bne.n	800dff0 <_vsnprintf+0x6a0>
 800dfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfea:	f043 0320 	orr.w	r3, r3, #32
 800dfee:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800dff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dff2:	3307      	adds	r3, #7
 800dff4:	f023 0307 	bic.w	r3, r3, #7
 800dff8:	f103 0208 	add.w	r2, r3, #8
 800dffc:	66ba      	str	r2, [r7, #104]	; 0x68
 800dffe:	ed93 7b00 	vldr	d7, [r3]
 800e002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e004:	9302      	str	r3, [sp, #8]
 800e006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	eeb0 0a47 	vmov.f32	s0, s14
 800e012:	eef0 0a67 	vmov.f32	s1, s15
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e01a:	68b9      	ldr	r1, [r7, #8]
 800e01c:	68f8      	ldr	r0, [r7, #12]
 800e01e:	f7fe ff93 	bl	800cf48 <_ftoa>
 800e022:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	3301      	adds	r3, #1
 800e028:	603b      	str	r3, [r7, #0]
        break;
 800e02a:	e130      	b.n	800e28e <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2b67      	cmp	r3, #103	; 0x67
 800e032:	d003      	beq.n	800e03c <_vsnprintf+0x6ec>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b47      	cmp	r3, #71	; 0x47
 800e03a:	d103      	bne.n	800e044 <_vsnprintf+0x6f4>
 800e03c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e03e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e042:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b45      	cmp	r3, #69	; 0x45
 800e04a:	d003      	beq.n	800e054 <_vsnprintf+0x704>
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b47      	cmp	r3, #71	; 0x47
 800e052:	d103      	bne.n	800e05c <_vsnprintf+0x70c>
 800e054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e056:	f043 0320 	orr.w	r3, r3, #32
 800e05a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e05c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e05e:	3307      	adds	r3, #7
 800e060:	f023 0307 	bic.w	r3, r3, #7
 800e064:	f103 0208 	add.w	r2, r3, #8
 800e068:	66ba      	str	r2, [r7, #104]	; 0x68
 800e06a:	ed93 7b00 	vldr	d7, [r3]
 800e06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e070:	9302      	str	r3, [sp, #8]
 800e072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	eeb0 0a47 	vmov.f32	s0, s14
 800e07e:	eef0 0a67 	vmov.f32	s1, s15
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e086:	68b9      	ldr	r1, [r7, #8]
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f7ff f9c9 	bl	800d420 <_etoa>
 800e08e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	3301      	adds	r3, #1
 800e094:	603b      	str	r3, [r7, #0]
        break;
 800e096:	e0fa      	b.n	800e28e <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800e098:	2301      	movs	r3, #1
 800e09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800e09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10e      	bne.n	800e0c4 <_vsnprintf+0x774>
          while (l++ < width) {
 800e0a6:	e007      	b.n	800e0b8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 800e0a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0aa:	1c53      	adds	r3, r2, #1
 800e0ac:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ae:	68fc      	ldr	r4, [r7, #12]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68b9      	ldr	r1, [r7, #8]
 800e0b4:	2020      	movs	r0, #32
 800e0b6:	47a0      	blx	r4
          while (l++ < width) {
 800e0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e0be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d8f1      	bhi.n	800e0a8 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800e0c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	66ba      	str	r2, [r7, #104]	; 0x68
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	b2d8      	uxtb	r0, r3
 800e0ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0d0:	1c53      	adds	r3, r2, #1
 800e0d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e0d4:	68fc      	ldr	r4, [r7, #12]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800e0dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0de:	f003 0302 	and.w	r3, r3, #2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00e      	beq.n	800e104 <_vsnprintf+0x7b4>
          while (l++ < width) {
 800e0e6:	e007      	b.n	800e0f8 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 800e0e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0ea:	1c53      	adds	r3, r2, #1
 800e0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ee:	68fc      	ldr	r4, [r7, #12]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	2020      	movs	r0, #32
 800e0f6:	47a0      	blx	r4
          while (l++ < width) {
 800e0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e0fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e100:	429a      	cmp	r2, r3
 800e102:	d8f1      	bhi.n	800e0e8 <_vsnprintf+0x798>
          }
        }
        format++;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	3301      	adds	r3, #1
 800e108:	603b      	str	r3, [r7, #0]
        break;
 800e10a:	e0c0      	b.n	800e28e <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800e10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e10e:	1d1a      	adds	r2, r3, #4
 800e110:	66ba      	str	r2, [r7, #104]	; 0x68
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800e116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d001      	beq.n	800e120 <_vsnprintf+0x7d0>
 800e11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e11e:	e001      	b.n	800e124 <_vsnprintf+0x7d4>
 800e120:	f04f 33ff 	mov.w	r3, #4294967295
 800e124:	4619      	mov	r1, r3
 800e126:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e128:	f7fe fcb3 	bl	800ca92 <_strnlen_s>
 800e12c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800e12e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e134:	2b00      	cmp	r3, #0
 800e136:	d005      	beq.n	800e144 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 800e138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e13c:	4293      	cmp	r3, r2
 800e13e:	bf28      	it	cs
 800e140:	4613      	movcs	r3, r2
 800e142:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800e144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e146:	f003 0302 	and.w	r3, r3, #2
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d11a      	bne.n	800e184 <_vsnprintf+0x834>
          while (l++ < width) {
 800e14e:	e007      	b.n	800e160 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 800e150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e152:	1c53      	adds	r3, r2, #1
 800e154:	647b      	str	r3, [r7, #68]	; 0x44
 800e156:	68fc      	ldr	r4, [r7, #12]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68b9      	ldr	r1, [r7, #8]
 800e15c:	2020      	movs	r0, #32
 800e15e:	47a0      	blx	r4
          while (l++ < width) {
 800e160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	637a      	str	r2, [r7, #52]	; 0x34
 800e166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e168:	429a      	cmp	r2, r3
 800e16a:	d8f1      	bhi.n	800e150 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e16c:	e00a      	b.n	800e184 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	1c5a      	adds	r2, r3, #1
 800e172:	63ba      	str	r2, [r7, #56]	; 0x38
 800e174:	7818      	ldrb	r0, [r3, #0]
 800e176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e178:	1c53      	adds	r3, r2, #1
 800e17a:	647b      	str	r3, [r7, #68]	; 0x44
 800e17c:	68fc      	ldr	r4, [r7, #12]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d009      	beq.n	800e1a0 <_vsnprintf+0x850>
 800e18c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e18e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0eb      	beq.n	800e16e <_vsnprintf+0x81e>
 800e196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e198:	1e5a      	subs	r2, r3, #1
 800e19a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1e6      	bne.n	800e16e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800e1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00e      	beq.n	800e1c8 <_vsnprintf+0x878>
          while (l++ < width) {
 800e1aa:	e007      	b.n	800e1bc <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 800e1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ae:	1c53      	adds	r3, r2, #1
 800e1b0:	647b      	str	r3, [r7, #68]	; 0x44
 800e1b2:	68fc      	ldr	r4, [r7, #12]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	2020      	movs	r0, #32
 800e1ba:	47a0      	blx	r4
          while (l++ < width) {
 800e1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	637a      	str	r2, [r7, #52]	; 0x34
 800e1c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d8f1      	bhi.n	800e1ac <_vsnprintf+0x85c>
          }
        }
        format++;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	603b      	str	r3, [r7, #0]
        break;
 800e1ce:	e05e      	b.n	800e28e <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800e1d0:	2308      	movs	r3, #8
 800e1d2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800e1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1d6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e1da:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800e1dc:	2300      	movs	r3, #0
 800e1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800e1e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d01d      	beq.n	800e226 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800e1ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1ec:	1d1a      	adds	r2, r3, #4
 800e1ee:	66ba      	str	r2, [r7, #104]	; 0x68
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f04f 0400 	mov.w	r4, #0
 800e1f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1f8:	9208      	str	r2, [sp, #32]
 800e1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1fc:	9207      	str	r2, [sp, #28]
 800e1fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e200:	9206      	str	r2, [sp, #24]
 800e202:	f04f 0110 	mov.w	r1, #16
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e20e:	2200      	movs	r2, #0
 800e210:	9202      	str	r2, [sp, #8]
 800e212:	e9cd 3400 	strd	r3, r4, [sp]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e21a:	68b9      	ldr	r1, [r7, #8]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7fe fe23 	bl	800ce68 <_ntoa_long_long>
 800e222:	6478      	str	r0, [r7, #68]	; 0x44
 800e224:	e016      	b.n	800e254 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800e226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e228:	1d1a      	adds	r2, r3, #4
 800e22a:	66ba      	str	r2, [r7, #104]	; 0x68
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e232:	9305      	str	r3, [sp, #20]
 800e234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e236:	9304      	str	r3, [sp, #16]
 800e238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23a:	9303      	str	r3, [sp, #12]
 800e23c:	2310      	movs	r3, #16
 800e23e:	9302      	str	r3, [sp, #8]
 800e240:	2300      	movs	r3, #0
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	9200      	str	r2, [sp, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7fe fda4 	bl	800cd9a <_ntoa_long>
 800e252:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	3301      	adds	r3, #1
 800e258:	603b      	str	r3, [r7, #0]
        break;
 800e25a:	e018      	b.n	800e28e <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800e25c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e25e:	1c53      	adds	r3, r2, #1
 800e260:	647b      	str	r3, [r7, #68]	; 0x44
 800e262:	68fc      	ldr	r4, [r7, #12]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68b9      	ldr	r1, [r7, #8]
 800e268:	2025      	movs	r0, #37	; 0x25
 800e26a:	47a0      	blx	r4
        format++;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	3301      	adds	r3, #1
 800e270:	603b      	str	r3, [r7, #0]
        break;
 800e272:	e00c      	b.n	800e28e <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	7818      	ldrb	r0, [r3, #0]
 800e278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e27a:	1c53      	adds	r3, r2, #1
 800e27c:	647b      	str	r3, [r7, #68]	; 0x44
 800e27e:	68fc      	ldr	r4, [r7, #12]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	47a0      	blx	r4
        format++;
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	3301      	adds	r3, #1
 800e28a:	603b      	str	r3, [r7, #0]
        break;
 800e28c:	bf00      	nop
  while (*format)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	f47f ab6d 	bne.w	800d972 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800e298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d302      	bcc.n	800e2a6 <_vsnprintf+0x956>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	1e5a      	subs	r2, r3, #1
 800e2a4:	e000      	b.n	800e2a8 <_vsnprintf+0x958>
 800e2a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2a8:	68fc      	ldr	r4, [r7, #12]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	68b9      	ldr	r1, [r7, #8]
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800e2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3758      	adds	r7, #88	; 0x58
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bdb0      	pop	{r4, r5, r7, pc}

0800e2bc <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800e2bc:	b40c      	push	{r2, r3}
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b086      	sub	sp, #24
 800e2c2:	af02      	add	r7, sp, #8
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800e2c8:	f107 031c 	add.w	r3, r7, #28
 800e2cc:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	4805      	ldr	r0, [pc, #20]	; (800e2f0 <snprintf_+0x34>)
 800e2da:	f7ff fb39 	bl	800d950 <_vsnprintf>
 800e2de:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2ec:	b002      	add	sp, #8
 800e2ee:	4770      	bx	lr
 800e2f0:	0800ca49 	.word	0x0800ca49

0800e2f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	4b12      	ldr	r3, [pc, #72]	; (800e348 <HAL_MspInit+0x54>)
 800e300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e302:	4a11      	ldr	r2, [pc, #68]	; (800e348 <HAL_MspInit+0x54>)
 800e304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e308:	6453      	str	r3, [r2, #68]	; 0x44
 800e30a:	4b0f      	ldr	r3, [pc, #60]	; (800e348 <HAL_MspInit+0x54>)
 800e30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e312:	607b      	str	r3, [r7, #4]
 800e314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e316:	2300      	movs	r3, #0
 800e318:	603b      	str	r3, [r7, #0]
 800e31a:	4b0b      	ldr	r3, [pc, #44]	; (800e348 <HAL_MspInit+0x54>)
 800e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e31e:	4a0a      	ldr	r2, [pc, #40]	; (800e348 <HAL_MspInit+0x54>)
 800e320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e324:	6413      	str	r3, [r2, #64]	; 0x40
 800e326:	4b08      	ldr	r3, [pc, #32]	; (800e348 <HAL_MspInit+0x54>)
 800e328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e32e:	603b      	str	r3, [r7, #0]
 800e330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e332:	2200      	movs	r2, #0
 800e334:	210f      	movs	r1, #15
 800e336:	f06f 0001 	mvn.w	r0, #1
 800e33a:	f7f2 ff82 	bl	8001242 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e33e:	bf00      	nop
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	40023800 	.word	0x40023800

0800e34c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08c      	sub	sp, #48	; 0x30
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e354:	f107 031c 	add.w	r3, r7, #28
 800e358:	2200      	movs	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	609a      	str	r2, [r3, #8]
 800e360:	60da      	str	r2, [r3, #12]
 800e362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a51      	ldr	r2, [pc, #324]	; (800e4b0 <HAL_I2C_MspInit+0x164>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d16a      	bne.n	800e444 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e36e:	2300      	movs	r3, #0
 800e370:	61bb      	str	r3, [r7, #24]
 800e372:	4b50      	ldr	r3, [pc, #320]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e376:	4a4f      	ldr	r2, [pc, #316]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e378:	f043 0302 	orr.w	r3, r3, #2
 800e37c:	6313      	str	r3, [r2, #48]	; 0x30
 800e37e:	4b4d      	ldr	r3, [pc, #308]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	61bb      	str	r3, [r7, #24]
 800e388:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e38a:	23c0      	movs	r3, #192	; 0xc0
 800e38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e38e:	2312      	movs	r3, #18
 800e390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e392:	2301      	movs	r3, #1
 800e394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e396:	2303      	movs	r3, #3
 800e398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e39a:	2304      	movs	r3, #4
 800e39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e39e:	f107 031c 	add.w	r3, r7, #28
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4844      	ldr	r0, [pc, #272]	; (800e4b8 <HAL_I2C_MspInit+0x16c>)
 800e3a6:	f7f3 fb35 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	617b      	str	r3, [r7, #20]
 800e3ae:	4b41      	ldr	r3, [pc, #260]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b2:	4a40      	ldr	r2, [pc, #256]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e3b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e3b8:	6413      	str	r3, [r2, #64]	; 0x40
 800e3ba:	4b3e      	ldr	r3, [pc, #248]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3c2:	617b      	str	r3, [r7, #20]
 800e3c4:	697b      	ldr	r3, [r7, #20]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800e3c6:	4b3d      	ldr	r3, [pc, #244]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3c8:	4a3d      	ldr	r2, [pc, #244]	; (800e4c0 <HAL_I2C_MspInit+0x174>)
 800e3ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800e3cc:	4b3b      	ldr	r3, [pc, #236]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e3d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e3d4:	4b39      	ldr	r3, [pc, #228]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3d6:	2240      	movs	r2, #64	; 0x40
 800e3d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3da:	4b38      	ldr	r3, [pc, #224]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e3e0:	4b36      	ldr	r3, [pc, #216]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3e8:	4b34      	ldr	r3, [pc, #208]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e3ee:	4b33      	ldr	r3, [pc, #204]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800e3f4:	4b31      	ldr	r3, [pc, #196]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e3fa:	4b30      	ldr	r3, [pc, #192]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e400:	4b2e      	ldr	r3, [pc, #184]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e402:	2200      	movs	r2, #0
 800e404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800e406:	482d      	ldr	r0, [pc, #180]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e408:	f7f2 ff52 	bl	80012b0 <HAL_DMA_Init>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800e412:	f7fe fb12 	bl	800ca3a <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	4a28      	ldr	r2, [pc, #160]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e41a:	635a      	str	r2, [r3, #52]	; 0x34
 800e41c:	4a27      	ldr	r2, [pc, #156]	; (800e4bc <HAL_I2C_MspInit+0x170>)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800e422:	2200      	movs	r2, #0
 800e424:	2105      	movs	r1, #5
 800e426:	201f      	movs	r0, #31
 800e428:	f7f2 ff0b 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e42c:	201f      	movs	r0, #31
 800e42e:	f7f2 ff24 	bl	800127a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800e432:	2200      	movs	r2, #0
 800e434:	2105      	movs	r1, #5
 800e436:	2020      	movs	r0, #32
 800e438:	f7f2 ff03 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e43c:	2020      	movs	r0, #32
 800e43e:	f7f2 ff1c 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800e442:	e031      	b.n	800e4a8 <HAL_I2C_MspInit+0x15c>
  else if(hi2c->Instance==I2C2)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a1e      	ldr	r2, [pc, #120]	; (800e4c4 <HAL_I2C_MspInit+0x178>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d12c      	bne.n	800e4a8 <HAL_I2C_MspInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e44e:	2300      	movs	r3, #0
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	4b18      	ldr	r3, [pc, #96]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e456:	4a17      	ldr	r2, [pc, #92]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e458:	f043 0302 	orr.w	r3, r3, #2
 800e45c:	6313      	str	r3, [r2, #48]	; 0x30
 800e45e:	4b15      	ldr	r3, [pc, #84]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e462:	f003 0302 	and.w	r3, r3, #2
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e46a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e46e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e470:	2312      	movs	r3, #18
 800e472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e474:	2301      	movs	r3, #1
 800e476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e478:	2303      	movs	r3, #3
 800e47a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800e47c:	2304      	movs	r3, #4
 800e47e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e480:	f107 031c 	add.w	r3, r7, #28
 800e484:	4619      	mov	r1, r3
 800e486:	480c      	ldr	r0, [pc, #48]	; (800e4b8 <HAL_I2C_MspInit+0x16c>)
 800e488:	f7f3 fac4 	bl	8001a14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800e48c:	2300      	movs	r3, #0
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	4b08      	ldr	r3, [pc, #32]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e494:	4a07      	ldr	r2, [pc, #28]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e496:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e49a:	6413      	str	r3, [r2, #64]	; 0x40
 800e49c:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <HAL_I2C_MspInit+0x168>)
 800e49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4a4:	60fb      	str	r3, [r7, #12]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
}
 800e4a8:	bf00      	nop
 800e4aa:	3730      	adds	r7, #48	; 0x30
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	40005400 	.word	0x40005400
 800e4b4:	40023800 	.word	0x40023800
 800e4b8:	40020400 	.word	0x40020400
 800e4bc:	20004910 	.word	0x20004910
 800e4c0:	400260a0 	.word	0x400260a0
 800e4c4:	40005800 	.word	0x40005800

0800e4c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b08a      	sub	sp, #40	; 0x28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4d0:	f107 0314 	add.w	r3, r7, #20
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	605a      	str	r2, [r3, #4]
 800e4da:	609a      	str	r2, [r3, #8]
 800e4dc:	60da      	str	r2, [r3, #12]
 800e4de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a47      	ldr	r2, [pc, #284]	; (800e604 <HAL_SPI_MspInit+0x13c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	f040 8088 	bne.w	800e5fc <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	613b      	str	r3, [r7, #16]
 800e4f0:	4b45      	ldr	r3, [pc, #276]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f4:	4a44      	ldr	r2, [pc, #272]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e4f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e4fa:	6453      	str	r3, [r2, #68]	; 0x44
 800e4fc:	4b42      	ldr	r3, [pc, #264]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e504:	613b      	str	r3, [r7, #16]
 800e506:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e508:	2300      	movs	r3, #0
 800e50a:	60fb      	str	r3, [r7, #12]
 800e50c:	4b3e      	ldr	r3, [pc, #248]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e510:	4a3d      	ldr	r2, [pc, #244]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e512:	f043 0301 	orr.w	r3, r3, #1
 800e516:	6313      	str	r3, [r2, #48]	; 0x30
 800e518:	4b3b      	ldr	r3, [pc, #236]	; (800e608 <HAL_SPI_MspInit+0x140>)
 800e51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51c:	f003 0301 	and.w	r3, r3, #1
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e524:	23e0      	movs	r3, #224	; 0xe0
 800e526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e528:	2302      	movs	r3, #2
 800e52a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e530:	2303      	movs	r3, #3
 800e532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e534:	2305      	movs	r3, #5
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e538:	f107 0314 	add.w	r3, r7, #20
 800e53c:	4619      	mov	r1, r3
 800e53e:	4833      	ldr	r0, [pc, #204]	; (800e60c <HAL_SPI_MspInit+0x144>)
 800e540:	f7f3 fa68 	bl	8001a14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800e544:	4b32      	ldr	r3, [pc, #200]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e546:	4a33      	ldr	r2, [pc, #204]	; (800e614 <HAL_SPI_MspInit+0x14c>)
 800e548:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800e54a:	4b31      	ldr	r3, [pc, #196]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e54c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e550:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e552:	4b2f      	ldr	r3, [pc, #188]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e554:	2200      	movs	r2, #0
 800e556:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e558:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e55e:	4b2c      	ldr	r3, [pc, #176]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e564:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e566:	4b2a      	ldr	r3, [pc, #168]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e568:	2200      	movs	r2, #0
 800e56a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e56c:	4b28      	ldr	r3, [pc, #160]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e56e:	2200      	movs	r2, #0
 800e570:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800e572:	4b27      	ldr	r3, [pc, #156]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e574:	2200      	movs	r2, #0
 800e576:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e578:	4b25      	ldr	r3, [pc, #148]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e57e:	4b24      	ldr	r3, [pc, #144]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e580:	2200      	movs	r2, #0
 800e582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800e584:	4822      	ldr	r0, [pc, #136]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e586:	f7f2 fe93 	bl	80012b0 <HAL_DMA_Init>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800e590:	f7fe fa53 	bl	800ca3a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a1e      	ldr	r2, [pc, #120]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e598:	64da      	str	r2, [r3, #76]	; 0x4c
 800e59a:	4a1d      	ldr	r2, [pc, #116]	; (800e610 <HAL_SPI_MspInit+0x148>)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800e5a0:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5a2:	4a1e      	ldr	r2, [pc, #120]	; (800e61c <HAL_SPI_MspInit+0x154>)
 800e5a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800e5a6:	4b1c      	ldr	r3, [pc, #112]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e5ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e5ae:	4b1a      	ldr	r3, [pc, #104]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5b0:	2240      	movs	r2, #64	; 0x40
 800e5b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e5b4:	4b18      	ldr	r3, [pc, #96]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e5ba:	4b17      	ldr	r3, [pc, #92]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e5c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e5c2:	4b15      	ldr	r3, [pc, #84]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e5c8:	4b13      	ldr	r3, [pc, #76]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800e5ce:	4b12      	ldr	r3, [pc, #72]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e5d4:	4b10      	ldr	r3, [pc, #64]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e5da:	4b0f      	ldr	r3, [pc, #60]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800e5e0:	480d      	ldr	r0, [pc, #52]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5e2:	f7f2 fe65 	bl	80012b0 <HAL_DMA_Init>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800e5ec:	f7fe fa25 	bl	800ca3a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a09      	ldr	r2, [pc, #36]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5f4:	649a      	str	r2, [r3, #72]	; 0x48
 800e5f6:	4a08      	ldr	r2, [pc, #32]	; (800e618 <HAL_SPI_MspInit+0x150>)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e5fc:	bf00      	nop
 800e5fe:	3728      	adds	r7, #40	; 0x28
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	40013000 	.word	0x40013000
 800e608:	40023800 	.word	0x40023800
 800e60c:	40020000 	.word	0x40020000
 800e610:	20014dfc 	.word	0x20014dfc
 800e614:	40026410 	.word	0x40026410
 800e618:	20018e5c 	.word	0x20018e5c
 800e61c:	40026458 	.word	0x40026458

0800e620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	; 0x28
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e628:	f107 0314 	add.w	r3, r7, #20
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	605a      	str	r2, [r3, #4]
 800e632:	609a      	str	r2, [r3, #8]
 800e634:	60da      	str	r2, [r3, #12]
 800e636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a34      	ldr	r2, [pc, #208]	; (800e710 <HAL_UART_MspInit+0xf0>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d161      	bne.n	800e706 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	4b33      	ldr	r3, [pc, #204]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e64a:	4a32      	ldr	r2, [pc, #200]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e64c:	f043 0320 	orr.w	r3, r3, #32
 800e650:	6453      	str	r3, [r2, #68]	; 0x44
 800e652:	4b30      	ldr	r3, [pc, #192]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e656:	f003 0320 	and.w	r3, r3, #32
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e65e:	2300      	movs	r3, #0
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	4b2c      	ldr	r3, [pc, #176]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e666:	4a2b      	ldr	r2, [pc, #172]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e668:	f043 0304 	orr.w	r3, r3, #4
 800e66c:	6313      	str	r3, [r2, #48]	; 0x30
 800e66e:	4b29      	ldr	r3, [pc, #164]	; (800e714 <HAL_UART_MspInit+0xf4>)
 800e670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e672:	f003 0304 	and.w	r3, r3, #4
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e67a:	23c0      	movs	r3, #192	; 0xc0
 800e67c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e67e:	2302      	movs	r3, #2
 800e680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e682:	2301      	movs	r3, #1
 800e684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e686:	2303      	movs	r3, #3
 800e688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e68a:	2308      	movs	r3, #8
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e68e:	f107 0314 	add.w	r3, r7, #20
 800e692:	4619      	mov	r1, r3
 800e694:	4820      	ldr	r0, [pc, #128]	; (800e718 <HAL_UART_MspInit+0xf8>)
 800e696:	f7f3 f9bd 	bl	8001a14 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800e69a:	4b20      	ldr	r3, [pc, #128]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e69c:	4a20      	ldr	r2, [pc, #128]	; (800e720 <HAL_UART_MspInit+0x100>)
 800e69e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800e6a0:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800e6a6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e6a8:	4b1c      	ldr	r3, [pc, #112]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6aa:	2240      	movs	r2, #64	; 0x40
 800e6ac:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e6ae:	4b1b      	ldr	r3, [pc, #108]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e6b4:	4b19      	ldr	r3, [pc, #100]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e6ba:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e6bc:	4b17      	ldr	r3, [pc, #92]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e6c2:	4b16      	ldr	r3, [pc, #88]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800e6c8:	4b14      	ldr	r3, [pc, #80]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e6ce:	4b13      	ldr	r3, [pc, #76]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e6d4:	4b11      	ldr	r3, [pc, #68]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800e6da:	4810      	ldr	r0, [pc, #64]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6dc:	f7f2 fde8 	bl	80012b0 <HAL_DMA_Init>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800e6e6:	f7fe f9a8 	bl	800ca3a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4a0b      	ldr	r2, [pc, #44]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6ee:	631a      	str	r2, [r3, #48]	; 0x30
 800e6f0:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <HAL_UART_MspInit+0xfc>)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	2105      	movs	r1, #5
 800e6fa:	2047      	movs	r0, #71	; 0x47
 800e6fc:	f7f2 fda1 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800e700:	2047      	movs	r0, #71	; 0x47
 800e702:	f7f2 fdba 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800e706:	bf00      	nop
 800e708:	3728      	adds	r7, #40	; 0x28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	40011400 	.word	0x40011400
 800e714:	40023800 	.word	0x40023800
 800e718:	40020800 	.word	0x40020800
 800e71c:	20004b2c 	.word	0x20004b2c
 800e720:	400264a0 	.word	0x400264a0

0800e724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e728:	bf00      	nop
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr

0800e732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e732:	b480      	push	{r7}
 800e734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e736:	e7fe      	b.n	800e736 <HardFault_Handler+0x4>

0800e738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e738:	b480      	push	{r7}
 800e73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e73c:	e7fe      	b.n	800e73c <MemManage_Handler+0x4>

0800e73e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e73e:	b480      	push	{r7}
 800e740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e742:	e7fe      	b.n	800e742 <BusFault_Handler+0x4>

0800e744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e748:	e7fe      	b.n	800e748 <UsageFault_Handler+0x4>

0800e74a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e74a:	b480      	push	{r7}
 800e74c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e74e:	bf00      	nop
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e75c:	f7f2 fc76 	bl	800104c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e760:	f7fc fb2e 	bl	800adc0 <xTaskGetSchedulerState>
 800e764:	4603      	mov	r3, r0
 800e766:	2b01      	cmp	r3, #1
 800e768:	d001      	beq.n	800e76e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e76a:	f7fc ff1d 	bl	800b5a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e76e:	bf00      	nop
 800e770:	bd80      	pop	{r7, pc}

0800e772 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800e776:	2008      	movs	r0, #8
 800e778:	f7f3 fb32 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800e77c:	bf00      	nop
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e784:	4802      	ldr	r0, [pc, #8]	; (800e790 <DMA1_Stream6_IRQHandler+0x10>)
 800e786:	f7f2 fec3 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800e78a:	bf00      	nop
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	20004910 	.word	0x20004910

0800e794 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800e798:	4804      	ldr	r0, [pc, #16]	; (800e7ac <I2C1_ER_IRQHandler+0x18>)
 800e79a:	f7f4 f915 	bl	80029c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, I2cbuffer, 2);
 800e79e:	2202      	movs	r2, #2
 800e7a0:	4903      	ldr	r1, [pc, #12]	; (800e7b0 <I2C1_ER_IRQHandler+0x1c>)
 800e7a2:	4802      	ldr	r0, [pc, #8]	; (800e7ac <I2C1_ER_IRQHandler+0x18>)
 800e7a4:	f7f3 fc5c 	bl	8002060 <HAL_I2C_Slave_Receive_IT>
  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800e7a8:	bf00      	nop
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	20004970 	.word	0x20004970
 800e7b0:	20004808 	.word	0x20004808

0800e7b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800e7b8:	4802      	ldr	r0, [pc, #8]	; (800e7c4 <DMA2_Stream0_IRQHandler+0x10>)
 800e7ba:	f7f2 fea9 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e7be:	bf00      	nop
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20014dfc 	.word	0x20014dfc

0800e7c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800e7cc:	4802      	ldr	r0, [pc, #8]	; (800e7d8 <DMA2_Stream3_IRQHandler+0x10>)
 800e7ce:	f7f2 fe9f 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800e7d2:	bf00      	nop
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20018e5c 	.word	0x20018e5c

0800e7dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800e7e0:	4802      	ldr	r0, [pc, #8]	; (800e7ec <DMA2_Stream6_IRQHandler+0x10>)
 800e7e2:	f7f2 fe95 	bl	8001510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800e7e6:	bf00      	nop
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20004b2c 	.word	0x20004b2c

0800e7f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800e7f4:	4802      	ldr	r0, [pc, #8]	; (800e800 <USART6_IRQHandler+0x10>)
 800e7f6:	f7f7 f9cb 	bl	8005b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800e7fa:	bf00      	nop
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20014d60 	.word	0x20014d60

0800e804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e804:	b480      	push	{r7}
 800e806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e808:	4b16      	ldr	r3, [pc, #88]	; (800e864 <SystemInit+0x60>)
 800e80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e80e:	4a15      	ldr	r2, [pc, #84]	; (800e864 <SystemInit+0x60>)
 800e810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e818:	4b13      	ldr	r3, [pc, #76]	; (800e868 <SystemInit+0x64>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a12      	ldr	r2, [pc, #72]	; (800e868 <SystemInit+0x64>)
 800e81e:	f043 0301 	orr.w	r3, r3, #1
 800e822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e824:	4b10      	ldr	r3, [pc, #64]	; (800e868 <SystemInit+0x64>)
 800e826:	2200      	movs	r2, #0
 800e828:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e82a:	4b0f      	ldr	r3, [pc, #60]	; (800e868 <SystemInit+0x64>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a0e      	ldr	r2, [pc, #56]	; (800e868 <SystemInit+0x64>)
 800e830:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e838:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e83a:	4b0b      	ldr	r3, [pc, #44]	; (800e868 <SystemInit+0x64>)
 800e83c:	4a0b      	ldr	r2, [pc, #44]	; (800e86c <SystemInit+0x68>)
 800e83e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e840:	4b09      	ldr	r3, [pc, #36]	; (800e868 <SystemInit+0x64>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a08      	ldr	r2, [pc, #32]	; (800e868 <SystemInit+0x64>)
 800e846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e84a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <SystemInit+0x64>)
 800e84e:	2200      	movs	r2, #0
 800e850:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e852:	4b04      	ldr	r3, [pc, #16]	; (800e864 <SystemInit+0x60>)
 800e854:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e858:	609a      	str	r2, [r3, #8]
#endif
}
 800e85a:	bf00      	nop
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	e000ed00 	.word	0xe000ed00
 800e868:	40023800 	.word	0x40023800
 800e86c:	24003010 	.word	0x24003010

0800e870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e870:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e8a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e874:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e876:	e003      	b.n	800e880 <LoopCopyDataInit>

0800e878 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e87a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e87c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e87e:	3104      	adds	r1, #4

0800e880 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e880:	480b      	ldr	r0, [pc, #44]	; (800e8b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e882:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e884:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e886:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e888:	d3f6      	bcc.n	800e878 <CopyDataInit>
  ldr  r2, =_sbss
 800e88a:	4a0b      	ldr	r2, [pc, #44]	; (800e8b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e88c:	e002      	b.n	800e894 <LoopFillZerobss>

0800e88e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e88e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e890:	f842 3b04 	str.w	r3, [r2], #4

0800e894 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e894:	4b09      	ldr	r3, [pc, #36]	; (800e8bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e896:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e898:	d3f9      	bcc.n	800e88e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e89a:	f7ff ffb3 	bl	800e804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e89e:	f000 f817 	bl	800e8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e8a2:	f7fd fa03 	bl	800bcac <main>
  bx  lr    
 800e8a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e8a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e8ac:	0801aabc 	.word	0x0801aabc
  ldr  r0, =_sdata
 800e8b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e8b4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800e8b8:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800e8bc:	20018ec8 	.word	0x20018ec8

0800e8c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e8c0:	e7fe      	b.n	800e8c0 <ADC_IRQHandler>
	...

0800e8c4 <__errno>:
 800e8c4:	4b01      	ldr	r3, [pc, #4]	; (800e8cc <__errno+0x8>)
 800e8c6:	6818      	ldr	r0, [r3, #0]
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	20000024 	.word	0x20000024

0800e8d0 <__libc_init_array>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	4e0d      	ldr	r6, [pc, #52]	; (800e908 <__libc_init_array+0x38>)
 800e8d4:	4c0d      	ldr	r4, [pc, #52]	; (800e90c <__libc_init_array+0x3c>)
 800e8d6:	1ba4      	subs	r4, r4, r6
 800e8d8:	10a4      	asrs	r4, r4, #2
 800e8da:	2500      	movs	r5, #0
 800e8dc:	42a5      	cmp	r5, r4
 800e8de:	d109      	bne.n	800e8f4 <__libc_init_array+0x24>
 800e8e0:	4e0b      	ldr	r6, [pc, #44]	; (800e910 <__libc_init_array+0x40>)
 800e8e2:	4c0c      	ldr	r4, [pc, #48]	; (800e914 <__libc_init_array+0x44>)
 800e8e4:	f001 ff0c 	bl	8010700 <_init>
 800e8e8:	1ba4      	subs	r4, r4, r6
 800e8ea:	10a4      	asrs	r4, r4, #2
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	42a5      	cmp	r5, r4
 800e8f0:	d105      	bne.n	800e8fe <__libc_init_array+0x2e>
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}
 800e8f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8f8:	4798      	blx	r3
 800e8fa:	3501      	adds	r5, #1
 800e8fc:	e7ee      	b.n	800e8dc <__libc_init_array+0xc>
 800e8fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e902:	4798      	blx	r3
 800e904:	3501      	adds	r5, #1
 800e906:	e7f2      	b.n	800e8ee <__libc_init_array+0x1e>
 800e908:	0801aab4 	.word	0x0801aab4
 800e90c:	0801aab4 	.word	0x0801aab4
 800e910:	0801aab4 	.word	0x0801aab4
 800e914:	0801aab8 	.word	0x0801aab8

0800e918 <malloc>:
 800e918:	4b02      	ldr	r3, [pc, #8]	; (800e924 <malloc+0xc>)
 800e91a:	4601      	mov	r1, r0
 800e91c:	6818      	ldr	r0, [r3, #0]
 800e91e:	f000 b86d 	b.w	800e9fc <_malloc_r>
 800e922:	bf00      	nop
 800e924:	20000024 	.word	0x20000024

0800e928 <free>:
 800e928:	4b02      	ldr	r3, [pc, #8]	; (800e934 <free+0xc>)
 800e92a:	4601      	mov	r1, r0
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f000 b817 	b.w	800e960 <_free_r>
 800e932:	bf00      	nop
 800e934:	20000024 	.word	0x20000024

0800e938 <memcpy>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	1e43      	subs	r3, r0, #1
 800e93c:	440a      	add	r2, r1
 800e93e:	4291      	cmp	r1, r2
 800e940:	d100      	bne.n	800e944 <memcpy+0xc>
 800e942:	bd10      	pop	{r4, pc}
 800e944:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e94c:	e7f7      	b.n	800e93e <memcpy+0x6>

0800e94e <memset>:
 800e94e:	4402      	add	r2, r0
 800e950:	4603      	mov	r3, r0
 800e952:	4293      	cmp	r3, r2
 800e954:	d100      	bne.n	800e958 <memset+0xa>
 800e956:	4770      	bx	lr
 800e958:	f803 1b01 	strb.w	r1, [r3], #1
 800e95c:	e7f9      	b.n	800e952 <memset+0x4>
	...

0800e960 <_free_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4605      	mov	r5, r0
 800e964:	2900      	cmp	r1, #0
 800e966:	d045      	beq.n	800e9f4 <_free_r+0x94>
 800e968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96c:	1f0c      	subs	r4, r1, #4
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bfb8      	it	lt
 800e972:	18e4      	addlt	r4, r4, r3
 800e974:	f001 fa4a 	bl	800fe0c <__malloc_lock>
 800e978:	4a1f      	ldr	r2, [pc, #124]	; (800e9f8 <_free_r+0x98>)
 800e97a:	6813      	ldr	r3, [r2, #0]
 800e97c:	4610      	mov	r0, r2
 800e97e:	b933      	cbnz	r3, 800e98e <_free_r+0x2e>
 800e980:	6063      	str	r3, [r4, #4]
 800e982:	6014      	str	r4, [r2, #0]
 800e984:	4628      	mov	r0, r5
 800e986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e98a:	f001 ba40 	b.w	800fe0e <__malloc_unlock>
 800e98e:	42a3      	cmp	r3, r4
 800e990:	d90c      	bls.n	800e9ac <_free_r+0x4c>
 800e992:	6821      	ldr	r1, [r4, #0]
 800e994:	1862      	adds	r2, r4, r1
 800e996:	4293      	cmp	r3, r2
 800e998:	bf04      	itt	eq
 800e99a:	681a      	ldreq	r2, [r3, #0]
 800e99c:	685b      	ldreq	r3, [r3, #4]
 800e99e:	6063      	str	r3, [r4, #4]
 800e9a0:	bf04      	itt	eq
 800e9a2:	1852      	addeq	r2, r2, r1
 800e9a4:	6022      	streq	r2, [r4, #0]
 800e9a6:	6004      	str	r4, [r0, #0]
 800e9a8:	e7ec      	b.n	800e984 <_free_r+0x24>
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	685a      	ldr	r2, [r3, #4]
 800e9ae:	b10a      	cbz	r2, 800e9b4 <_free_r+0x54>
 800e9b0:	42a2      	cmp	r2, r4
 800e9b2:	d9fa      	bls.n	800e9aa <_free_r+0x4a>
 800e9b4:	6819      	ldr	r1, [r3, #0]
 800e9b6:	1858      	adds	r0, r3, r1
 800e9b8:	42a0      	cmp	r0, r4
 800e9ba:	d10b      	bne.n	800e9d4 <_free_r+0x74>
 800e9bc:	6820      	ldr	r0, [r4, #0]
 800e9be:	4401      	add	r1, r0
 800e9c0:	1858      	adds	r0, r3, r1
 800e9c2:	4282      	cmp	r2, r0
 800e9c4:	6019      	str	r1, [r3, #0]
 800e9c6:	d1dd      	bne.n	800e984 <_free_r+0x24>
 800e9c8:	6810      	ldr	r0, [r2, #0]
 800e9ca:	6852      	ldr	r2, [r2, #4]
 800e9cc:	605a      	str	r2, [r3, #4]
 800e9ce:	4401      	add	r1, r0
 800e9d0:	6019      	str	r1, [r3, #0]
 800e9d2:	e7d7      	b.n	800e984 <_free_r+0x24>
 800e9d4:	d902      	bls.n	800e9dc <_free_r+0x7c>
 800e9d6:	230c      	movs	r3, #12
 800e9d8:	602b      	str	r3, [r5, #0]
 800e9da:	e7d3      	b.n	800e984 <_free_r+0x24>
 800e9dc:	6820      	ldr	r0, [r4, #0]
 800e9de:	1821      	adds	r1, r4, r0
 800e9e0:	428a      	cmp	r2, r1
 800e9e2:	bf04      	itt	eq
 800e9e4:	6811      	ldreq	r1, [r2, #0]
 800e9e6:	6852      	ldreq	r2, [r2, #4]
 800e9e8:	6062      	str	r2, [r4, #4]
 800e9ea:	bf04      	itt	eq
 800e9ec:	1809      	addeq	r1, r1, r0
 800e9ee:	6021      	streq	r1, [r4, #0]
 800e9f0:	605c      	str	r4, [r3, #4]
 800e9f2:	e7c7      	b.n	800e984 <_free_r+0x24>
 800e9f4:	bd38      	pop	{r3, r4, r5, pc}
 800e9f6:	bf00      	nop
 800e9f8:	200006ec 	.word	0x200006ec

0800e9fc <_malloc_r>:
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	1ccd      	adds	r5, r1, #3
 800ea00:	f025 0503 	bic.w	r5, r5, #3
 800ea04:	3508      	adds	r5, #8
 800ea06:	2d0c      	cmp	r5, #12
 800ea08:	bf38      	it	cc
 800ea0a:	250c      	movcc	r5, #12
 800ea0c:	2d00      	cmp	r5, #0
 800ea0e:	4606      	mov	r6, r0
 800ea10:	db01      	blt.n	800ea16 <_malloc_r+0x1a>
 800ea12:	42a9      	cmp	r1, r5
 800ea14:	d903      	bls.n	800ea1e <_malloc_r+0x22>
 800ea16:	230c      	movs	r3, #12
 800ea18:	6033      	str	r3, [r6, #0]
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	bd70      	pop	{r4, r5, r6, pc}
 800ea1e:	f001 f9f5 	bl	800fe0c <__malloc_lock>
 800ea22:	4a21      	ldr	r2, [pc, #132]	; (800eaa8 <_malloc_r+0xac>)
 800ea24:	6814      	ldr	r4, [r2, #0]
 800ea26:	4621      	mov	r1, r4
 800ea28:	b991      	cbnz	r1, 800ea50 <_malloc_r+0x54>
 800ea2a:	4c20      	ldr	r4, [pc, #128]	; (800eaac <_malloc_r+0xb0>)
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	b91b      	cbnz	r3, 800ea38 <_malloc_r+0x3c>
 800ea30:	4630      	mov	r0, r6
 800ea32:	f000 fb87 	bl	800f144 <_sbrk_r>
 800ea36:	6020      	str	r0, [r4, #0]
 800ea38:	4629      	mov	r1, r5
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f000 fb82 	bl	800f144 <_sbrk_r>
 800ea40:	1c43      	adds	r3, r0, #1
 800ea42:	d124      	bne.n	800ea8e <_malloc_r+0x92>
 800ea44:	230c      	movs	r3, #12
 800ea46:	6033      	str	r3, [r6, #0]
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f001 f9e0 	bl	800fe0e <__malloc_unlock>
 800ea4e:	e7e4      	b.n	800ea1a <_malloc_r+0x1e>
 800ea50:	680b      	ldr	r3, [r1, #0]
 800ea52:	1b5b      	subs	r3, r3, r5
 800ea54:	d418      	bmi.n	800ea88 <_malloc_r+0x8c>
 800ea56:	2b0b      	cmp	r3, #11
 800ea58:	d90f      	bls.n	800ea7a <_malloc_r+0x7e>
 800ea5a:	600b      	str	r3, [r1, #0]
 800ea5c:	50cd      	str	r5, [r1, r3]
 800ea5e:	18cc      	adds	r4, r1, r3
 800ea60:	4630      	mov	r0, r6
 800ea62:	f001 f9d4 	bl	800fe0e <__malloc_unlock>
 800ea66:	f104 000b 	add.w	r0, r4, #11
 800ea6a:	1d23      	adds	r3, r4, #4
 800ea6c:	f020 0007 	bic.w	r0, r0, #7
 800ea70:	1ac3      	subs	r3, r0, r3
 800ea72:	d0d3      	beq.n	800ea1c <_malloc_r+0x20>
 800ea74:	425a      	negs	r2, r3
 800ea76:	50e2      	str	r2, [r4, r3]
 800ea78:	e7d0      	b.n	800ea1c <_malloc_r+0x20>
 800ea7a:	428c      	cmp	r4, r1
 800ea7c:	684b      	ldr	r3, [r1, #4]
 800ea7e:	bf16      	itet	ne
 800ea80:	6063      	strne	r3, [r4, #4]
 800ea82:	6013      	streq	r3, [r2, #0]
 800ea84:	460c      	movne	r4, r1
 800ea86:	e7eb      	b.n	800ea60 <_malloc_r+0x64>
 800ea88:	460c      	mov	r4, r1
 800ea8a:	6849      	ldr	r1, [r1, #4]
 800ea8c:	e7cc      	b.n	800ea28 <_malloc_r+0x2c>
 800ea8e:	1cc4      	adds	r4, r0, #3
 800ea90:	f024 0403 	bic.w	r4, r4, #3
 800ea94:	42a0      	cmp	r0, r4
 800ea96:	d005      	beq.n	800eaa4 <_malloc_r+0xa8>
 800ea98:	1a21      	subs	r1, r4, r0
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 fb52 	bl	800f144 <_sbrk_r>
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d0cf      	beq.n	800ea44 <_malloc_r+0x48>
 800eaa4:	6025      	str	r5, [r4, #0]
 800eaa6:	e7db      	b.n	800ea60 <_malloc_r+0x64>
 800eaa8:	200006ec 	.word	0x200006ec
 800eaac:	200006f0 	.word	0x200006f0

0800eab0 <__cvt>:
 800eab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eab4:	ec55 4b10 	vmov	r4, r5, d0
 800eab8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800eaba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	460e      	mov	r6, r1
 800eac2:	4691      	mov	r9, r2
 800eac4:	4619      	mov	r1, r3
 800eac6:	bfb8      	it	lt
 800eac8:	4622      	movlt	r2, r4
 800eaca:	462b      	mov	r3, r5
 800eacc:	f027 0720 	bic.w	r7, r7, #32
 800ead0:	bfbb      	ittet	lt
 800ead2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ead6:	461d      	movlt	r5, r3
 800ead8:	2300      	movge	r3, #0
 800eada:	232d      	movlt	r3, #45	; 0x2d
 800eadc:	bfb8      	it	lt
 800eade:	4614      	movlt	r4, r2
 800eae0:	2f46      	cmp	r7, #70	; 0x46
 800eae2:	700b      	strb	r3, [r1, #0]
 800eae4:	d004      	beq.n	800eaf0 <__cvt+0x40>
 800eae6:	2f45      	cmp	r7, #69	; 0x45
 800eae8:	d100      	bne.n	800eaec <__cvt+0x3c>
 800eaea:	3601      	adds	r6, #1
 800eaec:	2102      	movs	r1, #2
 800eaee:	e000      	b.n	800eaf2 <__cvt+0x42>
 800eaf0:	2103      	movs	r1, #3
 800eaf2:	ab03      	add	r3, sp, #12
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	ab02      	add	r3, sp, #8
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4632      	mov	r2, r6
 800eafc:	4653      	mov	r3, sl
 800eafe:	ec45 4b10 	vmov	d0, r4, r5
 800eb02:	f000 fbbd 	bl	800f280 <_dtoa_r>
 800eb06:	2f47      	cmp	r7, #71	; 0x47
 800eb08:	4680      	mov	r8, r0
 800eb0a:	d102      	bne.n	800eb12 <__cvt+0x62>
 800eb0c:	f019 0f01 	tst.w	r9, #1
 800eb10:	d026      	beq.n	800eb60 <__cvt+0xb0>
 800eb12:	2f46      	cmp	r7, #70	; 0x46
 800eb14:	eb08 0906 	add.w	r9, r8, r6
 800eb18:	d111      	bne.n	800eb3e <__cvt+0x8e>
 800eb1a:	f898 3000 	ldrb.w	r3, [r8]
 800eb1e:	2b30      	cmp	r3, #48	; 0x30
 800eb20:	d10a      	bne.n	800eb38 <__cvt+0x88>
 800eb22:	2200      	movs	r2, #0
 800eb24:	2300      	movs	r3, #0
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7f1 ffdd 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb2e:	b918      	cbnz	r0, 800eb38 <__cvt+0x88>
 800eb30:	f1c6 0601 	rsb	r6, r6, #1
 800eb34:	f8ca 6000 	str.w	r6, [sl]
 800eb38:	f8da 3000 	ldr.w	r3, [sl]
 800eb3c:	4499      	add	r9, r3
 800eb3e:	2200      	movs	r2, #0
 800eb40:	2300      	movs	r3, #0
 800eb42:	4620      	mov	r0, r4
 800eb44:	4629      	mov	r1, r5
 800eb46:	f7f1 ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb4a:	b938      	cbnz	r0, 800eb5c <__cvt+0xac>
 800eb4c:	2230      	movs	r2, #48	; 0x30
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	454b      	cmp	r3, r9
 800eb52:	d205      	bcs.n	800eb60 <__cvt+0xb0>
 800eb54:	1c59      	adds	r1, r3, #1
 800eb56:	9103      	str	r1, [sp, #12]
 800eb58:	701a      	strb	r2, [r3, #0]
 800eb5a:	e7f8      	b.n	800eb4e <__cvt+0x9e>
 800eb5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb64:	eba3 0308 	sub.w	r3, r3, r8
 800eb68:	4640      	mov	r0, r8
 800eb6a:	6013      	str	r3, [r2, #0]
 800eb6c:	b004      	add	sp, #16
 800eb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eb72 <__exponent>:
 800eb72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb74:	2900      	cmp	r1, #0
 800eb76:	4604      	mov	r4, r0
 800eb78:	bfba      	itte	lt
 800eb7a:	4249      	neglt	r1, r1
 800eb7c:	232d      	movlt	r3, #45	; 0x2d
 800eb7e:	232b      	movge	r3, #43	; 0x2b
 800eb80:	2909      	cmp	r1, #9
 800eb82:	f804 2b02 	strb.w	r2, [r4], #2
 800eb86:	7043      	strb	r3, [r0, #1]
 800eb88:	dd20      	ble.n	800ebcc <__exponent+0x5a>
 800eb8a:	f10d 0307 	add.w	r3, sp, #7
 800eb8e:	461f      	mov	r7, r3
 800eb90:	260a      	movs	r6, #10
 800eb92:	fb91 f5f6 	sdiv	r5, r1, r6
 800eb96:	fb06 1115 	mls	r1, r6, r5, r1
 800eb9a:	3130      	adds	r1, #48	; 0x30
 800eb9c:	2d09      	cmp	r5, #9
 800eb9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eba2:	f103 32ff 	add.w	r2, r3, #4294967295
 800eba6:	4629      	mov	r1, r5
 800eba8:	dc09      	bgt.n	800ebbe <__exponent+0x4c>
 800ebaa:	3130      	adds	r1, #48	; 0x30
 800ebac:	3b02      	subs	r3, #2
 800ebae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ebb2:	42bb      	cmp	r3, r7
 800ebb4:	4622      	mov	r2, r4
 800ebb6:	d304      	bcc.n	800ebc2 <__exponent+0x50>
 800ebb8:	1a10      	subs	r0, r2, r0
 800ebba:	b003      	add	sp, #12
 800ebbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	e7e7      	b.n	800eb92 <__exponent+0x20>
 800ebc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebc6:	f804 2b01 	strb.w	r2, [r4], #1
 800ebca:	e7f2      	b.n	800ebb2 <__exponent+0x40>
 800ebcc:	2330      	movs	r3, #48	; 0x30
 800ebce:	4419      	add	r1, r3
 800ebd0:	7083      	strb	r3, [r0, #2]
 800ebd2:	1d02      	adds	r2, r0, #4
 800ebd4:	70c1      	strb	r1, [r0, #3]
 800ebd6:	e7ef      	b.n	800ebb8 <__exponent+0x46>

0800ebd8 <_printf_float>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	b08d      	sub	sp, #52	; 0x34
 800ebde:	460c      	mov	r4, r1
 800ebe0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ebe4:	4616      	mov	r6, r2
 800ebe6:	461f      	mov	r7, r3
 800ebe8:	4605      	mov	r5, r0
 800ebea:	f001 f901 	bl	800fdf0 <_localeconv_r>
 800ebee:	6803      	ldr	r3, [r0, #0]
 800ebf0:	9304      	str	r3, [sp, #16]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f1 fb4c 	bl	8000290 <strlen>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	930a      	str	r3, [sp, #40]	; 0x28
 800ebfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ec00:	9005      	str	r0, [sp, #20]
 800ec02:	3307      	adds	r3, #7
 800ec04:	f023 0307 	bic.w	r3, r3, #7
 800ec08:	f103 0208 	add.w	r2, r3, #8
 800ec0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ec10:	f8d4 b000 	ldr.w	fp, [r4]
 800ec14:	f8c8 2000 	str.w	r2, [r8]
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ec20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ec24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec28:	9307      	str	r3, [sp, #28]
 800ec2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec32:	4ba7      	ldr	r3, [pc, #668]	; (800eed0 <_printf_float+0x2f8>)
 800ec34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec38:	f7f1 ff88 	bl	8000b4c <__aeabi_dcmpun>
 800ec3c:	bb70      	cbnz	r0, 800ec9c <_printf_float+0xc4>
 800ec3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec42:	4ba3      	ldr	r3, [pc, #652]	; (800eed0 <_printf_float+0x2f8>)
 800ec44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec48:	f7f1 ff62 	bl	8000b10 <__aeabi_dcmple>
 800ec4c:	bb30      	cbnz	r0, 800ec9c <_printf_float+0xc4>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	2300      	movs	r3, #0
 800ec52:	4640      	mov	r0, r8
 800ec54:	4649      	mov	r1, r9
 800ec56:	f7f1 ff51 	bl	8000afc <__aeabi_dcmplt>
 800ec5a:	b110      	cbz	r0, 800ec62 <_printf_float+0x8a>
 800ec5c:	232d      	movs	r3, #45	; 0x2d
 800ec5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec62:	4a9c      	ldr	r2, [pc, #624]	; (800eed4 <_printf_float+0x2fc>)
 800ec64:	4b9c      	ldr	r3, [pc, #624]	; (800eed8 <_printf_float+0x300>)
 800ec66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ec6a:	bf8c      	ite	hi
 800ec6c:	4690      	movhi	r8, r2
 800ec6e:	4698      	movls	r8, r3
 800ec70:	2303      	movs	r3, #3
 800ec72:	f02b 0204 	bic.w	r2, fp, #4
 800ec76:	6123      	str	r3, [r4, #16]
 800ec78:	6022      	str	r2, [r4, #0]
 800ec7a:	f04f 0900 	mov.w	r9, #0
 800ec7e:	9700      	str	r7, [sp, #0]
 800ec80:	4633      	mov	r3, r6
 800ec82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec84:	4621      	mov	r1, r4
 800ec86:	4628      	mov	r0, r5
 800ec88:	f000 f9e6 	bl	800f058 <_printf_common>
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	f040 808d 	bne.w	800edac <_printf_float+0x1d4>
 800ec92:	f04f 30ff 	mov.w	r0, #4294967295
 800ec96:	b00d      	add	sp, #52	; 0x34
 800ec98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9c:	4642      	mov	r2, r8
 800ec9e:	464b      	mov	r3, r9
 800eca0:	4640      	mov	r0, r8
 800eca2:	4649      	mov	r1, r9
 800eca4:	f7f1 ff52 	bl	8000b4c <__aeabi_dcmpun>
 800eca8:	b110      	cbz	r0, 800ecb0 <_printf_float+0xd8>
 800ecaa:	4a8c      	ldr	r2, [pc, #560]	; (800eedc <_printf_float+0x304>)
 800ecac:	4b8c      	ldr	r3, [pc, #560]	; (800eee0 <_printf_float+0x308>)
 800ecae:	e7da      	b.n	800ec66 <_printf_float+0x8e>
 800ecb0:	6861      	ldr	r1, [r4, #4]
 800ecb2:	1c4b      	adds	r3, r1, #1
 800ecb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ecb8:	a80a      	add	r0, sp, #40	; 0x28
 800ecba:	d13e      	bne.n	800ed3a <_printf_float+0x162>
 800ecbc:	2306      	movs	r3, #6
 800ecbe:	6063      	str	r3, [r4, #4]
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ecc6:	ab09      	add	r3, sp, #36	; 0x24
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	ec49 8b10 	vmov	d0, r8, r9
 800ecce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ecd2:	6022      	str	r2, [r4, #0]
 800ecd4:	f8cd a004 	str.w	sl, [sp, #4]
 800ecd8:	6861      	ldr	r1, [r4, #4]
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f7ff fee8 	bl	800eab0 <__cvt>
 800ece0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ece4:	2b47      	cmp	r3, #71	; 0x47
 800ece6:	4680      	mov	r8, r0
 800ece8:	d109      	bne.n	800ecfe <_printf_float+0x126>
 800ecea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecec:	1cd8      	adds	r0, r3, #3
 800ecee:	db02      	blt.n	800ecf6 <_printf_float+0x11e>
 800ecf0:	6862      	ldr	r2, [r4, #4]
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	dd47      	ble.n	800ed86 <_printf_float+0x1ae>
 800ecf6:	f1aa 0a02 	sub.w	sl, sl, #2
 800ecfa:	fa5f fa8a 	uxtb.w	sl, sl
 800ecfe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ed02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed04:	d824      	bhi.n	800ed50 <_printf_float+0x178>
 800ed06:	3901      	subs	r1, #1
 800ed08:	4652      	mov	r2, sl
 800ed0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ed0e:	9109      	str	r1, [sp, #36]	; 0x24
 800ed10:	f7ff ff2f 	bl	800eb72 <__exponent>
 800ed14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed16:	1813      	adds	r3, r2, r0
 800ed18:	2a01      	cmp	r2, #1
 800ed1a:	4681      	mov	r9, r0
 800ed1c:	6123      	str	r3, [r4, #16]
 800ed1e:	dc02      	bgt.n	800ed26 <_printf_float+0x14e>
 800ed20:	6822      	ldr	r2, [r4, #0]
 800ed22:	07d1      	lsls	r1, r2, #31
 800ed24:	d501      	bpl.n	800ed2a <_printf_float+0x152>
 800ed26:	3301      	adds	r3, #1
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0a5      	beq.n	800ec7e <_printf_float+0xa6>
 800ed32:	232d      	movs	r3, #45	; 0x2d
 800ed34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed38:	e7a1      	b.n	800ec7e <_printf_float+0xa6>
 800ed3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ed3e:	f000 8177 	beq.w	800f030 <_printf_float+0x458>
 800ed42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ed46:	d1bb      	bne.n	800ecc0 <_printf_float+0xe8>
 800ed48:	2900      	cmp	r1, #0
 800ed4a:	d1b9      	bne.n	800ecc0 <_printf_float+0xe8>
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e7b6      	b.n	800ecbe <_printf_float+0xe6>
 800ed50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ed54:	d119      	bne.n	800ed8a <_printf_float+0x1b2>
 800ed56:	2900      	cmp	r1, #0
 800ed58:	6863      	ldr	r3, [r4, #4]
 800ed5a:	dd0c      	ble.n	800ed76 <_printf_float+0x19e>
 800ed5c:	6121      	str	r1, [r4, #16]
 800ed5e:	b913      	cbnz	r3, 800ed66 <_printf_float+0x18e>
 800ed60:	6822      	ldr	r2, [r4, #0]
 800ed62:	07d2      	lsls	r2, r2, #31
 800ed64:	d502      	bpl.n	800ed6c <_printf_float+0x194>
 800ed66:	3301      	adds	r3, #1
 800ed68:	440b      	add	r3, r1
 800ed6a:	6123      	str	r3, [r4, #16]
 800ed6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed70:	f04f 0900 	mov.w	r9, #0
 800ed74:	e7d9      	b.n	800ed2a <_printf_float+0x152>
 800ed76:	b913      	cbnz	r3, 800ed7e <_printf_float+0x1a6>
 800ed78:	6822      	ldr	r2, [r4, #0]
 800ed7a:	07d0      	lsls	r0, r2, #31
 800ed7c:	d501      	bpl.n	800ed82 <_printf_float+0x1aa>
 800ed7e:	3302      	adds	r3, #2
 800ed80:	e7f3      	b.n	800ed6a <_printf_float+0x192>
 800ed82:	2301      	movs	r3, #1
 800ed84:	e7f1      	b.n	800ed6a <_printf_float+0x192>
 800ed86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ed8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	db05      	blt.n	800ed9e <_printf_float+0x1c6>
 800ed92:	6822      	ldr	r2, [r4, #0]
 800ed94:	6123      	str	r3, [r4, #16]
 800ed96:	07d1      	lsls	r1, r2, #31
 800ed98:	d5e8      	bpl.n	800ed6c <_printf_float+0x194>
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	e7e5      	b.n	800ed6a <_printf_float+0x192>
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	bfd4      	ite	le
 800eda2:	f1c3 0302 	rsble	r3, r3, #2
 800eda6:	2301      	movgt	r3, #1
 800eda8:	4413      	add	r3, r2
 800edaa:	e7de      	b.n	800ed6a <_printf_float+0x192>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	055a      	lsls	r2, r3, #21
 800edb0:	d407      	bmi.n	800edc2 <_printf_float+0x1ea>
 800edb2:	6923      	ldr	r3, [r4, #16]
 800edb4:	4642      	mov	r2, r8
 800edb6:	4631      	mov	r1, r6
 800edb8:	4628      	mov	r0, r5
 800edba:	47b8      	blx	r7
 800edbc:	3001      	adds	r0, #1
 800edbe:	d12b      	bne.n	800ee18 <_printf_float+0x240>
 800edc0:	e767      	b.n	800ec92 <_printf_float+0xba>
 800edc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800edc6:	f240 80dc 	bls.w	800ef82 <_printf_float+0x3aa>
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edd2:	f7f1 fe89 	bl	8000ae8 <__aeabi_dcmpeq>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d033      	beq.n	800ee42 <_printf_float+0x26a>
 800edda:	2301      	movs	r3, #1
 800eddc:	4a41      	ldr	r2, [pc, #260]	; (800eee4 <_printf_float+0x30c>)
 800edde:	4631      	mov	r1, r6
 800ede0:	4628      	mov	r0, r5
 800ede2:	47b8      	blx	r7
 800ede4:	3001      	adds	r0, #1
 800ede6:	f43f af54 	beq.w	800ec92 <_printf_float+0xba>
 800edea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edee:	429a      	cmp	r2, r3
 800edf0:	db02      	blt.n	800edf8 <_printf_float+0x220>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	07d8      	lsls	r0, r3, #31
 800edf6:	d50f      	bpl.n	800ee18 <_printf_float+0x240>
 800edf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edfc:	4631      	mov	r1, r6
 800edfe:	4628      	mov	r0, r5
 800ee00:	47b8      	blx	r7
 800ee02:	3001      	adds	r0, #1
 800ee04:	f43f af45 	beq.w	800ec92 <_printf_float+0xba>
 800ee08:	f04f 0800 	mov.w	r8, #0
 800ee0c:	f104 091a 	add.w	r9, r4, #26
 800ee10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee12:	3b01      	subs	r3, #1
 800ee14:	4543      	cmp	r3, r8
 800ee16:	dc09      	bgt.n	800ee2c <_printf_float+0x254>
 800ee18:	6823      	ldr	r3, [r4, #0]
 800ee1a:	079b      	lsls	r3, r3, #30
 800ee1c:	f100 8103 	bmi.w	800f026 <_printf_float+0x44e>
 800ee20:	68e0      	ldr	r0, [r4, #12]
 800ee22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee24:	4298      	cmp	r0, r3
 800ee26:	bfb8      	it	lt
 800ee28:	4618      	movlt	r0, r3
 800ee2a:	e734      	b.n	800ec96 <_printf_float+0xbe>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	464a      	mov	r2, r9
 800ee30:	4631      	mov	r1, r6
 800ee32:	4628      	mov	r0, r5
 800ee34:	47b8      	blx	r7
 800ee36:	3001      	adds	r0, #1
 800ee38:	f43f af2b 	beq.w	800ec92 <_printf_float+0xba>
 800ee3c:	f108 0801 	add.w	r8, r8, #1
 800ee40:	e7e6      	b.n	800ee10 <_printf_float+0x238>
 800ee42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	dc2b      	bgt.n	800eea0 <_printf_float+0x2c8>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	4a26      	ldr	r2, [pc, #152]	; (800eee4 <_printf_float+0x30c>)
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	4628      	mov	r0, r5
 800ee50:	47b8      	blx	r7
 800ee52:	3001      	adds	r0, #1
 800ee54:	f43f af1d 	beq.w	800ec92 <_printf_float+0xba>
 800ee58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee5a:	b923      	cbnz	r3, 800ee66 <_printf_float+0x28e>
 800ee5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5e:	b913      	cbnz	r3, 800ee66 <_printf_float+0x28e>
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	07d9      	lsls	r1, r3, #31
 800ee64:	d5d8      	bpl.n	800ee18 <_printf_float+0x240>
 800ee66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	47b8      	blx	r7
 800ee70:	3001      	adds	r0, #1
 800ee72:	f43f af0e 	beq.w	800ec92 <_printf_float+0xba>
 800ee76:	f04f 0900 	mov.w	r9, #0
 800ee7a:	f104 0a1a 	add.w	sl, r4, #26
 800ee7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee80:	425b      	negs	r3, r3
 800ee82:	454b      	cmp	r3, r9
 800ee84:	dc01      	bgt.n	800ee8a <_printf_float+0x2b2>
 800ee86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee88:	e794      	b.n	800edb4 <_printf_float+0x1dc>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4652      	mov	r2, sl
 800ee8e:	4631      	mov	r1, r6
 800ee90:	4628      	mov	r0, r5
 800ee92:	47b8      	blx	r7
 800ee94:	3001      	adds	r0, #1
 800ee96:	f43f aefc 	beq.w	800ec92 <_printf_float+0xba>
 800ee9a:	f109 0901 	add.w	r9, r9, #1
 800ee9e:	e7ee      	b.n	800ee7e <_printf_float+0x2a6>
 800eea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eea4:	429a      	cmp	r2, r3
 800eea6:	bfa8      	it	ge
 800eea8:	461a      	movge	r2, r3
 800eeaa:	2a00      	cmp	r2, #0
 800eeac:	4691      	mov	r9, r2
 800eeae:	dd07      	ble.n	800eec0 <_printf_float+0x2e8>
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	4642      	mov	r2, r8
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	47b8      	blx	r7
 800eeba:	3001      	adds	r0, #1
 800eebc:	f43f aee9 	beq.w	800ec92 <_printf_float+0xba>
 800eec0:	f104 031a 	add.w	r3, r4, #26
 800eec4:	f04f 0b00 	mov.w	fp, #0
 800eec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eecc:	9306      	str	r3, [sp, #24]
 800eece:	e015      	b.n	800eefc <_printf_float+0x324>
 800eed0:	7fefffff 	.word	0x7fefffff
 800eed4:	0801a81c 	.word	0x0801a81c
 800eed8:	0801a818 	.word	0x0801a818
 800eedc:	0801a824 	.word	0x0801a824
 800eee0:	0801a820 	.word	0x0801a820
 800eee4:	0801a828 	.word	0x0801a828
 800eee8:	2301      	movs	r3, #1
 800eeea:	9a06      	ldr	r2, [sp, #24]
 800eeec:	4631      	mov	r1, r6
 800eeee:	4628      	mov	r0, r5
 800eef0:	47b8      	blx	r7
 800eef2:	3001      	adds	r0, #1
 800eef4:	f43f aecd 	beq.w	800ec92 <_printf_float+0xba>
 800eef8:	f10b 0b01 	add.w	fp, fp, #1
 800eefc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ef00:	ebaa 0309 	sub.w	r3, sl, r9
 800ef04:	455b      	cmp	r3, fp
 800ef06:	dcef      	bgt.n	800eee8 <_printf_float+0x310>
 800ef08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	44d0      	add	r8, sl
 800ef10:	db15      	blt.n	800ef3e <_printf_float+0x366>
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	07da      	lsls	r2, r3, #31
 800ef16:	d412      	bmi.n	800ef3e <_printf_float+0x366>
 800ef18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef1c:	eba3 020a 	sub.w	r2, r3, sl
 800ef20:	eba3 0a01 	sub.w	sl, r3, r1
 800ef24:	4592      	cmp	sl, r2
 800ef26:	bfa8      	it	ge
 800ef28:	4692      	movge	sl, r2
 800ef2a:	f1ba 0f00 	cmp.w	sl, #0
 800ef2e:	dc0e      	bgt.n	800ef4e <_printf_float+0x376>
 800ef30:	f04f 0800 	mov.w	r8, #0
 800ef34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef38:	f104 091a 	add.w	r9, r4, #26
 800ef3c:	e019      	b.n	800ef72 <_printf_float+0x39a>
 800ef3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef42:	4631      	mov	r1, r6
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b8      	blx	r7
 800ef48:	3001      	adds	r0, #1
 800ef4a:	d1e5      	bne.n	800ef18 <_printf_float+0x340>
 800ef4c:	e6a1      	b.n	800ec92 <_printf_float+0xba>
 800ef4e:	4653      	mov	r3, sl
 800ef50:	4642      	mov	r2, r8
 800ef52:	4631      	mov	r1, r6
 800ef54:	4628      	mov	r0, r5
 800ef56:	47b8      	blx	r7
 800ef58:	3001      	adds	r0, #1
 800ef5a:	d1e9      	bne.n	800ef30 <_printf_float+0x358>
 800ef5c:	e699      	b.n	800ec92 <_printf_float+0xba>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	464a      	mov	r2, r9
 800ef62:	4631      	mov	r1, r6
 800ef64:	4628      	mov	r0, r5
 800ef66:	47b8      	blx	r7
 800ef68:	3001      	adds	r0, #1
 800ef6a:	f43f ae92 	beq.w	800ec92 <_printf_float+0xba>
 800ef6e:	f108 0801 	add.w	r8, r8, #1
 800ef72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef76:	1a9b      	subs	r3, r3, r2
 800ef78:	eba3 030a 	sub.w	r3, r3, sl
 800ef7c:	4543      	cmp	r3, r8
 800ef7e:	dcee      	bgt.n	800ef5e <_printf_float+0x386>
 800ef80:	e74a      	b.n	800ee18 <_printf_float+0x240>
 800ef82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef84:	2a01      	cmp	r2, #1
 800ef86:	dc01      	bgt.n	800ef8c <_printf_float+0x3b4>
 800ef88:	07db      	lsls	r3, r3, #31
 800ef8a:	d53a      	bpl.n	800f002 <_printf_float+0x42a>
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	4642      	mov	r2, r8
 800ef90:	4631      	mov	r1, r6
 800ef92:	4628      	mov	r0, r5
 800ef94:	47b8      	blx	r7
 800ef96:	3001      	adds	r0, #1
 800ef98:	f43f ae7b 	beq.w	800ec92 <_printf_float+0xba>
 800ef9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efa0:	4631      	mov	r1, r6
 800efa2:	4628      	mov	r0, r5
 800efa4:	47b8      	blx	r7
 800efa6:	3001      	adds	r0, #1
 800efa8:	f108 0801 	add.w	r8, r8, #1
 800efac:	f43f ae71 	beq.w	800ec92 <_printf_float+0xba>
 800efb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb2:	2200      	movs	r2, #0
 800efb4:	f103 3aff 	add.w	sl, r3, #4294967295
 800efb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efbc:	2300      	movs	r3, #0
 800efbe:	f7f1 fd93 	bl	8000ae8 <__aeabi_dcmpeq>
 800efc2:	b9c8      	cbnz	r0, 800eff8 <_printf_float+0x420>
 800efc4:	4653      	mov	r3, sl
 800efc6:	4642      	mov	r2, r8
 800efc8:	4631      	mov	r1, r6
 800efca:	4628      	mov	r0, r5
 800efcc:	47b8      	blx	r7
 800efce:	3001      	adds	r0, #1
 800efd0:	d10e      	bne.n	800eff0 <_printf_float+0x418>
 800efd2:	e65e      	b.n	800ec92 <_printf_float+0xba>
 800efd4:	2301      	movs	r3, #1
 800efd6:	4652      	mov	r2, sl
 800efd8:	4631      	mov	r1, r6
 800efda:	4628      	mov	r0, r5
 800efdc:	47b8      	blx	r7
 800efde:	3001      	adds	r0, #1
 800efe0:	f43f ae57 	beq.w	800ec92 <_printf_float+0xba>
 800efe4:	f108 0801 	add.w	r8, r8, #1
 800efe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efea:	3b01      	subs	r3, #1
 800efec:	4543      	cmp	r3, r8
 800efee:	dcf1      	bgt.n	800efd4 <_printf_float+0x3fc>
 800eff0:	464b      	mov	r3, r9
 800eff2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eff6:	e6de      	b.n	800edb6 <_printf_float+0x1de>
 800eff8:	f04f 0800 	mov.w	r8, #0
 800effc:	f104 0a1a 	add.w	sl, r4, #26
 800f000:	e7f2      	b.n	800efe8 <_printf_float+0x410>
 800f002:	2301      	movs	r3, #1
 800f004:	e7df      	b.n	800efc6 <_printf_float+0x3ee>
 800f006:	2301      	movs	r3, #1
 800f008:	464a      	mov	r2, r9
 800f00a:	4631      	mov	r1, r6
 800f00c:	4628      	mov	r0, r5
 800f00e:	47b8      	blx	r7
 800f010:	3001      	adds	r0, #1
 800f012:	f43f ae3e 	beq.w	800ec92 <_printf_float+0xba>
 800f016:	f108 0801 	add.w	r8, r8, #1
 800f01a:	68e3      	ldr	r3, [r4, #12]
 800f01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	4543      	cmp	r3, r8
 800f022:	dcf0      	bgt.n	800f006 <_printf_float+0x42e>
 800f024:	e6fc      	b.n	800ee20 <_printf_float+0x248>
 800f026:	f04f 0800 	mov.w	r8, #0
 800f02a:	f104 0919 	add.w	r9, r4, #25
 800f02e:	e7f4      	b.n	800f01a <_printf_float+0x442>
 800f030:	2900      	cmp	r1, #0
 800f032:	f43f ae8b 	beq.w	800ed4c <_printf_float+0x174>
 800f036:	2300      	movs	r3, #0
 800f038:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f03c:	ab09      	add	r3, sp, #36	; 0x24
 800f03e:	9300      	str	r3, [sp, #0]
 800f040:	ec49 8b10 	vmov	d0, r8, r9
 800f044:	6022      	str	r2, [r4, #0]
 800f046:	f8cd a004 	str.w	sl, [sp, #4]
 800f04a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f04e:	4628      	mov	r0, r5
 800f050:	f7ff fd2e 	bl	800eab0 <__cvt>
 800f054:	4680      	mov	r8, r0
 800f056:	e648      	b.n	800ecea <_printf_float+0x112>

0800f058 <_printf_common>:
 800f058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f05c:	4691      	mov	r9, r2
 800f05e:	461f      	mov	r7, r3
 800f060:	688a      	ldr	r2, [r1, #8]
 800f062:	690b      	ldr	r3, [r1, #16]
 800f064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f068:	4293      	cmp	r3, r2
 800f06a:	bfb8      	it	lt
 800f06c:	4613      	movlt	r3, r2
 800f06e:	f8c9 3000 	str.w	r3, [r9]
 800f072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f076:	4606      	mov	r6, r0
 800f078:	460c      	mov	r4, r1
 800f07a:	b112      	cbz	r2, 800f082 <_printf_common+0x2a>
 800f07c:	3301      	adds	r3, #1
 800f07e:	f8c9 3000 	str.w	r3, [r9]
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	0699      	lsls	r1, r3, #26
 800f086:	bf42      	ittt	mi
 800f088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f08c:	3302      	addmi	r3, #2
 800f08e:	f8c9 3000 	strmi.w	r3, [r9]
 800f092:	6825      	ldr	r5, [r4, #0]
 800f094:	f015 0506 	ands.w	r5, r5, #6
 800f098:	d107      	bne.n	800f0aa <_printf_common+0x52>
 800f09a:	f104 0a19 	add.w	sl, r4, #25
 800f09e:	68e3      	ldr	r3, [r4, #12]
 800f0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	42ab      	cmp	r3, r5
 800f0a8:	dc28      	bgt.n	800f0fc <_printf_common+0xa4>
 800f0aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f0ae:	6822      	ldr	r2, [r4, #0]
 800f0b0:	3300      	adds	r3, #0
 800f0b2:	bf18      	it	ne
 800f0b4:	2301      	movne	r3, #1
 800f0b6:	0692      	lsls	r2, r2, #26
 800f0b8:	d42d      	bmi.n	800f116 <_printf_common+0xbe>
 800f0ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0be:	4639      	mov	r1, r7
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	47c0      	blx	r8
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d020      	beq.n	800f10a <_printf_common+0xb2>
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	68e5      	ldr	r5, [r4, #12]
 800f0cc:	f8d9 2000 	ldr.w	r2, [r9]
 800f0d0:	f003 0306 	and.w	r3, r3, #6
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	bf08      	it	eq
 800f0d8:	1aad      	subeq	r5, r5, r2
 800f0da:	68a3      	ldr	r3, [r4, #8]
 800f0dc:	6922      	ldr	r2, [r4, #16]
 800f0de:	bf0c      	ite	eq
 800f0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0e4:	2500      	movne	r5, #0
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	bfc4      	itt	gt
 800f0ea:	1a9b      	subgt	r3, r3, r2
 800f0ec:	18ed      	addgt	r5, r5, r3
 800f0ee:	f04f 0900 	mov.w	r9, #0
 800f0f2:	341a      	adds	r4, #26
 800f0f4:	454d      	cmp	r5, r9
 800f0f6:	d11a      	bne.n	800f12e <_printf_common+0xd6>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	e008      	b.n	800f10e <_printf_common+0xb6>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	4652      	mov	r2, sl
 800f100:	4639      	mov	r1, r7
 800f102:	4630      	mov	r0, r6
 800f104:	47c0      	blx	r8
 800f106:	3001      	adds	r0, #1
 800f108:	d103      	bne.n	800f112 <_printf_common+0xba>
 800f10a:	f04f 30ff 	mov.w	r0, #4294967295
 800f10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f112:	3501      	adds	r5, #1
 800f114:	e7c3      	b.n	800f09e <_printf_common+0x46>
 800f116:	18e1      	adds	r1, r4, r3
 800f118:	1c5a      	adds	r2, r3, #1
 800f11a:	2030      	movs	r0, #48	; 0x30
 800f11c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f120:	4422      	add	r2, r4
 800f122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f12a:	3302      	adds	r3, #2
 800f12c:	e7c5      	b.n	800f0ba <_printf_common+0x62>
 800f12e:	2301      	movs	r3, #1
 800f130:	4622      	mov	r2, r4
 800f132:	4639      	mov	r1, r7
 800f134:	4630      	mov	r0, r6
 800f136:	47c0      	blx	r8
 800f138:	3001      	adds	r0, #1
 800f13a:	d0e6      	beq.n	800f10a <_printf_common+0xb2>
 800f13c:	f109 0901 	add.w	r9, r9, #1
 800f140:	e7d8      	b.n	800f0f4 <_printf_common+0x9c>
	...

0800f144 <_sbrk_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4c06      	ldr	r4, [pc, #24]	; (800f160 <_sbrk_r+0x1c>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4605      	mov	r5, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	f001 fac8 	bl	80106e4 <_sbrk>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_sbrk_r+0x1a>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_sbrk_r+0x1a>
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	20018ec4 	.word	0x20018ec4

0800f164 <quorem>:
 800f164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	6903      	ldr	r3, [r0, #16]
 800f16a:	690c      	ldr	r4, [r1, #16]
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	4680      	mov	r8, r0
 800f170:	f2c0 8082 	blt.w	800f278 <quorem+0x114>
 800f174:	3c01      	subs	r4, #1
 800f176:	f101 0714 	add.w	r7, r1, #20
 800f17a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f17e:	f100 0614 	add.w	r6, r0, #20
 800f182:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f186:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f18a:	eb06 030c 	add.w	r3, r6, ip
 800f18e:	3501      	adds	r5, #1
 800f190:	eb07 090c 	add.w	r9, r7, ip
 800f194:	9301      	str	r3, [sp, #4]
 800f196:	fbb0 f5f5 	udiv	r5, r0, r5
 800f19a:	b395      	cbz	r5, 800f202 <quorem+0x9e>
 800f19c:	f04f 0a00 	mov.w	sl, #0
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	46b6      	mov	lr, r6
 800f1a4:	46d3      	mov	fp, sl
 800f1a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f1aa:	b293      	uxth	r3, r2
 800f1ac:	fb05 a303 	mla	r3, r5, r3, sl
 800f1b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	ebab 0303 	sub.w	r3, fp, r3
 800f1ba:	0c12      	lsrs	r2, r2, #16
 800f1bc:	f8de b000 	ldr.w	fp, [lr]
 800f1c0:	fb05 a202 	mla	r2, r5, r2, sl
 800f1c4:	fa13 f38b 	uxtah	r3, r3, fp
 800f1c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f1cc:	fa1f fb82 	uxth.w	fp, r2
 800f1d0:	f8de 2000 	ldr.w	r2, [lr]
 800f1d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f1d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1e2:	4581      	cmp	r9, r0
 800f1e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f1e8:	f84e 3b04 	str.w	r3, [lr], #4
 800f1ec:	d2db      	bcs.n	800f1a6 <quorem+0x42>
 800f1ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800f1f2:	b933      	cbnz	r3, 800f202 <quorem+0x9e>
 800f1f4:	9b01      	ldr	r3, [sp, #4]
 800f1f6:	3b04      	subs	r3, #4
 800f1f8:	429e      	cmp	r6, r3
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	d330      	bcc.n	800f260 <quorem+0xfc>
 800f1fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800f202:	4640      	mov	r0, r8
 800f204:	f001 f81a 	bl	801023c <__mcmp>
 800f208:	2800      	cmp	r0, #0
 800f20a:	db25      	blt.n	800f258 <quorem+0xf4>
 800f20c:	3501      	adds	r5, #1
 800f20e:	4630      	mov	r0, r6
 800f210:	f04f 0c00 	mov.w	ip, #0
 800f214:	f857 2b04 	ldr.w	r2, [r7], #4
 800f218:	f8d0 e000 	ldr.w	lr, [r0]
 800f21c:	b293      	uxth	r3, r2
 800f21e:	ebac 0303 	sub.w	r3, ip, r3
 800f222:	0c12      	lsrs	r2, r2, #16
 800f224:	fa13 f38e 	uxtah	r3, r3, lr
 800f228:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f22c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f230:	b29b      	uxth	r3, r3
 800f232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f236:	45b9      	cmp	r9, r7
 800f238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f23c:	f840 3b04 	str.w	r3, [r0], #4
 800f240:	d2e8      	bcs.n	800f214 <quorem+0xb0>
 800f242:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f246:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f24a:	b92a      	cbnz	r2, 800f258 <quorem+0xf4>
 800f24c:	3b04      	subs	r3, #4
 800f24e:	429e      	cmp	r6, r3
 800f250:	461a      	mov	r2, r3
 800f252:	d30b      	bcc.n	800f26c <quorem+0x108>
 800f254:	f8c8 4010 	str.w	r4, [r8, #16]
 800f258:	4628      	mov	r0, r5
 800f25a:	b003      	add	sp, #12
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f260:	6812      	ldr	r2, [r2, #0]
 800f262:	3b04      	subs	r3, #4
 800f264:	2a00      	cmp	r2, #0
 800f266:	d1ca      	bne.n	800f1fe <quorem+0x9a>
 800f268:	3c01      	subs	r4, #1
 800f26a:	e7c5      	b.n	800f1f8 <quorem+0x94>
 800f26c:	6812      	ldr	r2, [r2, #0]
 800f26e:	3b04      	subs	r3, #4
 800f270:	2a00      	cmp	r2, #0
 800f272:	d1ef      	bne.n	800f254 <quorem+0xf0>
 800f274:	3c01      	subs	r4, #1
 800f276:	e7ea      	b.n	800f24e <quorem+0xea>
 800f278:	2000      	movs	r0, #0
 800f27a:	e7ee      	b.n	800f25a <quorem+0xf6>
 800f27c:	0000      	movs	r0, r0
	...

0800f280 <_dtoa_r>:
 800f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	ec57 6b10 	vmov	r6, r7, d0
 800f288:	b097      	sub	sp, #92	; 0x5c
 800f28a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f28c:	9106      	str	r1, [sp, #24]
 800f28e:	4604      	mov	r4, r0
 800f290:	920b      	str	r2, [sp, #44]	; 0x2c
 800f292:	9312      	str	r3, [sp, #72]	; 0x48
 800f294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f298:	e9cd 6700 	strd	r6, r7, [sp]
 800f29c:	b93d      	cbnz	r5, 800f2ae <_dtoa_r+0x2e>
 800f29e:	2010      	movs	r0, #16
 800f2a0:	f7ff fb3a 	bl	800e918 <malloc>
 800f2a4:	6260      	str	r0, [r4, #36]	; 0x24
 800f2a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2aa:	6005      	str	r5, [r0, #0]
 800f2ac:	60c5      	str	r5, [r0, #12]
 800f2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2b0:	6819      	ldr	r1, [r3, #0]
 800f2b2:	b151      	cbz	r1, 800f2ca <_dtoa_r+0x4a>
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	604a      	str	r2, [r1, #4]
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	4093      	lsls	r3, r2
 800f2bc:	608b      	str	r3, [r1, #8]
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 fdda 	bl	800fe78 <_Bfree>
 800f2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	1e3b      	subs	r3, r7, #0
 800f2cc:	bfbb      	ittet	lt
 800f2ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2d2:	9301      	strlt	r3, [sp, #4]
 800f2d4:	2300      	movge	r3, #0
 800f2d6:	2201      	movlt	r2, #1
 800f2d8:	bfac      	ite	ge
 800f2da:	f8c8 3000 	strge.w	r3, [r8]
 800f2de:	f8c8 2000 	strlt.w	r2, [r8]
 800f2e2:	4baf      	ldr	r3, [pc, #700]	; (800f5a0 <_dtoa_r+0x320>)
 800f2e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f2e8:	ea33 0308 	bics.w	r3, r3, r8
 800f2ec:	d114      	bne.n	800f318 <_dtoa_r+0x98>
 800f2ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f2f4:	6013      	str	r3, [r2, #0]
 800f2f6:	9b00      	ldr	r3, [sp, #0]
 800f2f8:	b923      	cbnz	r3, 800f304 <_dtoa_r+0x84>
 800f2fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f2fe:	2800      	cmp	r0, #0
 800f300:	f000 8542 	beq.w	800fd88 <_dtoa_r+0xb08>
 800f304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f306:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f5b4 <_dtoa_r+0x334>
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f000 8544 	beq.w	800fd98 <_dtoa_r+0xb18>
 800f310:	f10b 0303 	add.w	r3, fp, #3
 800f314:	f000 bd3e 	b.w	800fd94 <_dtoa_r+0xb14>
 800f318:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f31c:	2200      	movs	r2, #0
 800f31e:	2300      	movs	r3, #0
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	f7f1 fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f328:	4681      	mov	r9, r0
 800f32a:	b168      	cbz	r0, 800f348 <_dtoa_r+0xc8>
 800f32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f32e:	2301      	movs	r3, #1
 800f330:	6013      	str	r3, [r2, #0]
 800f332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 8524 	beq.w	800fd82 <_dtoa_r+0xb02>
 800f33a:	4b9a      	ldr	r3, [pc, #616]	; (800f5a4 <_dtoa_r+0x324>)
 800f33c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f33e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f342:	6013      	str	r3, [r2, #0]
 800f344:	f000 bd28 	b.w	800fd98 <_dtoa_r+0xb18>
 800f348:	aa14      	add	r2, sp, #80	; 0x50
 800f34a:	a915      	add	r1, sp, #84	; 0x54
 800f34c:	ec47 6b10 	vmov	d0, r6, r7
 800f350:	4620      	mov	r0, r4
 800f352:	f000 ffea 	bl	801032a <__d2b>
 800f356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f35a:	9004      	str	r0, [sp, #16]
 800f35c:	2d00      	cmp	r5, #0
 800f35e:	d07c      	beq.n	800f45a <_dtoa_r+0x1da>
 800f360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f364:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f368:	46b2      	mov	sl, r6
 800f36a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f36e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f372:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f376:	2200      	movs	r2, #0
 800f378:	4b8b      	ldr	r3, [pc, #556]	; (800f5a8 <_dtoa_r+0x328>)
 800f37a:	4650      	mov	r0, sl
 800f37c:	4659      	mov	r1, fp
 800f37e:	f7f0 ff93 	bl	80002a8 <__aeabi_dsub>
 800f382:	a381      	add	r3, pc, #516	; (adr r3, 800f588 <_dtoa_r+0x308>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f7f1 f946 	bl	8000618 <__aeabi_dmul>
 800f38c:	a380      	add	r3, pc, #512	; (adr r3, 800f590 <_dtoa_r+0x310>)
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	f7f0 ff8b 	bl	80002ac <__adddf3>
 800f396:	4606      	mov	r6, r0
 800f398:	4628      	mov	r0, r5
 800f39a:	460f      	mov	r7, r1
 800f39c:	f7f1 f8d2 	bl	8000544 <__aeabi_i2d>
 800f3a0:	a37d      	add	r3, pc, #500	; (adr r3, 800f598 <_dtoa_r+0x318>)
 800f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a6:	f7f1 f937 	bl	8000618 <__aeabi_dmul>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	f7f0 ff7b 	bl	80002ac <__adddf3>
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	460f      	mov	r7, r1
 800f3ba:	f7f1 fbdd 	bl	8000b78 <__aeabi_d2iz>
 800f3be:	2200      	movs	r2, #0
 800f3c0:	4682      	mov	sl, r0
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	4639      	mov	r1, r7
 800f3c8:	f7f1 fb98 	bl	8000afc <__aeabi_dcmplt>
 800f3cc:	b148      	cbz	r0, 800f3e2 <_dtoa_r+0x162>
 800f3ce:	4650      	mov	r0, sl
 800f3d0:	f7f1 f8b8 	bl	8000544 <__aeabi_i2d>
 800f3d4:	4632      	mov	r2, r6
 800f3d6:	463b      	mov	r3, r7
 800f3d8:	f7f1 fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3dc:	b908      	cbnz	r0, 800f3e2 <_dtoa_r+0x162>
 800f3de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3e2:	f1ba 0f16 	cmp.w	sl, #22
 800f3e6:	d859      	bhi.n	800f49c <_dtoa_r+0x21c>
 800f3e8:	4970      	ldr	r1, [pc, #448]	; (800f5ac <_dtoa_r+0x32c>)
 800f3ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3f6:	f7f1 fb9f 	bl	8000b38 <__aeabi_dcmpgt>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d050      	beq.n	800f4a0 <_dtoa_r+0x220>
 800f3fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f402:	2300      	movs	r3, #0
 800f404:	930f      	str	r3, [sp, #60]	; 0x3c
 800f406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f408:	1b5d      	subs	r5, r3, r5
 800f40a:	f1b5 0801 	subs.w	r8, r5, #1
 800f40e:	bf49      	itett	mi
 800f410:	f1c5 0301 	rsbmi	r3, r5, #1
 800f414:	2300      	movpl	r3, #0
 800f416:	9305      	strmi	r3, [sp, #20]
 800f418:	f04f 0800 	movmi.w	r8, #0
 800f41c:	bf58      	it	pl
 800f41e:	9305      	strpl	r3, [sp, #20]
 800f420:	f1ba 0f00 	cmp.w	sl, #0
 800f424:	db3e      	blt.n	800f4a4 <_dtoa_r+0x224>
 800f426:	2300      	movs	r3, #0
 800f428:	44d0      	add	r8, sl
 800f42a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f42e:	9307      	str	r3, [sp, #28]
 800f430:	9b06      	ldr	r3, [sp, #24]
 800f432:	2b09      	cmp	r3, #9
 800f434:	f200 8090 	bhi.w	800f558 <_dtoa_r+0x2d8>
 800f438:	2b05      	cmp	r3, #5
 800f43a:	bfc4      	itt	gt
 800f43c:	3b04      	subgt	r3, #4
 800f43e:	9306      	strgt	r3, [sp, #24]
 800f440:	9b06      	ldr	r3, [sp, #24]
 800f442:	f1a3 0302 	sub.w	r3, r3, #2
 800f446:	bfcc      	ite	gt
 800f448:	2500      	movgt	r5, #0
 800f44a:	2501      	movle	r5, #1
 800f44c:	2b03      	cmp	r3, #3
 800f44e:	f200 808f 	bhi.w	800f570 <_dtoa_r+0x2f0>
 800f452:	e8df f003 	tbb	[pc, r3]
 800f456:	7f7d      	.short	0x7f7d
 800f458:	7131      	.short	0x7131
 800f45a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f45e:	441d      	add	r5, r3
 800f460:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f464:	2820      	cmp	r0, #32
 800f466:	dd13      	ble.n	800f490 <_dtoa_r+0x210>
 800f468:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f46c:	9b00      	ldr	r3, [sp, #0]
 800f46e:	fa08 f800 	lsl.w	r8, r8, r0
 800f472:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f476:	fa23 f000 	lsr.w	r0, r3, r0
 800f47a:	ea48 0000 	orr.w	r0, r8, r0
 800f47e:	f7f1 f851 	bl	8000524 <__aeabi_ui2d>
 800f482:	2301      	movs	r3, #1
 800f484:	4682      	mov	sl, r0
 800f486:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f48a:	3d01      	subs	r5, #1
 800f48c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f48e:	e772      	b.n	800f376 <_dtoa_r+0xf6>
 800f490:	9b00      	ldr	r3, [sp, #0]
 800f492:	f1c0 0020 	rsb	r0, r0, #32
 800f496:	fa03 f000 	lsl.w	r0, r3, r0
 800f49a:	e7f0      	b.n	800f47e <_dtoa_r+0x1fe>
 800f49c:	2301      	movs	r3, #1
 800f49e:	e7b1      	b.n	800f404 <_dtoa_r+0x184>
 800f4a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f4a2:	e7b0      	b.n	800f406 <_dtoa_r+0x186>
 800f4a4:	9b05      	ldr	r3, [sp, #20]
 800f4a6:	eba3 030a 	sub.w	r3, r3, sl
 800f4aa:	9305      	str	r3, [sp, #20]
 800f4ac:	f1ca 0300 	rsb	r3, sl, #0
 800f4b0:	9307      	str	r3, [sp, #28]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	930e      	str	r3, [sp, #56]	; 0x38
 800f4b6:	e7bb      	b.n	800f430 <_dtoa_r+0x1b0>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dd59      	ble.n	800f576 <_dtoa_r+0x2f6>
 800f4c2:	9302      	str	r3, [sp, #8]
 800f4c4:	4699      	mov	r9, r3
 800f4c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	6072      	str	r2, [r6, #4]
 800f4cc:	2204      	movs	r2, #4
 800f4ce:	f102 0014 	add.w	r0, r2, #20
 800f4d2:	4298      	cmp	r0, r3
 800f4d4:	6871      	ldr	r1, [r6, #4]
 800f4d6:	d953      	bls.n	800f580 <_dtoa_r+0x300>
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fc99 	bl	800fe10 <_Balloc>
 800f4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4e0:	6030      	str	r0, [r6, #0]
 800f4e2:	f1b9 0f0e 	cmp.w	r9, #14
 800f4e6:	f8d3 b000 	ldr.w	fp, [r3]
 800f4ea:	f200 80e6 	bhi.w	800f6ba <_dtoa_r+0x43a>
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	f000 80e3 	beq.w	800f6ba <_dtoa_r+0x43a>
 800f4f4:	ed9d 7b00 	vldr	d7, [sp]
 800f4f8:	f1ba 0f00 	cmp.w	sl, #0
 800f4fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f500:	dd74      	ble.n	800f5ec <_dtoa_r+0x36c>
 800f502:	4a2a      	ldr	r2, [pc, #168]	; (800f5ac <_dtoa_r+0x32c>)
 800f504:	f00a 030f 	and.w	r3, sl, #15
 800f508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f50c:	ed93 7b00 	vldr	d7, [r3]
 800f510:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f514:	06f0      	lsls	r0, r6, #27
 800f516:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f51a:	d565      	bpl.n	800f5e8 <_dtoa_r+0x368>
 800f51c:	4b24      	ldr	r3, [pc, #144]	; (800f5b0 <_dtoa_r+0x330>)
 800f51e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f522:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f526:	f7f1 f9a1 	bl	800086c <__aeabi_ddiv>
 800f52a:	e9cd 0100 	strd	r0, r1, [sp]
 800f52e:	f006 060f 	and.w	r6, r6, #15
 800f532:	2503      	movs	r5, #3
 800f534:	4f1e      	ldr	r7, [pc, #120]	; (800f5b0 <_dtoa_r+0x330>)
 800f536:	e04c      	b.n	800f5d2 <_dtoa_r+0x352>
 800f538:	2301      	movs	r3, #1
 800f53a:	930a      	str	r3, [sp, #40]	; 0x28
 800f53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f53e:	4453      	add	r3, sl
 800f540:	f103 0901 	add.w	r9, r3, #1
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	464b      	mov	r3, r9
 800f548:	2b01      	cmp	r3, #1
 800f54a:	bfb8      	it	lt
 800f54c:	2301      	movlt	r3, #1
 800f54e:	e7ba      	b.n	800f4c6 <_dtoa_r+0x246>
 800f550:	2300      	movs	r3, #0
 800f552:	e7b2      	b.n	800f4ba <_dtoa_r+0x23a>
 800f554:	2300      	movs	r3, #0
 800f556:	e7f0      	b.n	800f53a <_dtoa_r+0x2ba>
 800f558:	2501      	movs	r5, #1
 800f55a:	2300      	movs	r3, #0
 800f55c:	9306      	str	r3, [sp, #24]
 800f55e:	950a      	str	r5, [sp, #40]	; 0x28
 800f560:	f04f 33ff 	mov.w	r3, #4294967295
 800f564:	9302      	str	r3, [sp, #8]
 800f566:	4699      	mov	r9, r3
 800f568:	2200      	movs	r2, #0
 800f56a:	2312      	movs	r3, #18
 800f56c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f56e:	e7aa      	b.n	800f4c6 <_dtoa_r+0x246>
 800f570:	2301      	movs	r3, #1
 800f572:	930a      	str	r3, [sp, #40]	; 0x28
 800f574:	e7f4      	b.n	800f560 <_dtoa_r+0x2e0>
 800f576:	2301      	movs	r3, #1
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	4699      	mov	r9, r3
 800f57c:	461a      	mov	r2, r3
 800f57e:	e7f5      	b.n	800f56c <_dtoa_r+0x2ec>
 800f580:	3101      	adds	r1, #1
 800f582:	6071      	str	r1, [r6, #4]
 800f584:	0052      	lsls	r2, r2, #1
 800f586:	e7a2      	b.n	800f4ce <_dtoa_r+0x24e>
 800f588:	636f4361 	.word	0x636f4361
 800f58c:	3fd287a7 	.word	0x3fd287a7
 800f590:	8b60c8b3 	.word	0x8b60c8b3
 800f594:	3fc68a28 	.word	0x3fc68a28
 800f598:	509f79fb 	.word	0x509f79fb
 800f59c:	3fd34413 	.word	0x3fd34413
 800f5a0:	7ff00000 	.word	0x7ff00000
 800f5a4:	0801a829 	.word	0x0801a829
 800f5a8:	3ff80000 	.word	0x3ff80000
 800f5ac:	0801a8c0 	.word	0x0801a8c0
 800f5b0:	0801a898 	.word	0x0801a898
 800f5b4:	0801a833 	.word	0x0801a833
 800f5b8:	07f1      	lsls	r1, r6, #31
 800f5ba:	d508      	bpl.n	800f5ce <_dtoa_r+0x34e>
 800f5bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c4:	f7f1 f828 	bl	8000618 <__aeabi_dmul>
 800f5c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f5cc:	3501      	adds	r5, #1
 800f5ce:	1076      	asrs	r6, r6, #1
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	d1f0      	bne.n	800f5b8 <_dtoa_r+0x338>
 800f5d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5de:	f7f1 f945 	bl	800086c <__aeabi_ddiv>
 800f5e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f5e6:	e01a      	b.n	800f61e <_dtoa_r+0x39e>
 800f5e8:	2502      	movs	r5, #2
 800f5ea:	e7a3      	b.n	800f534 <_dtoa_r+0x2b4>
 800f5ec:	f000 80a0 	beq.w	800f730 <_dtoa_r+0x4b0>
 800f5f0:	f1ca 0600 	rsb	r6, sl, #0
 800f5f4:	4b9f      	ldr	r3, [pc, #636]	; (800f874 <_dtoa_r+0x5f4>)
 800f5f6:	4fa0      	ldr	r7, [pc, #640]	; (800f878 <_dtoa_r+0x5f8>)
 800f5f8:	f006 020f 	and.w	r2, r6, #15
 800f5fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f608:	f7f1 f806 	bl	8000618 <__aeabi_dmul>
 800f60c:	e9cd 0100 	strd	r0, r1, [sp]
 800f610:	1136      	asrs	r6, r6, #4
 800f612:	2300      	movs	r3, #0
 800f614:	2502      	movs	r5, #2
 800f616:	2e00      	cmp	r6, #0
 800f618:	d17f      	bne.n	800f71a <_dtoa_r+0x49a>
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1e1      	bne.n	800f5e2 <_dtoa_r+0x362>
 800f61e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 8087 	beq.w	800f734 <_dtoa_r+0x4b4>
 800f626:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f62a:	2200      	movs	r2, #0
 800f62c:	4b93      	ldr	r3, [pc, #588]	; (800f87c <_dtoa_r+0x5fc>)
 800f62e:	4630      	mov	r0, r6
 800f630:	4639      	mov	r1, r7
 800f632:	f7f1 fa63 	bl	8000afc <__aeabi_dcmplt>
 800f636:	2800      	cmp	r0, #0
 800f638:	d07c      	beq.n	800f734 <_dtoa_r+0x4b4>
 800f63a:	f1b9 0f00 	cmp.w	r9, #0
 800f63e:	d079      	beq.n	800f734 <_dtoa_r+0x4b4>
 800f640:	9b02      	ldr	r3, [sp, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	dd35      	ble.n	800f6b2 <_dtoa_r+0x432>
 800f646:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f64a:	9308      	str	r3, [sp, #32]
 800f64c:	4639      	mov	r1, r7
 800f64e:	2200      	movs	r2, #0
 800f650:	4b8b      	ldr	r3, [pc, #556]	; (800f880 <_dtoa_r+0x600>)
 800f652:	4630      	mov	r0, r6
 800f654:	f7f0 ffe0 	bl	8000618 <__aeabi_dmul>
 800f658:	e9cd 0100 	strd	r0, r1, [sp]
 800f65c:	9f02      	ldr	r7, [sp, #8]
 800f65e:	3501      	adds	r5, #1
 800f660:	4628      	mov	r0, r5
 800f662:	f7f0 ff6f 	bl	8000544 <__aeabi_i2d>
 800f666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f66a:	f7f0 ffd5 	bl	8000618 <__aeabi_dmul>
 800f66e:	2200      	movs	r2, #0
 800f670:	4b84      	ldr	r3, [pc, #528]	; (800f884 <_dtoa_r+0x604>)
 800f672:	f7f0 fe1b 	bl	80002ac <__adddf3>
 800f676:	4605      	mov	r5, r0
 800f678:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f67c:	2f00      	cmp	r7, #0
 800f67e:	d15d      	bne.n	800f73c <_dtoa_r+0x4bc>
 800f680:	2200      	movs	r2, #0
 800f682:	4b81      	ldr	r3, [pc, #516]	; (800f888 <_dtoa_r+0x608>)
 800f684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f688:	f7f0 fe0e 	bl	80002a8 <__aeabi_dsub>
 800f68c:	462a      	mov	r2, r5
 800f68e:	4633      	mov	r3, r6
 800f690:	e9cd 0100 	strd	r0, r1, [sp]
 800f694:	f7f1 fa50 	bl	8000b38 <__aeabi_dcmpgt>
 800f698:	2800      	cmp	r0, #0
 800f69a:	f040 8288 	bne.w	800fbae <_dtoa_r+0x92e>
 800f69e:	462a      	mov	r2, r5
 800f6a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f6a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6a8:	f7f1 fa28 	bl	8000afc <__aeabi_dcmplt>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f040 827c 	bne.w	800fbaa <_dtoa_r+0x92a>
 800f6b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6b6:	e9cd 2300 	strd	r2, r3, [sp]
 800f6ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	f2c0 8150 	blt.w	800f962 <_dtoa_r+0x6e2>
 800f6c2:	f1ba 0f0e 	cmp.w	sl, #14
 800f6c6:	f300 814c 	bgt.w	800f962 <_dtoa_r+0x6e2>
 800f6ca:	4b6a      	ldr	r3, [pc, #424]	; (800f874 <_dtoa_r+0x5f4>)
 800f6cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6d0:	ed93 7b00 	vldr	d7, [r3]
 800f6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6dc:	f280 80d8 	bge.w	800f890 <_dtoa_r+0x610>
 800f6e0:	f1b9 0f00 	cmp.w	r9, #0
 800f6e4:	f300 80d4 	bgt.w	800f890 <_dtoa_r+0x610>
 800f6e8:	f040 825e 	bne.w	800fba8 <_dtoa_r+0x928>
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4b66      	ldr	r3, [pc, #408]	; (800f888 <_dtoa_r+0x608>)
 800f6f0:	ec51 0b17 	vmov	r0, r1, d7
 800f6f4:	f7f0 ff90 	bl	8000618 <__aeabi_dmul>
 800f6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6fc:	f7f1 fa12 	bl	8000b24 <__aeabi_dcmpge>
 800f700:	464f      	mov	r7, r9
 800f702:	464e      	mov	r6, r9
 800f704:	2800      	cmp	r0, #0
 800f706:	f040 8234 	bne.w	800fb72 <_dtoa_r+0x8f2>
 800f70a:	2331      	movs	r3, #49	; 0x31
 800f70c:	f10b 0501 	add.w	r5, fp, #1
 800f710:	f88b 3000 	strb.w	r3, [fp]
 800f714:	f10a 0a01 	add.w	sl, sl, #1
 800f718:	e22f      	b.n	800fb7a <_dtoa_r+0x8fa>
 800f71a:	07f2      	lsls	r2, r6, #31
 800f71c:	d505      	bpl.n	800f72a <_dtoa_r+0x4aa>
 800f71e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f722:	f7f0 ff79 	bl	8000618 <__aeabi_dmul>
 800f726:	3501      	adds	r5, #1
 800f728:	2301      	movs	r3, #1
 800f72a:	1076      	asrs	r6, r6, #1
 800f72c:	3708      	adds	r7, #8
 800f72e:	e772      	b.n	800f616 <_dtoa_r+0x396>
 800f730:	2502      	movs	r5, #2
 800f732:	e774      	b.n	800f61e <_dtoa_r+0x39e>
 800f734:	f8cd a020 	str.w	sl, [sp, #32]
 800f738:	464f      	mov	r7, r9
 800f73a:	e791      	b.n	800f660 <_dtoa_r+0x3e0>
 800f73c:	4b4d      	ldr	r3, [pc, #308]	; (800f874 <_dtoa_r+0x5f4>)
 800f73e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f742:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d047      	beq.n	800f7dc <_dtoa_r+0x55c>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	2000      	movs	r0, #0
 800f752:	494e      	ldr	r1, [pc, #312]	; (800f88c <_dtoa_r+0x60c>)
 800f754:	f7f1 f88a 	bl	800086c <__aeabi_ddiv>
 800f758:	462a      	mov	r2, r5
 800f75a:	4633      	mov	r3, r6
 800f75c:	f7f0 fda4 	bl	80002a8 <__aeabi_dsub>
 800f760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f764:	465d      	mov	r5, fp
 800f766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f76a:	f7f1 fa05 	bl	8000b78 <__aeabi_d2iz>
 800f76e:	4606      	mov	r6, r0
 800f770:	f7f0 fee8 	bl	8000544 <__aeabi_i2d>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f77c:	f7f0 fd94 	bl	80002a8 <__aeabi_dsub>
 800f780:	3630      	adds	r6, #48	; 0x30
 800f782:	f805 6b01 	strb.w	r6, [r5], #1
 800f786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f78a:	e9cd 0100 	strd	r0, r1, [sp]
 800f78e:	f7f1 f9b5 	bl	8000afc <__aeabi_dcmplt>
 800f792:	2800      	cmp	r0, #0
 800f794:	d163      	bne.n	800f85e <_dtoa_r+0x5de>
 800f796:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f79a:	2000      	movs	r0, #0
 800f79c:	4937      	ldr	r1, [pc, #220]	; (800f87c <_dtoa_r+0x5fc>)
 800f79e:	f7f0 fd83 	bl	80002a8 <__aeabi_dsub>
 800f7a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7a6:	f7f1 f9a9 	bl	8000afc <__aeabi_dcmplt>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	f040 80b7 	bne.w	800f91e <_dtoa_r+0x69e>
 800f7b0:	eba5 030b 	sub.w	r3, r5, fp
 800f7b4:	429f      	cmp	r7, r3
 800f7b6:	f77f af7c 	ble.w	800f6b2 <_dtoa_r+0x432>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	4b30      	ldr	r3, [pc, #192]	; (800f880 <_dtoa_r+0x600>)
 800f7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7c2:	f7f0 ff29 	bl	8000618 <__aeabi_dmul>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7cc:	4b2c      	ldr	r3, [pc, #176]	; (800f880 <_dtoa_r+0x600>)
 800f7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7d2:	f7f0 ff21 	bl	8000618 <__aeabi_dmul>
 800f7d6:	e9cd 0100 	strd	r0, r1, [sp]
 800f7da:	e7c4      	b.n	800f766 <_dtoa_r+0x4e6>
 800f7dc:	462a      	mov	r2, r5
 800f7de:	4633      	mov	r3, r6
 800f7e0:	f7f0 ff1a 	bl	8000618 <__aeabi_dmul>
 800f7e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7e8:	eb0b 0507 	add.w	r5, fp, r7
 800f7ec:	465e      	mov	r6, fp
 800f7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7f2:	f7f1 f9c1 	bl	8000b78 <__aeabi_d2iz>
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	f7f0 fea4 	bl	8000544 <__aeabi_i2d>
 800f7fc:	3730      	adds	r7, #48	; 0x30
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f806:	f7f0 fd4f 	bl	80002a8 <__aeabi_dsub>
 800f80a:	f806 7b01 	strb.w	r7, [r6], #1
 800f80e:	42ae      	cmp	r6, r5
 800f810:	e9cd 0100 	strd	r0, r1, [sp]
 800f814:	f04f 0200 	mov.w	r2, #0
 800f818:	d126      	bne.n	800f868 <_dtoa_r+0x5e8>
 800f81a:	4b1c      	ldr	r3, [pc, #112]	; (800f88c <_dtoa_r+0x60c>)
 800f81c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f820:	f7f0 fd44 	bl	80002ac <__adddf3>
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f82c:	f7f1 f984 	bl	8000b38 <__aeabi_dcmpgt>
 800f830:	2800      	cmp	r0, #0
 800f832:	d174      	bne.n	800f91e <_dtoa_r+0x69e>
 800f834:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f838:	2000      	movs	r0, #0
 800f83a:	4914      	ldr	r1, [pc, #80]	; (800f88c <_dtoa_r+0x60c>)
 800f83c:	f7f0 fd34 	bl	80002a8 <__aeabi_dsub>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f848:	f7f1 f958 	bl	8000afc <__aeabi_dcmplt>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	f43f af30 	beq.w	800f6b2 <_dtoa_r+0x432>
 800f852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f856:	2b30      	cmp	r3, #48	; 0x30
 800f858:	f105 32ff 	add.w	r2, r5, #4294967295
 800f85c:	d002      	beq.n	800f864 <_dtoa_r+0x5e4>
 800f85e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f862:	e04a      	b.n	800f8fa <_dtoa_r+0x67a>
 800f864:	4615      	mov	r5, r2
 800f866:	e7f4      	b.n	800f852 <_dtoa_r+0x5d2>
 800f868:	4b05      	ldr	r3, [pc, #20]	; (800f880 <_dtoa_r+0x600>)
 800f86a:	f7f0 fed5 	bl	8000618 <__aeabi_dmul>
 800f86e:	e9cd 0100 	strd	r0, r1, [sp]
 800f872:	e7bc      	b.n	800f7ee <_dtoa_r+0x56e>
 800f874:	0801a8c0 	.word	0x0801a8c0
 800f878:	0801a898 	.word	0x0801a898
 800f87c:	3ff00000 	.word	0x3ff00000
 800f880:	40240000 	.word	0x40240000
 800f884:	401c0000 	.word	0x401c0000
 800f888:	40140000 	.word	0x40140000
 800f88c:	3fe00000 	.word	0x3fe00000
 800f890:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f894:	465d      	mov	r5, fp
 800f896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f89a:	4630      	mov	r0, r6
 800f89c:	4639      	mov	r1, r7
 800f89e:	f7f0 ffe5 	bl	800086c <__aeabi_ddiv>
 800f8a2:	f7f1 f969 	bl	8000b78 <__aeabi_d2iz>
 800f8a6:	4680      	mov	r8, r0
 800f8a8:	f7f0 fe4c 	bl	8000544 <__aeabi_i2d>
 800f8ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8b0:	f7f0 feb2 	bl	8000618 <__aeabi_dmul>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f8c0:	f7f0 fcf2 	bl	80002a8 <__aeabi_dsub>
 800f8c4:	f805 6b01 	strb.w	r6, [r5], #1
 800f8c8:	eba5 060b 	sub.w	r6, r5, fp
 800f8cc:	45b1      	cmp	r9, r6
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	d139      	bne.n	800f948 <_dtoa_r+0x6c8>
 800f8d4:	f7f0 fcea 	bl	80002ac <__adddf3>
 800f8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8dc:	4606      	mov	r6, r0
 800f8de:	460f      	mov	r7, r1
 800f8e0:	f7f1 f92a 	bl	8000b38 <__aeabi_dcmpgt>
 800f8e4:	b9c8      	cbnz	r0, 800f91a <_dtoa_r+0x69a>
 800f8e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	f7f1 f8fb 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8f2:	b110      	cbz	r0, 800f8fa <_dtoa_r+0x67a>
 800f8f4:	f018 0f01 	tst.w	r8, #1
 800f8f8:	d10f      	bne.n	800f91a <_dtoa_r+0x69a>
 800f8fa:	9904      	ldr	r1, [sp, #16]
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f000 fabb 	bl	800fe78 <_Bfree>
 800f902:	2300      	movs	r3, #0
 800f904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f906:	702b      	strb	r3, [r5, #0]
 800f908:	f10a 0301 	add.w	r3, sl, #1
 800f90c:	6013      	str	r3, [r2, #0]
 800f90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 8241 	beq.w	800fd98 <_dtoa_r+0xb18>
 800f916:	601d      	str	r5, [r3, #0]
 800f918:	e23e      	b.n	800fd98 <_dtoa_r+0xb18>
 800f91a:	f8cd a020 	str.w	sl, [sp, #32]
 800f91e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f922:	2a39      	cmp	r2, #57	; 0x39
 800f924:	f105 33ff 	add.w	r3, r5, #4294967295
 800f928:	d108      	bne.n	800f93c <_dtoa_r+0x6bc>
 800f92a:	459b      	cmp	fp, r3
 800f92c:	d10a      	bne.n	800f944 <_dtoa_r+0x6c4>
 800f92e:	9b08      	ldr	r3, [sp, #32]
 800f930:	3301      	adds	r3, #1
 800f932:	9308      	str	r3, [sp, #32]
 800f934:	2330      	movs	r3, #48	; 0x30
 800f936:	f88b 3000 	strb.w	r3, [fp]
 800f93a:	465b      	mov	r3, fp
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	3201      	adds	r2, #1
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	e78c      	b.n	800f85e <_dtoa_r+0x5de>
 800f944:	461d      	mov	r5, r3
 800f946:	e7ea      	b.n	800f91e <_dtoa_r+0x69e>
 800f948:	2200      	movs	r2, #0
 800f94a:	4b9b      	ldr	r3, [pc, #620]	; (800fbb8 <_dtoa_r+0x938>)
 800f94c:	f7f0 fe64 	bl	8000618 <__aeabi_dmul>
 800f950:	2200      	movs	r2, #0
 800f952:	2300      	movs	r3, #0
 800f954:	4606      	mov	r6, r0
 800f956:	460f      	mov	r7, r1
 800f958:	f7f1 f8c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d09a      	beq.n	800f896 <_dtoa_r+0x616>
 800f960:	e7cb      	b.n	800f8fa <_dtoa_r+0x67a>
 800f962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f964:	2a00      	cmp	r2, #0
 800f966:	f000 808b 	beq.w	800fa80 <_dtoa_r+0x800>
 800f96a:	9a06      	ldr	r2, [sp, #24]
 800f96c:	2a01      	cmp	r2, #1
 800f96e:	dc6e      	bgt.n	800fa4e <_dtoa_r+0x7ce>
 800f970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f972:	2a00      	cmp	r2, #0
 800f974:	d067      	beq.n	800fa46 <_dtoa_r+0x7c6>
 800f976:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f97a:	9f07      	ldr	r7, [sp, #28]
 800f97c:	9d05      	ldr	r5, [sp, #20]
 800f97e:	9a05      	ldr	r2, [sp, #20]
 800f980:	2101      	movs	r1, #1
 800f982:	441a      	add	r2, r3
 800f984:	4620      	mov	r0, r4
 800f986:	9205      	str	r2, [sp, #20]
 800f988:	4498      	add	r8, r3
 800f98a:	f000 fb15 	bl	800ffb8 <__i2b>
 800f98e:	4606      	mov	r6, r0
 800f990:	2d00      	cmp	r5, #0
 800f992:	dd0c      	ble.n	800f9ae <_dtoa_r+0x72e>
 800f994:	f1b8 0f00 	cmp.w	r8, #0
 800f998:	dd09      	ble.n	800f9ae <_dtoa_r+0x72e>
 800f99a:	4545      	cmp	r5, r8
 800f99c:	9a05      	ldr	r2, [sp, #20]
 800f99e:	462b      	mov	r3, r5
 800f9a0:	bfa8      	it	ge
 800f9a2:	4643      	movge	r3, r8
 800f9a4:	1ad2      	subs	r2, r2, r3
 800f9a6:	9205      	str	r2, [sp, #20]
 800f9a8:	1aed      	subs	r5, r5, r3
 800f9aa:	eba8 0803 	sub.w	r8, r8, r3
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	b1eb      	cbz	r3, 800f9ee <_dtoa_r+0x76e>
 800f9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d067      	beq.n	800fa88 <_dtoa_r+0x808>
 800f9b8:	b18f      	cbz	r7, 800f9de <_dtoa_r+0x75e>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	463a      	mov	r2, r7
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 fb9a 	bl	80100f8 <__pow5mult>
 800f9c4:	9a04      	ldr	r2, [sp, #16]
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	4606      	mov	r6, r0
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f000 fafd 	bl	800ffca <__multiply>
 800f9d0:	9904      	ldr	r1, [sp, #16]
 800f9d2:	9008      	str	r0, [sp, #32]
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 fa4f 	bl	800fe78 <_Bfree>
 800f9da:	9b08      	ldr	r3, [sp, #32]
 800f9dc:	9304      	str	r3, [sp, #16]
 800f9de:	9b07      	ldr	r3, [sp, #28]
 800f9e0:	1bda      	subs	r2, r3, r7
 800f9e2:	d004      	beq.n	800f9ee <_dtoa_r+0x76e>
 800f9e4:	9904      	ldr	r1, [sp, #16]
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f000 fb86 	bl	80100f8 <__pow5mult>
 800f9ec:	9004      	str	r0, [sp, #16]
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f000 fae1 	bl	800ffb8 <__i2b>
 800f9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9f8:	4607      	mov	r7, r0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f000 81d0 	beq.w	800fda0 <_dtoa_r+0xb20>
 800fa00:	461a      	mov	r2, r3
 800fa02:	4601      	mov	r1, r0
 800fa04:	4620      	mov	r0, r4
 800fa06:	f000 fb77 	bl	80100f8 <__pow5mult>
 800fa0a:	9b06      	ldr	r3, [sp, #24]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	4607      	mov	r7, r0
 800fa10:	dc40      	bgt.n	800fa94 <_dtoa_r+0x814>
 800fa12:	9b00      	ldr	r3, [sp, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d139      	bne.n	800fa8c <_dtoa_r+0x80c>
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d136      	bne.n	800fa90 <_dtoa_r+0x810>
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa28:	0d1b      	lsrs	r3, r3, #20
 800fa2a:	051b      	lsls	r3, r3, #20
 800fa2c:	b12b      	cbz	r3, 800fa3a <_dtoa_r+0x7ba>
 800fa2e:	9b05      	ldr	r3, [sp, #20]
 800fa30:	3301      	adds	r3, #1
 800fa32:	9305      	str	r3, [sp, #20]
 800fa34:	f108 0801 	add.w	r8, r8, #1
 800fa38:	2301      	movs	r3, #1
 800fa3a:	9307      	str	r3, [sp, #28]
 800fa3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d12a      	bne.n	800fa98 <_dtoa_r+0x818>
 800fa42:	2001      	movs	r0, #1
 800fa44:	e030      	b.n	800faa8 <_dtoa_r+0x828>
 800fa46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa4c:	e795      	b.n	800f97a <_dtoa_r+0x6fa>
 800fa4e:	9b07      	ldr	r3, [sp, #28]
 800fa50:	f109 37ff 	add.w	r7, r9, #4294967295
 800fa54:	42bb      	cmp	r3, r7
 800fa56:	bfbf      	itttt	lt
 800fa58:	9b07      	ldrlt	r3, [sp, #28]
 800fa5a:	9707      	strlt	r7, [sp, #28]
 800fa5c:	1afa      	sublt	r2, r7, r3
 800fa5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fa60:	bfbb      	ittet	lt
 800fa62:	189b      	addlt	r3, r3, r2
 800fa64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa66:	1bdf      	subge	r7, r3, r7
 800fa68:	2700      	movlt	r7, #0
 800fa6a:	f1b9 0f00 	cmp.w	r9, #0
 800fa6e:	bfb5      	itete	lt
 800fa70:	9b05      	ldrlt	r3, [sp, #20]
 800fa72:	9d05      	ldrge	r5, [sp, #20]
 800fa74:	eba3 0509 	sublt.w	r5, r3, r9
 800fa78:	464b      	movge	r3, r9
 800fa7a:	bfb8      	it	lt
 800fa7c:	2300      	movlt	r3, #0
 800fa7e:	e77e      	b.n	800f97e <_dtoa_r+0x6fe>
 800fa80:	9f07      	ldr	r7, [sp, #28]
 800fa82:	9d05      	ldr	r5, [sp, #20]
 800fa84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa86:	e783      	b.n	800f990 <_dtoa_r+0x710>
 800fa88:	9a07      	ldr	r2, [sp, #28]
 800fa8a:	e7ab      	b.n	800f9e4 <_dtoa_r+0x764>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e7d4      	b.n	800fa3a <_dtoa_r+0x7ba>
 800fa90:	9b00      	ldr	r3, [sp, #0]
 800fa92:	e7d2      	b.n	800fa3a <_dtoa_r+0x7ba>
 800fa94:	2300      	movs	r3, #0
 800fa96:	9307      	str	r3, [sp, #28]
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fa9e:	6918      	ldr	r0, [r3, #16]
 800faa0:	f000 fa3c 	bl	800ff1c <__hi0bits>
 800faa4:	f1c0 0020 	rsb	r0, r0, #32
 800faa8:	4440      	add	r0, r8
 800faaa:	f010 001f 	ands.w	r0, r0, #31
 800faae:	d047      	beq.n	800fb40 <_dtoa_r+0x8c0>
 800fab0:	f1c0 0320 	rsb	r3, r0, #32
 800fab4:	2b04      	cmp	r3, #4
 800fab6:	dd3b      	ble.n	800fb30 <_dtoa_r+0x8b0>
 800fab8:	9b05      	ldr	r3, [sp, #20]
 800faba:	f1c0 001c 	rsb	r0, r0, #28
 800fabe:	4403      	add	r3, r0
 800fac0:	9305      	str	r3, [sp, #20]
 800fac2:	4405      	add	r5, r0
 800fac4:	4480      	add	r8, r0
 800fac6:	9b05      	ldr	r3, [sp, #20]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	dd05      	ble.n	800fad8 <_dtoa_r+0x858>
 800facc:	461a      	mov	r2, r3
 800face:	9904      	ldr	r1, [sp, #16]
 800fad0:	4620      	mov	r0, r4
 800fad2:	f000 fb5f 	bl	8010194 <__lshift>
 800fad6:	9004      	str	r0, [sp, #16]
 800fad8:	f1b8 0f00 	cmp.w	r8, #0
 800fadc:	dd05      	ble.n	800faea <_dtoa_r+0x86a>
 800fade:	4639      	mov	r1, r7
 800fae0:	4642      	mov	r2, r8
 800fae2:	4620      	mov	r0, r4
 800fae4:	f000 fb56 	bl	8010194 <__lshift>
 800fae8:	4607      	mov	r7, r0
 800faea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faec:	b353      	cbz	r3, 800fb44 <_dtoa_r+0x8c4>
 800faee:	4639      	mov	r1, r7
 800faf0:	9804      	ldr	r0, [sp, #16]
 800faf2:	f000 fba3 	bl	801023c <__mcmp>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	da24      	bge.n	800fb44 <_dtoa_r+0x8c4>
 800fafa:	2300      	movs	r3, #0
 800fafc:	220a      	movs	r2, #10
 800fafe:	9904      	ldr	r1, [sp, #16]
 800fb00:	4620      	mov	r0, r4
 800fb02:	f000 f9d0 	bl	800fea6 <__multadd>
 800fb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb08:	9004      	str	r0, [sp, #16]
 800fb0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 814d 	beq.w	800fdae <_dtoa_r+0xb2e>
 800fb14:	2300      	movs	r3, #0
 800fb16:	4631      	mov	r1, r6
 800fb18:	220a      	movs	r2, #10
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 f9c3 	bl	800fea6 <__multadd>
 800fb20:	9b02      	ldr	r3, [sp, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	4606      	mov	r6, r0
 800fb26:	dc4f      	bgt.n	800fbc8 <_dtoa_r+0x948>
 800fb28:	9b06      	ldr	r3, [sp, #24]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	dd4c      	ble.n	800fbc8 <_dtoa_r+0x948>
 800fb2e:	e011      	b.n	800fb54 <_dtoa_r+0x8d4>
 800fb30:	d0c9      	beq.n	800fac6 <_dtoa_r+0x846>
 800fb32:	9a05      	ldr	r2, [sp, #20]
 800fb34:	331c      	adds	r3, #28
 800fb36:	441a      	add	r2, r3
 800fb38:	9205      	str	r2, [sp, #20]
 800fb3a:	441d      	add	r5, r3
 800fb3c:	4498      	add	r8, r3
 800fb3e:	e7c2      	b.n	800fac6 <_dtoa_r+0x846>
 800fb40:	4603      	mov	r3, r0
 800fb42:	e7f6      	b.n	800fb32 <_dtoa_r+0x8b2>
 800fb44:	f1b9 0f00 	cmp.w	r9, #0
 800fb48:	dc38      	bgt.n	800fbbc <_dtoa_r+0x93c>
 800fb4a:	9b06      	ldr	r3, [sp, #24]
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	dd35      	ble.n	800fbbc <_dtoa_r+0x93c>
 800fb50:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb54:	9b02      	ldr	r3, [sp, #8]
 800fb56:	b963      	cbnz	r3, 800fb72 <_dtoa_r+0x8f2>
 800fb58:	4639      	mov	r1, r7
 800fb5a:	2205      	movs	r2, #5
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 f9a2 	bl	800fea6 <__multadd>
 800fb62:	4601      	mov	r1, r0
 800fb64:	4607      	mov	r7, r0
 800fb66:	9804      	ldr	r0, [sp, #16]
 800fb68:	f000 fb68 	bl	801023c <__mcmp>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	f73f adcc 	bgt.w	800f70a <_dtoa_r+0x48a>
 800fb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb74:	465d      	mov	r5, fp
 800fb76:	ea6f 0a03 	mvn.w	sl, r3
 800fb7a:	f04f 0900 	mov.w	r9, #0
 800fb7e:	4639      	mov	r1, r7
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 f979 	bl	800fe78 <_Bfree>
 800fb86:	2e00      	cmp	r6, #0
 800fb88:	f43f aeb7 	beq.w	800f8fa <_dtoa_r+0x67a>
 800fb8c:	f1b9 0f00 	cmp.w	r9, #0
 800fb90:	d005      	beq.n	800fb9e <_dtoa_r+0x91e>
 800fb92:	45b1      	cmp	r9, r6
 800fb94:	d003      	beq.n	800fb9e <_dtoa_r+0x91e>
 800fb96:	4649      	mov	r1, r9
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 f96d 	bl	800fe78 <_Bfree>
 800fb9e:	4631      	mov	r1, r6
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 f969 	bl	800fe78 <_Bfree>
 800fba6:	e6a8      	b.n	800f8fa <_dtoa_r+0x67a>
 800fba8:	2700      	movs	r7, #0
 800fbaa:	463e      	mov	r6, r7
 800fbac:	e7e1      	b.n	800fb72 <_dtoa_r+0x8f2>
 800fbae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fbb2:	463e      	mov	r6, r7
 800fbb4:	e5a9      	b.n	800f70a <_dtoa_r+0x48a>
 800fbb6:	bf00      	nop
 800fbb8:	40240000 	.word	0x40240000
 800fbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbbe:	f8cd 9008 	str.w	r9, [sp, #8]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 80fa 	beq.w	800fdbc <_dtoa_r+0xb3c>
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	dd05      	ble.n	800fbd8 <_dtoa_r+0x958>
 800fbcc:	4631      	mov	r1, r6
 800fbce:	462a      	mov	r2, r5
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f000 fadf 	bl	8010194 <__lshift>
 800fbd6:	4606      	mov	r6, r0
 800fbd8:	9b07      	ldr	r3, [sp, #28]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d04c      	beq.n	800fc78 <_dtoa_r+0x9f8>
 800fbde:	6871      	ldr	r1, [r6, #4]
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f000 f915 	bl	800fe10 <_Balloc>
 800fbe6:	6932      	ldr	r2, [r6, #16]
 800fbe8:	3202      	adds	r2, #2
 800fbea:	4605      	mov	r5, r0
 800fbec:	0092      	lsls	r2, r2, #2
 800fbee:	f106 010c 	add.w	r1, r6, #12
 800fbf2:	300c      	adds	r0, #12
 800fbf4:	f7fe fea0 	bl	800e938 <memcpy>
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	4629      	mov	r1, r5
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 fac9 	bl	8010194 <__lshift>
 800fc02:	9b00      	ldr	r3, [sp, #0]
 800fc04:	f8cd b014 	str.w	fp, [sp, #20]
 800fc08:	f003 0301 	and.w	r3, r3, #1
 800fc0c:	46b1      	mov	r9, r6
 800fc0e:	9307      	str	r3, [sp, #28]
 800fc10:	4606      	mov	r6, r0
 800fc12:	4639      	mov	r1, r7
 800fc14:	9804      	ldr	r0, [sp, #16]
 800fc16:	f7ff faa5 	bl	800f164 <quorem>
 800fc1a:	4649      	mov	r1, r9
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc22:	9804      	ldr	r0, [sp, #16]
 800fc24:	f000 fb0a 	bl	801023c <__mcmp>
 800fc28:	4632      	mov	r2, r6
 800fc2a:	9000      	str	r0, [sp, #0]
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 fb1e 	bl	8010270 <__mdiff>
 800fc34:	68c3      	ldr	r3, [r0, #12]
 800fc36:	4602      	mov	r2, r0
 800fc38:	bb03      	cbnz	r3, 800fc7c <_dtoa_r+0x9fc>
 800fc3a:	4601      	mov	r1, r0
 800fc3c:	9008      	str	r0, [sp, #32]
 800fc3e:	9804      	ldr	r0, [sp, #16]
 800fc40:	f000 fafc 	bl	801023c <__mcmp>
 800fc44:	9a08      	ldr	r2, [sp, #32]
 800fc46:	4603      	mov	r3, r0
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	9308      	str	r3, [sp, #32]
 800fc4e:	f000 f913 	bl	800fe78 <_Bfree>
 800fc52:	9b08      	ldr	r3, [sp, #32]
 800fc54:	b9a3      	cbnz	r3, 800fc80 <_dtoa_r+0xa00>
 800fc56:	9a06      	ldr	r2, [sp, #24]
 800fc58:	b992      	cbnz	r2, 800fc80 <_dtoa_r+0xa00>
 800fc5a:	9a07      	ldr	r2, [sp, #28]
 800fc5c:	b982      	cbnz	r2, 800fc80 <_dtoa_r+0xa00>
 800fc5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc62:	d029      	beq.n	800fcb8 <_dtoa_r+0xa38>
 800fc64:	9b00      	ldr	r3, [sp, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	dd01      	ble.n	800fc6e <_dtoa_r+0x9ee>
 800fc6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fc6e:	9b05      	ldr	r3, [sp, #20]
 800fc70:	1c5d      	adds	r5, r3, #1
 800fc72:	f883 8000 	strb.w	r8, [r3]
 800fc76:	e782      	b.n	800fb7e <_dtoa_r+0x8fe>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	e7c2      	b.n	800fc02 <_dtoa_r+0x982>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e7e3      	b.n	800fc48 <_dtoa_r+0x9c8>
 800fc80:	9a00      	ldr	r2, [sp, #0]
 800fc82:	2a00      	cmp	r2, #0
 800fc84:	db04      	blt.n	800fc90 <_dtoa_r+0xa10>
 800fc86:	d125      	bne.n	800fcd4 <_dtoa_r+0xa54>
 800fc88:	9a06      	ldr	r2, [sp, #24]
 800fc8a:	bb1a      	cbnz	r2, 800fcd4 <_dtoa_r+0xa54>
 800fc8c:	9a07      	ldr	r2, [sp, #28]
 800fc8e:	bb0a      	cbnz	r2, 800fcd4 <_dtoa_r+0xa54>
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	ddec      	ble.n	800fc6e <_dtoa_r+0x9ee>
 800fc94:	2201      	movs	r2, #1
 800fc96:	9904      	ldr	r1, [sp, #16]
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f000 fa7b 	bl	8010194 <__lshift>
 800fc9e:	4639      	mov	r1, r7
 800fca0:	9004      	str	r0, [sp, #16]
 800fca2:	f000 facb 	bl	801023c <__mcmp>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	dc03      	bgt.n	800fcb2 <_dtoa_r+0xa32>
 800fcaa:	d1e0      	bne.n	800fc6e <_dtoa_r+0x9ee>
 800fcac:	f018 0f01 	tst.w	r8, #1
 800fcb0:	d0dd      	beq.n	800fc6e <_dtoa_r+0x9ee>
 800fcb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fcb6:	d1d8      	bne.n	800fc6a <_dtoa_r+0x9ea>
 800fcb8:	9b05      	ldr	r3, [sp, #20]
 800fcba:	9a05      	ldr	r2, [sp, #20]
 800fcbc:	1c5d      	adds	r5, r3, #1
 800fcbe:	2339      	movs	r3, #57	; 0x39
 800fcc0:	7013      	strb	r3, [r2, #0]
 800fcc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fcc6:	2b39      	cmp	r3, #57	; 0x39
 800fcc8:	f105 32ff 	add.w	r2, r5, #4294967295
 800fccc:	d04f      	beq.n	800fd6e <_dtoa_r+0xaee>
 800fcce:	3301      	adds	r3, #1
 800fcd0:	7013      	strb	r3, [r2, #0]
 800fcd2:	e754      	b.n	800fb7e <_dtoa_r+0x8fe>
 800fcd4:	9a05      	ldr	r2, [sp, #20]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f102 0501 	add.w	r5, r2, #1
 800fcdc:	dd06      	ble.n	800fcec <_dtoa_r+0xa6c>
 800fcde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fce2:	d0e9      	beq.n	800fcb8 <_dtoa_r+0xa38>
 800fce4:	f108 0801 	add.w	r8, r8, #1
 800fce8:	9b05      	ldr	r3, [sp, #20]
 800fcea:	e7c2      	b.n	800fc72 <_dtoa_r+0x9f2>
 800fcec:	9a02      	ldr	r2, [sp, #8]
 800fcee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fcf2:	eba5 030b 	sub.w	r3, r5, fp
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d021      	beq.n	800fd3e <_dtoa_r+0xabe>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	220a      	movs	r2, #10
 800fcfe:	9904      	ldr	r1, [sp, #16]
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 f8d0 	bl	800fea6 <__multadd>
 800fd06:	45b1      	cmp	r9, r6
 800fd08:	9004      	str	r0, [sp, #16]
 800fd0a:	f04f 0300 	mov.w	r3, #0
 800fd0e:	f04f 020a 	mov.w	r2, #10
 800fd12:	4649      	mov	r1, r9
 800fd14:	4620      	mov	r0, r4
 800fd16:	d105      	bne.n	800fd24 <_dtoa_r+0xaa4>
 800fd18:	f000 f8c5 	bl	800fea6 <__multadd>
 800fd1c:	4681      	mov	r9, r0
 800fd1e:	4606      	mov	r6, r0
 800fd20:	9505      	str	r5, [sp, #20]
 800fd22:	e776      	b.n	800fc12 <_dtoa_r+0x992>
 800fd24:	f000 f8bf 	bl	800fea6 <__multadd>
 800fd28:	4631      	mov	r1, r6
 800fd2a:	4681      	mov	r9, r0
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	220a      	movs	r2, #10
 800fd30:	4620      	mov	r0, r4
 800fd32:	f000 f8b8 	bl	800fea6 <__multadd>
 800fd36:	4606      	mov	r6, r0
 800fd38:	e7f2      	b.n	800fd20 <_dtoa_r+0xaa0>
 800fd3a:	f04f 0900 	mov.w	r9, #0
 800fd3e:	2201      	movs	r2, #1
 800fd40:	9904      	ldr	r1, [sp, #16]
 800fd42:	4620      	mov	r0, r4
 800fd44:	f000 fa26 	bl	8010194 <__lshift>
 800fd48:	4639      	mov	r1, r7
 800fd4a:	9004      	str	r0, [sp, #16]
 800fd4c:	f000 fa76 	bl	801023c <__mcmp>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	dcb6      	bgt.n	800fcc2 <_dtoa_r+0xa42>
 800fd54:	d102      	bne.n	800fd5c <_dtoa_r+0xadc>
 800fd56:	f018 0f01 	tst.w	r8, #1
 800fd5a:	d1b2      	bne.n	800fcc2 <_dtoa_r+0xa42>
 800fd5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd60:	2b30      	cmp	r3, #48	; 0x30
 800fd62:	f105 32ff 	add.w	r2, r5, #4294967295
 800fd66:	f47f af0a 	bne.w	800fb7e <_dtoa_r+0x8fe>
 800fd6a:	4615      	mov	r5, r2
 800fd6c:	e7f6      	b.n	800fd5c <_dtoa_r+0xadc>
 800fd6e:	4593      	cmp	fp, r2
 800fd70:	d105      	bne.n	800fd7e <_dtoa_r+0xafe>
 800fd72:	2331      	movs	r3, #49	; 0x31
 800fd74:	f10a 0a01 	add.w	sl, sl, #1
 800fd78:	f88b 3000 	strb.w	r3, [fp]
 800fd7c:	e6ff      	b.n	800fb7e <_dtoa_r+0x8fe>
 800fd7e:	4615      	mov	r5, r2
 800fd80:	e79f      	b.n	800fcc2 <_dtoa_r+0xa42>
 800fd82:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fde8 <_dtoa_r+0xb68>
 800fd86:	e007      	b.n	800fd98 <_dtoa_r+0xb18>
 800fd88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fdec <_dtoa_r+0xb6c>
 800fd8e:	b11b      	cbz	r3, 800fd98 <_dtoa_r+0xb18>
 800fd90:	f10b 0308 	add.w	r3, fp, #8
 800fd94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd96:	6013      	str	r3, [r2, #0]
 800fd98:	4658      	mov	r0, fp
 800fd9a:	b017      	add	sp, #92	; 0x5c
 800fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda0:	9b06      	ldr	r3, [sp, #24]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	f77f ae35 	ble.w	800fa12 <_dtoa_r+0x792>
 800fda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdaa:	9307      	str	r3, [sp, #28]
 800fdac:	e649      	b.n	800fa42 <_dtoa_r+0x7c2>
 800fdae:	9b02      	ldr	r3, [sp, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	dc03      	bgt.n	800fdbc <_dtoa_r+0xb3c>
 800fdb4:	9b06      	ldr	r3, [sp, #24]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	f73f aecc 	bgt.w	800fb54 <_dtoa_r+0x8d4>
 800fdbc:	465d      	mov	r5, fp
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	9804      	ldr	r0, [sp, #16]
 800fdc2:	f7ff f9cf 	bl	800f164 <quorem>
 800fdc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fdca:	f805 8b01 	strb.w	r8, [r5], #1
 800fdce:	9a02      	ldr	r2, [sp, #8]
 800fdd0:	eba5 030b 	sub.w	r3, r5, fp
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	ddb0      	ble.n	800fd3a <_dtoa_r+0xaba>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	220a      	movs	r2, #10
 800fddc:	9904      	ldr	r1, [sp, #16]
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 f861 	bl	800fea6 <__multadd>
 800fde4:	9004      	str	r0, [sp, #16]
 800fde6:	e7ea      	b.n	800fdbe <_dtoa_r+0xb3e>
 800fde8:	0801a828 	.word	0x0801a828
 800fdec:	0801a82a 	.word	0x0801a82a

0800fdf0 <_localeconv_r>:
 800fdf0:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <_localeconv_r+0x14>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6a18      	ldr	r0, [r3, #32]
 800fdf6:	4b04      	ldr	r3, [pc, #16]	; (800fe08 <_localeconv_r+0x18>)
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	bf08      	it	eq
 800fdfc:	4618      	moveq	r0, r3
 800fdfe:	30f0      	adds	r0, #240	; 0xf0
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	20000024 	.word	0x20000024
 800fe08:	20000088 	.word	0x20000088

0800fe0c <__malloc_lock>:
 800fe0c:	4770      	bx	lr

0800fe0e <__malloc_unlock>:
 800fe0e:	4770      	bx	lr

0800fe10 <_Balloc>:
 800fe10:	b570      	push	{r4, r5, r6, lr}
 800fe12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fe14:	4604      	mov	r4, r0
 800fe16:	460e      	mov	r6, r1
 800fe18:	b93d      	cbnz	r5, 800fe2a <_Balloc+0x1a>
 800fe1a:	2010      	movs	r0, #16
 800fe1c:	f7fe fd7c 	bl	800e918 <malloc>
 800fe20:	6260      	str	r0, [r4, #36]	; 0x24
 800fe22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe26:	6005      	str	r5, [r0, #0]
 800fe28:	60c5      	str	r5, [r0, #12]
 800fe2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fe2c:	68eb      	ldr	r3, [r5, #12]
 800fe2e:	b183      	cbz	r3, 800fe52 <_Balloc+0x42>
 800fe30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fe38:	b9b8      	cbnz	r0, 800fe6a <_Balloc+0x5a>
 800fe3a:	2101      	movs	r1, #1
 800fe3c:	fa01 f506 	lsl.w	r5, r1, r6
 800fe40:	1d6a      	adds	r2, r5, #5
 800fe42:	0092      	lsls	r2, r2, #2
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 fabf 	bl	80103c8 <_calloc_r>
 800fe4a:	b160      	cbz	r0, 800fe66 <_Balloc+0x56>
 800fe4c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fe50:	e00e      	b.n	800fe70 <_Balloc+0x60>
 800fe52:	2221      	movs	r2, #33	; 0x21
 800fe54:	2104      	movs	r1, #4
 800fe56:	4620      	mov	r0, r4
 800fe58:	f000 fab6 	bl	80103c8 <_calloc_r>
 800fe5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe5e:	60e8      	str	r0, [r5, #12]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1e4      	bne.n	800fe30 <_Balloc+0x20>
 800fe66:	2000      	movs	r0, #0
 800fe68:	bd70      	pop	{r4, r5, r6, pc}
 800fe6a:	6802      	ldr	r2, [r0, #0]
 800fe6c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fe70:	2300      	movs	r3, #0
 800fe72:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe76:	e7f7      	b.n	800fe68 <_Balloc+0x58>

0800fe78 <_Bfree>:
 800fe78:	b570      	push	{r4, r5, r6, lr}
 800fe7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	b93c      	cbnz	r4, 800fe92 <_Bfree+0x1a>
 800fe82:	2010      	movs	r0, #16
 800fe84:	f7fe fd48 	bl	800e918 <malloc>
 800fe88:	6270      	str	r0, [r6, #36]	; 0x24
 800fe8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe8e:	6004      	str	r4, [r0, #0]
 800fe90:	60c4      	str	r4, [r0, #12]
 800fe92:	b13d      	cbz	r5, 800fea4 <_Bfree+0x2c>
 800fe94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fe96:	686a      	ldr	r2, [r5, #4]
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe9e:	6029      	str	r1, [r5, #0]
 800fea0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fea4:	bd70      	pop	{r4, r5, r6, pc}

0800fea6 <__multadd>:
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	690d      	ldr	r5, [r1, #16]
 800feac:	461f      	mov	r7, r3
 800feae:	4606      	mov	r6, r0
 800feb0:	460c      	mov	r4, r1
 800feb2:	f101 0c14 	add.w	ip, r1, #20
 800feb6:	2300      	movs	r3, #0
 800feb8:	f8dc 0000 	ldr.w	r0, [ip]
 800febc:	b281      	uxth	r1, r0
 800febe:	fb02 7101 	mla	r1, r2, r1, r7
 800fec2:	0c0f      	lsrs	r7, r1, #16
 800fec4:	0c00      	lsrs	r0, r0, #16
 800fec6:	fb02 7000 	mla	r0, r2, r0, r7
 800feca:	b289      	uxth	r1, r1
 800fecc:	3301      	adds	r3, #1
 800fece:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fed2:	429d      	cmp	r5, r3
 800fed4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fed8:	f84c 1b04 	str.w	r1, [ip], #4
 800fedc:	dcec      	bgt.n	800feb8 <__multadd+0x12>
 800fede:	b1d7      	cbz	r7, 800ff16 <__multadd+0x70>
 800fee0:	68a3      	ldr	r3, [r4, #8]
 800fee2:	42ab      	cmp	r3, r5
 800fee4:	dc12      	bgt.n	800ff0c <__multadd+0x66>
 800fee6:	6861      	ldr	r1, [r4, #4]
 800fee8:	4630      	mov	r0, r6
 800feea:	3101      	adds	r1, #1
 800feec:	f7ff ff90 	bl	800fe10 <_Balloc>
 800fef0:	6922      	ldr	r2, [r4, #16]
 800fef2:	3202      	adds	r2, #2
 800fef4:	f104 010c 	add.w	r1, r4, #12
 800fef8:	4680      	mov	r8, r0
 800fefa:	0092      	lsls	r2, r2, #2
 800fefc:	300c      	adds	r0, #12
 800fefe:	f7fe fd1b 	bl	800e938 <memcpy>
 800ff02:	4621      	mov	r1, r4
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7ff ffb7 	bl	800fe78 <_Bfree>
 800ff0a:	4644      	mov	r4, r8
 800ff0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff10:	3501      	adds	r5, #1
 800ff12:	615f      	str	r7, [r3, #20]
 800ff14:	6125      	str	r5, [r4, #16]
 800ff16:	4620      	mov	r0, r4
 800ff18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff1c <__hi0bits>:
 800ff1c:	0c02      	lsrs	r2, r0, #16
 800ff1e:	0412      	lsls	r2, r2, #16
 800ff20:	4603      	mov	r3, r0
 800ff22:	b9b2      	cbnz	r2, 800ff52 <__hi0bits+0x36>
 800ff24:	0403      	lsls	r3, r0, #16
 800ff26:	2010      	movs	r0, #16
 800ff28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ff2c:	bf04      	itt	eq
 800ff2e:	021b      	lsleq	r3, r3, #8
 800ff30:	3008      	addeq	r0, #8
 800ff32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ff36:	bf04      	itt	eq
 800ff38:	011b      	lsleq	r3, r3, #4
 800ff3a:	3004      	addeq	r0, #4
 800ff3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ff40:	bf04      	itt	eq
 800ff42:	009b      	lsleq	r3, r3, #2
 800ff44:	3002      	addeq	r0, #2
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	db06      	blt.n	800ff58 <__hi0bits+0x3c>
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	d503      	bpl.n	800ff56 <__hi0bits+0x3a>
 800ff4e:	3001      	adds	r0, #1
 800ff50:	4770      	bx	lr
 800ff52:	2000      	movs	r0, #0
 800ff54:	e7e8      	b.n	800ff28 <__hi0bits+0xc>
 800ff56:	2020      	movs	r0, #32
 800ff58:	4770      	bx	lr

0800ff5a <__lo0bits>:
 800ff5a:	6803      	ldr	r3, [r0, #0]
 800ff5c:	f013 0207 	ands.w	r2, r3, #7
 800ff60:	4601      	mov	r1, r0
 800ff62:	d00b      	beq.n	800ff7c <__lo0bits+0x22>
 800ff64:	07da      	lsls	r2, r3, #31
 800ff66:	d423      	bmi.n	800ffb0 <__lo0bits+0x56>
 800ff68:	0798      	lsls	r0, r3, #30
 800ff6a:	bf49      	itett	mi
 800ff6c:	085b      	lsrmi	r3, r3, #1
 800ff6e:	089b      	lsrpl	r3, r3, #2
 800ff70:	2001      	movmi	r0, #1
 800ff72:	600b      	strmi	r3, [r1, #0]
 800ff74:	bf5c      	itt	pl
 800ff76:	600b      	strpl	r3, [r1, #0]
 800ff78:	2002      	movpl	r0, #2
 800ff7a:	4770      	bx	lr
 800ff7c:	b298      	uxth	r0, r3
 800ff7e:	b9a8      	cbnz	r0, 800ffac <__lo0bits+0x52>
 800ff80:	0c1b      	lsrs	r3, r3, #16
 800ff82:	2010      	movs	r0, #16
 800ff84:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff88:	bf04      	itt	eq
 800ff8a:	0a1b      	lsreq	r3, r3, #8
 800ff8c:	3008      	addeq	r0, #8
 800ff8e:	071a      	lsls	r2, r3, #28
 800ff90:	bf04      	itt	eq
 800ff92:	091b      	lsreq	r3, r3, #4
 800ff94:	3004      	addeq	r0, #4
 800ff96:	079a      	lsls	r2, r3, #30
 800ff98:	bf04      	itt	eq
 800ff9a:	089b      	lsreq	r3, r3, #2
 800ff9c:	3002      	addeq	r0, #2
 800ff9e:	07da      	lsls	r2, r3, #31
 800ffa0:	d402      	bmi.n	800ffa8 <__lo0bits+0x4e>
 800ffa2:	085b      	lsrs	r3, r3, #1
 800ffa4:	d006      	beq.n	800ffb4 <__lo0bits+0x5a>
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	600b      	str	r3, [r1, #0]
 800ffaa:	4770      	bx	lr
 800ffac:	4610      	mov	r0, r2
 800ffae:	e7e9      	b.n	800ff84 <__lo0bits+0x2a>
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	4770      	bx	lr
 800ffb4:	2020      	movs	r0, #32
 800ffb6:	4770      	bx	lr

0800ffb8 <__i2b>:
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	460c      	mov	r4, r1
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	f7ff ff27 	bl	800fe10 <_Balloc>
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	6144      	str	r4, [r0, #20]
 800ffc6:	6102      	str	r2, [r0, #16]
 800ffc8:	bd10      	pop	{r4, pc}

0800ffca <__multiply>:
 800ffca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffce:	4614      	mov	r4, r2
 800ffd0:	690a      	ldr	r2, [r1, #16]
 800ffd2:	6923      	ldr	r3, [r4, #16]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	bfb8      	it	lt
 800ffd8:	460b      	movlt	r3, r1
 800ffda:	4688      	mov	r8, r1
 800ffdc:	bfbc      	itt	lt
 800ffde:	46a0      	movlt	r8, r4
 800ffe0:	461c      	movlt	r4, r3
 800ffe2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ffe6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ffea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fff2:	eb07 0609 	add.w	r6, r7, r9
 800fff6:	42b3      	cmp	r3, r6
 800fff8:	bfb8      	it	lt
 800fffa:	3101      	addlt	r1, #1
 800fffc:	f7ff ff08 	bl	800fe10 <_Balloc>
 8010000:	f100 0514 	add.w	r5, r0, #20
 8010004:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010008:	462b      	mov	r3, r5
 801000a:	2200      	movs	r2, #0
 801000c:	4573      	cmp	r3, lr
 801000e:	d316      	bcc.n	801003e <__multiply+0x74>
 8010010:	f104 0214 	add.w	r2, r4, #20
 8010014:	f108 0114 	add.w	r1, r8, #20
 8010018:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801001c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	9201      	str	r2, [sp, #4]
 8010026:	4293      	cmp	r3, r2
 8010028:	d80c      	bhi.n	8010044 <__multiply+0x7a>
 801002a:	2e00      	cmp	r6, #0
 801002c:	dd03      	ble.n	8010036 <__multiply+0x6c>
 801002e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010032:	2b00      	cmp	r3, #0
 8010034:	d05d      	beq.n	80100f2 <__multiply+0x128>
 8010036:	6106      	str	r6, [r0, #16]
 8010038:	b003      	add	sp, #12
 801003a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003e:	f843 2b04 	str.w	r2, [r3], #4
 8010042:	e7e3      	b.n	801000c <__multiply+0x42>
 8010044:	f8b2 b000 	ldrh.w	fp, [r2]
 8010048:	f1bb 0f00 	cmp.w	fp, #0
 801004c:	d023      	beq.n	8010096 <__multiply+0xcc>
 801004e:	4689      	mov	r9, r1
 8010050:	46ac      	mov	ip, r5
 8010052:	f04f 0800 	mov.w	r8, #0
 8010056:	f859 4b04 	ldr.w	r4, [r9], #4
 801005a:	f8dc a000 	ldr.w	sl, [ip]
 801005e:	b2a3      	uxth	r3, r4
 8010060:	fa1f fa8a 	uxth.w	sl, sl
 8010064:	fb0b a303 	mla	r3, fp, r3, sl
 8010068:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801006c:	f8dc 4000 	ldr.w	r4, [ip]
 8010070:	4443      	add	r3, r8
 8010072:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010076:	fb0b 840a 	mla	r4, fp, sl, r8
 801007a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801007e:	46e2      	mov	sl, ip
 8010080:	b29b      	uxth	r3, r3
 8010082:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010086:	454f      	cmp	r7, r9
 8010088:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801008c:	f84a 3b04 	str.w	r3, [sl], #4
 8010090:	d82b      	bhi.n	80100ea <__multiply+0x120>
 8010092:	f8cc 8004 	str.w	r8, [ip, #4]
 8010096:	9b01      	ldr	r3, [sp, #4]
 8010098:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801009c:	3204      	adds	r2, #4
 801009e:	f1ba 0f00 	cmp.w	sl, #0
 80100a2:	d020      	beq.n	80100e6 <__multiply+0x11c>
 80100a4:	682b      	ldr	r3, [r5, #0]
 80100a6:	4689      	mov	r9, r1
 80100a8:	46a8      	mov	r8, r5
 80100aa:	f04f 0b00 	mov.w	fp, #0
 80100ae:	f8b9 c000 	ldrh.w	ip, [r9]
 80100b2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80100b6:	fb0a 440c 	mla	r4, sl, ip, r4
 80100ba:	445c      	add	r4, fp
 80100bc:	46c4      	mov	ip, r8
 80100be:	b29b      	uxth	r3, r3
 80100c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80100c4:	f84c 3b04 	str.w	r3, [ip], #4
 80100c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80100cc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80100d0:	0c1b      	lsrs	r3, r3, #16
 80100d2:	fb0a b303 	mla	r3, sl, r3, fp
 80100d6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80100da:	454f      	cmp	r7, r9
 80100dc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80100e0:	d805      	bhi.n	80100ee <__multiply+0x124>
 80100e2:	f8c8 3004 	str.w	r3, [r8, #4]
 80100e6:	3504      	adds	r5, #4
 80100e8:	e79b      	b.n	8010022 <__multiply+0x58>
 80100ea:	46d4      	mov	ip, sl
 80100ec:	e7b3      	b.n	8010056 <__multiply+0x8c>
 80100ee:	46e0      	mov	r8, ip
 80100f0:	e7dd      	b.n	80100ae <__multiply+0xe4>
 80100f2:	3e01      	subs	r6, #1
 80100f4:	e799      	b.n	801002a <__multiply+0x60>
	...

080100f8 <__pow5mult>:
 80100f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100fc:	4615      	mov	r5, r2
 80100fe:	f012 0203 	ands.w	r2, r2, #3
 8010102:	4606      	mov	r6, r0
 8010104:	460f      	mov	r7, r1
 8010106:	d007      	beq.n	8010118 <__pow5mult+0x20>
 8010108:	3a01      	subs	r2, #1
 801010a:	4c21      	ldr	r4, [pc, #132]	; (8010190 <__pow5mult+0x98>)
 801010c:	2300      	movs	r3, #0
 801010e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010112:	f7ff fec8 	bl	800fea6 <__multadd>
 8010116:	4607      	mov	r7, r0
 8010118:	10ad      	asrs	r5, r5, #2
 801011a:	d035      	beq.n	8010188 <__pow5mult+0x90>
 801011c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801011e:	b93c      	cbnz	r4, 8010130 <__pow5mult+0x38>
 8010120:	2010      	movs	r0, #16
 8010122:	f7fe fbf9 	bl	800e918 <malloc>
 8010126:	6270      	str	r0, [r6, #36]	; 0x24
 8010128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801012c:	6004      	str	r4, [r0, #0]
 801012e:	60c4      	str	r4, [r0, #12]
 8010130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010138:	b94c      	cbnz	r4, 801014e <__pow5mult+0x56>
 801013a:	f240 2171 	movw	r1, #625	; 0x271
 801013e:	4630      	mov	r0, r6
 8010140:	f7ff ff3a 	bl	800ffb8 <__i2b>
 8010144:	2300      	movs	r3, #0
 8010146:	f8c8 0008 	str.w	r0, [r8, #8]
 801014a:	4604      	mov	r4, r0
 801014c:	6003      	str	r3, [r0, #0]
 801014e:	f04f 0800 	mov.w	r8, #0
 8010152:	07eb      	lsls	r3, r5, #31
 8010154:	d50a      	bpl.n	801016c <__pow5mult+0x74>
 8010156:	4639      	mov	r1, r7
 8010158:	4622      	mov	r2, r4
 801015a:	4630      	mov	r0, r6
 801015c:	f7ff ff35 	bl	800ffca <__multiply>
 8010160:	4639      	mov	r1, r7
 8010162:	4681      	mov	r9, r0
 8010164:	4630      	mov	r0, r6
 8010166:	f7ff fe87 	bl	800fe78 <_Bfree>
 801016a:	464f      	mov	r7, r9
 801016c:	106d      	asrs	r5, r5, #1
 801016e:	d00b      	beq.n	8010188 <__pow5mult+0x90>
 8010170:	6820      	ldr	r0, [r4, #0]
 8010172:	b938      	cbnz	r0, 8010184 <__pow5mult+0x8c>
 8010174:	4622      	mov	r2, r4
 8010176:	4621      	mov	r1, r4
 8010178:	4630      	mov	r0, r6
 801017a:	f7ff ff26 	bl	800ffca <__multiply>
 801017e:	6020      	str	r0, [r4, #0]
 8010180:	f8c0 8000 	str.w	r8, [r0]
 8010184:	4604      	mov	r4, r0
 8010186:	e7e4      	b.n	8010152 <__pow5mult+0x5a>
 8010188:	4638      	mov	r0, r7
 801018a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801018e:	bf00      	nop
 8010190:	0801a988 	.word	0x0801a988

08010194 <__lshift>:
 8010194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010198:	460c      	mov	r4, r1
 801019a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801019e:	6923      	ldr	r3, [r4, #16]
 80101a0:	6849      	ldr	r1, [r1, #4]
 80101a2:	eb0a 0903 	add.w	r9, sl, r3
 80101a6:	68a3      	ldr	r3, [r4, #8]
 80101a8:	4607      	mov	r7, r0
 80101aa:	4616      	mov	r6, r2
 80101ac:	f109 0501 	add.w	r5, r9, #1
 80101b0:	42ab      	cmp	r3, r5
 80101b2:	db32      	blt.n	801021a <__lshift+0x86>
 80101b4:	4638      	mov	r0, r7
 80101b6:	f7ff fe2b 	bl	800fe10 <_Balloc>
 80101ba:	2300      	movs	r3, #0
 80101bc:	4680      	mov	r8, r0
 80101be:	f100 0114 	add.w	r1, r0, #20
 80101c2:	461a      	mov	r2, r3
 80101c4:	4553      	cmp	r3, sl
 80101c6:	db2b      	blt.n	8010220 <__lshift+0x8c>
 80101c8:	6920      	ldr	r0, [r4, #16]
 80101ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101ce:	f104 0314 	add.w	r3, r4, #20
 80101d2:	f016 021f 	ands.w	r2, r6, #31
 80101d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101de:	d025      	beq.n	801022c <__lshift+0x98>
 80101e0:	f1c2 0e20 	rsb	lr, r2, #32
 80101e4:	2000      	movs	r0, #0
 80101e6:	681e      	ldr	r6, [r3, #0]
 80101e8:	468a      	mov	sl, r1
 80101ea:	4096      	lsls	r6, r2
 80101ec:	4330      	orrs	r0, r6
 80101ee:	f84a 0b04 	str.w	r0, [sl], #4
 80101f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80101f6:	459c      	cmp	ip, r3
 80101f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80101fc:	d814      	bhi.n	8010228 <__lshift+0x94>
 80101fe:	6048      	str	r0, [r1, #4]
 8010200:	b108      	cbz	r0, 8010206 <__lshift+0x72>
 8010202:	f109 0502 	add.w	r5, r9, #2
 8010206:	3d01      	subs	r5, #1
 8010208:	4638      	mov	r0, r7
 801020a:	f8c8 5010 	str.w	r5, [r8, #16]
 801020e:	4621      	mov	r1, r4
 8010210:	f7ff fe32 	bl	800fe78 <_Bfree>
 8010214:	4640      	mov	r0, r8
 8010216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021a:	3101      	adds	r1, #1
 801021c:	005b      	lsls	r3, r3, #1
 801021e:	e7c7      	b.n	80101b0 <__lshift+0x1c>
 8010220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010224:	3301      	adds	r3, #1
 8010226:	e7cd      	b.n	80101c4 <__lshift+0x30>
 8010228:	4651      	mov	r1, sl
 801022a:	e7dc      	b.n	80101e6 <__lshift+0x52>
 801022c:	3904      	subs	r1, #4
 801022e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010232:	f841 2f04 	str.w	r2, [r1, #4]!
 8010236:	459c      	cmp	ip, r3
 8010238:	d8f9      	bhi.n	801022e <__lshift+0x9a>
 801023a:	e7e4      	b.n	8010206 <__lshift+0x72>

0801023c <__mcmp>:
 801023c:	6903      	ldr	r3, [r0, #16]
 801023e:	690a      	ldr	r2, [r1, #16]
 8010240:	1a9b      	subs	r3, r3, r2
 8010242:	b530      	push	{r4, r5, lr}
 8010244:	d10c      	bne.n	8010260 <__mcmp+0x24>
 8010246:	0092      	lsls	r2, r2, #2
 8010248:	3014      	adds	r0, #20
 801024a:	3114      	adds	r1, #20
 801024c:	1884      	adds	r4, r0, r2
 801024e:	4411      	add	r1, r2
 8010250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010258:	4295      	cmp	r5, r2
 801025a:	d003      	beq.n	8010264 <__mcmp+0x28>
 801025c:	d305      	bcc.n	801026a <__mcmp+0x2e>
 801025e:	2301      	movs	r3, #1
 8010260:	4618      	mov	r0, r3
 8010262:	bd30      	pop	{r4, r5, pc}
 8010264:	42a0      	cmp	r0, r4
 8010266:	d3f3      	bcc.n	8010250 <__mcmp+0x14>
 8010268:	e7fa      	b.n	8010260 <__mcmp+0x24>
 801026a:	f04f 33ff 	mov.w	r3, #4294967295
 801026e:	e7f7      	b.n	8010260 <__mcmp+0x24>

08010270 <__mdiff>:
 8010270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	460d      	mov	r5, r1
 8010276:	4607      	mov	r7, r0
 8010278:	4611      	mov	r1, r2
 801027a:	4628      	mov	r0, r5
 801027c:	4614      	mov	r4, r2
 801027e:	f7ff ffdd 	bl	801023c <__mcmp>
 8010282:	1e06      	subs	r6, r0, #0
 8010284:	d108      	bne.n	8010298 <__mdiff+0x28>
 8010286:	4631      	mov	r1, r6
 8010288:	4638      	mov	r0, r7
 801028a:	f7ff fdc1 	bl	800fe10 <_Balloc>
 801028e:	2301      	movs	r3, #1
 8010290:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010298:	bfa4      	itt	ge
 801029a:	4623      	movge	r3, r4
 801029c:	462c      	movge	r4, r5
 801029e:	4638      	mov	r0, r7
 80102a0:	6861      	ldr	r1, [r4, #4]
 80102a2:	bfa6      	itte	ge
 80102a4:	461d      	movge	r5, r3
 80102a6:	2600      	movge	r6, #0
 80102a8:	2601      	movlt	r6, #1
 80102aa:	f7ff fdb1 	bl	800fe10 <_Balloc>
 80102ae:	692b      	ldr	r3, [r5, #16]
 80102b0:	60c6      	str	r6, [r0, #12]
 80102b2:	6926      	ldr	r6, [r4, #16]
 80102b4:	f105 0914 	add.w	r9, r5, #20
 80102b8:	f104 0214 	add.w	r2, r4, #20
 80102bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80102c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80102c4:	f100 0514 	add.w	r5, r0, #20
 80102c8:	f04f 0e00 	mov.w	lr, #0
 80102cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80102d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80102d4:	fa1e f18a 	uxtah	r1, lr, sl
 80102d8:	b2a3      	uxth	r3, r4
 80102da:	1ac9      	subs	r1, r1, r3
 80102dc:	0c23      	lsrs	r3, r4, #16
 80102de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80102e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80102e6:	b289      	uxth	r1, r1
 80102e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80102ec:	45c8      	cmp	r8, r9
 80102ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80102f2:	4694      	mov	ip, r2
 80102f4:	f845 3b04 	str.w	r3, [r5], #4
 80102f8:	d8e8      	bhi.n	80102cc <__mdiff+0x5c>
 80102fa:	45bc      	cmp	ip, r7
 80102fc:	d304      	bcc.n	8010308 <__mdiff+0x98>
 80102fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010302:	b183      	cbz	r3, 8010326 <__mdiff+0xb6>
 8010304:	6106      	str	r6, [r0, #16]
 8010306:	e7c5      	b.n	8010294 <__mdiff+0x24>
 8010308:	f85c 1b04 	ldr.w	r1, [ip], #4
 801030c:	fa1e f381 	uxtah	r3, lr, r1
 8010310:	141a      	asrs	r2, r3, #16
 8010312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010316:	b29b      	uxth	r3, r3
 8010318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801031c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010320:	f845 3b04 	str.w	r3, [r5], #4
 8010324:	e7e9      	b.n	80102fa <__mdiff+0x8a>
 8010326:	3e01      	subs	r6, #1
 8010328:	e7e9      	b.n	80102fe <__mdiff+0x8e>

0801032a <__d2b>:
 801032a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801032e:	460e      	mov	r6, r1
 8010330:	2101      	movs	r1, #1
 8010332:	ec59 8b10 	vmov	r8, r9, d0
 8010336:	4615      	mov	r5, r2
 8010338:	f7ff fd6a 	bl	800fe10 <_Balloc>
 801033c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010340:	4607      	mov	r7, r0
 8010342:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010346:	bb34      	cbnz	r4, 8010396 <__d2b+0x6c>
 8010348:	9301      	str	r3, [sp, #4]
 801034a:	f1b8 0300 	subs.w	r3, r8, #0
 801034e:	d027      	beq.n	80103a0 <__d2b+0x76>
 8010350:	a802      	add	r0, sp, #8
 8010352:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010356:	f7ff fe00 	bl	800ff5a <__lo0bits>
 801035a:	9900      	ldr	r1, [sp, #0]
 801035c:	b1f0      	cbz	r0, 801039c <__d2b+0x72>
 801035e:	9a01      	ldr	r2, [sp, #4]
 8010360:	f1c0 0320 	rsb	r3, r0, #32
 8010364:	fa02 f303 	lsl.w	r3, r2, r3
 8010368:	430b      	orrs	r3, r1
 801036a:	40c2      	lsrs	r2, r0
 801036c:	617b      	str	r3, [r7, #20]
 801036e:	9201      	str	r2, [sp, #4]
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	61bb      	str	r3, [r7, #24]
 8010374:	2b00      	cmp	r3, #0
 8010376:	bf14      	ite	ne
 8010378:	2102      	movne	r1, #2
 801037a:	2101      	moveq	r1, #1
 801037c:	6139      	str	r1, [r7, #16]
 801037e:	b1c4      	cbz	r4, 80103b2 <__d2b+0x88>
 8010380:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010384:	4404      	add	r4, r0
 8010386:	6034      	str	r4, [r6, #0]
 8010388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801038c:	6028      	str	r0, [r5, #0]
 801038e:	4638      	mov	r0, r7
 8010390:	b003      	add	sp, #12
 8010392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801039a:	e7d5      	b.n	8010348 <__d2b+0x1e>
 801039c:	6179      	str	r1, [r7, #20]
 801039e:	e7e7      	b.n	8010370 <__d2b+0x46>
 80103a0:	a801      	add	r0, sp, #4
 80103a2:	f7ff fdda 	bl	800ff5a <__lo0bits>
 80103a6:	9b01      	ldr	r3, [sp, #4]
 80103a8:	617b      	str	r3, [r7, #20]
 80103aa:	2101      	movs	r1, #1
 80103ac:	6139      	str	r1, [r7, #16]
 80103ae:	3020      	adds	r0, #32
 80103b0:	e7e5      	b.n	801037e <__d2b+0x54>
 80103b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80103b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103ba:	6030      	str	r0, [r6, #0]
 80103bc:	6918      	ldr	r0, [r3, #16]
 80103be:	f7ff fdad 	bl	800ff1c <__hi0bits>
 80103c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80103c6:	e7e1      	b.n	801038c <__d2b+0x62>

080103c8 <_calloc_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	fb02 f401 	mul.w	r4, r2, r1
 80103ce:	4621      	mov	r1, r4
 80103d0:	f7fe fb14 	bl	800e9fc <_malloc_r>
 80103d4:	4605      	mov	r5, r0
 80103d6:	b118      	cbz	r0, 80103e0 <_calloc_r+0x18>
 80103d8:	4622      	mov	r2, r4
 80103da:	2100      	movs	r1, #0
 80103dc:	f7fe fab7 	bl	800e94e <memset>
 80103e0:	4628      	mov	r0, r5
 80103e2:	bd38      	pop	{r3, r4, r5, pc}

080103e4 <__ascii_mbtowc>:
 80103e4:	b082      	sub	sp, #8
 80103e6:	b901      	cbnz	r1, 80103ea <__ascii_mbtowc+0x6>
 80103e8:	a901      	add	r1, sp, #4
 80103ea:	b142      	cbz	r2, 80103fe <__ascii_mbtowc+0x1a>
 80103ec:	b14b      	cbz	r3, 8010402 <__ascii_mbtowc+0x1e>
 80103ee:	7813      	ldrb	r3, [r2, #0]
 80103f0:	600b      	str	r3, [r1, #0]
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	1c10      	adds	r0, r2, #0
 80103f6:	bf18      	it	ne
 80103f8:	2001      	movne	r0, #1
 80103fa:	b002      	add	sp, #8
 80103fc:	4770      	bx	lr
 80103fe:	4610      	mov	r0, r2
 8010400:	e7fb      	b.n	80103fa <__ascii_mbtowc+0x16>
 8010402:	f06f 0001 	mvn.w	r0, #1
 8010406:	e7f8      	b.n	80103fa <__ascii_mbtowc+0x16>

08010408 <__ascii_wctomb>:
 8010408:	b149      	cbz	r1, 801041e <__ascii_wctomb+0x16>
 801040a:	2aff      	cmp	r2, #255	; 0xff
 801040c:	bf85      	ittet	hi
 801040e:	238a      	movhi	r3, #138	; 0x8a
 8010410:	6003      	strhi	r3, [r0, #0]
 8010412:	700a      	strbls	r2, [r1, #0]
 8010414:	f04f 30ff 	movhi.w	r0, #4294967295
 8010418:	bf98      	it	ls
 801041a:	2001      	movls	r0, #1
 801041c:	4770      	bx	lr
 801041e:	4608      	mov	r0, r1
 8010420:	4770      	bx	lr
	...

08010424 <sqrt>:
 8010424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010428:	ed2d 8b02 	vpush	{d8}
 801042c:	b08b      	sub	sp, #44	; 0x2c
 801042e:	ec55 4b10 	vmov	r4, r5, d0
 8010432:	f000 f8a1 	bl	8010578 <__ieee754_sqrt>
 8010436:	4b26      	ldr	r3, [pc, #152]	; (80104d0 <sqrt+0xac>)
 8010438:	eeb0 8a40 	vmov.f32	s16, s0
 801043c:	eef0 8a60 	vmov.f32	s17, s1
 8010440:	f993 6000 	ldrsb.w	r6, [r3]
 8010444:	1c73      	adds	r3, r6, #1
 8010446:	d02a      	beq.n	801049e <sqrt+0x7a>
 8010448:	4622      	mov	r2, r4
 801044a:	462b      	mov	r3, r5
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7f0 fb7c 	bl	8000b4c <__aeabi_dcmpun>
 8010454:	4607      	mov	r7, r0
 8010456:	bb10      	cbnz	r0, 801049e <sqrt+0x7a>
 8010458:	f04f 0800 	mov.w	r8, #0
 801045c:	f04f 0900 	mov.w	r9, #0
 8010460:	4642      	mov	r2, r8
 8010462:	464b      	mov	r3, r9
 8010464:	4620      	mov	r0, r4
 8010466:	4629      	mov	r1, r5
 8010468:	f7f0 fb48 	bl	8000afc <__aeabi_dcmplt>
 801046c:	b1b8      	cbz	r0, 801049e <sqrt+0x7a>
 801046e:	2301      	movs	r3, #1
 8010470:	9300      	str	r3, [sp, #0]
 8010472:	4b18      	ldr	r3, [pc, #96]	; (80104d4 <sqrt+0xb0>)
 8010474:	9301      	str	r3, [sp, #4]
 8010476:	9708      	str	r7, [sp, #32]
 8010478:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801047c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010480:	b9b6      	cbnz	r6, 80104b0 <sqrt+0x8c>
 8010482:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8010486:	4668      	mov	r0, sp
 8010488:	f000 f929 	bl	80106de <matherr>
 801048c:	b1d0      	cbz	r0, 80104c4 <sqrt+0xa0>
 801048e:	9b08      	ldr	r3, [sp, #32]
 8010490:	b11b      	cbz	r3, 801049a <sqrt+0x76>
 8010492:	f7fe fa17 	bl	800e8c4 <__errno>
 8010496:	9b08      	ldr	r3, [sp, #32]
 8010498:	6003      	str	r3, [r0, #0]
 801049a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801049e:	eeb0 0a48 	vmov.f32	s0, s16
 80104a2:	eef0 0a68 	vmov.f32	s1, s17
 80104a6:	b00b      	add	sp, #44	; 0x2c
 80104a8:	ecbd 8b02 	vpop	{d8}
 80104ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b0:	4642      	mov	r2, r8
 80104b2:	464b      	mov	r3, r9
 80104b4:	4640      	mov	r0, r8
 80104b6:	4649      	mov	r1, r9
 80104b8:	f7f0 f9d8 	bl	800086c <__aeabi_ddiv>
 80104bc:	2e02      	cmp	r6, #2
 80104be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80104c2:	d1e0      	bne.n	8010486 <sqrt+0x62>
 80104c4:	f7fe f9fe 	bl	800e8c4 <__errno>
 80104c8:	2321      	movs	r3, #33	; 0x21
 80104ca:	6003      	str	r3, [r0, #0]
 80104cc:	e7df      	b.n	801048e <sqrt+0x6a>
 80104ce:	bf00      	nop
 80104d0:	200001f4 	.word	0x200001f4
 80104d4:	0801aa9f 	.word	0x0801aa9f

080104d8 <sqrtf>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	ed2d 8b02 	vpush	{d8}
 80104de:	b08a      	sub	sp, #40	; 0x28
 80104e0:	eeb0 8a40 	vmov.f32	s16, s0
 80104e4:	f000 f8f8 	bl	80106d8 <__ieee754_sqrtf>
 80104e8:	4b21      	ldr	r3, [pc, #132]	; (8010570 <sqrtf+0x98>)
 80104ea:	f993 4000 	ldrsb.w	r4, [r3]
 80104ee:	1c63      	adds	r3, r4, #1
 80104f0:	d02c      	beq.n	801054c <sqrtf+0x74>
 80104f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80104f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fa:	d627      	bvs.n	801054c <sqrtf+0x74>
 80104fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010504:	d522      	bpl.n	801054c <sqrtf+0x74>
 8010506:	2301      	movs	r3, #1
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	4b1a      	ldr	r3, [pc, #104]	; (8010574 <sqrtf+0x9c>)
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	ee18 0a10 	vmov	r0, s16
 8010512:	2300      	movs	r3, #0
 8010514:	9308      	str	r3, [sp, #32]
 8010516:	f7f0 f827 	bl	8000568 <__aeabi_f2d>
 801051a:	2200      	movs	r2, #0
 801051c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010524:	2300      	movs	r3, #0
 8010526:	b9ac      	cbnz	r4, 8010554 <sqrtf+0x7c>
 8010528:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801052c:	4668      	mov	r0, sp
 801052e:	f000 f8d6 	bl	80106de <matherr>
 8010532:	b1b8      	cbz	r0, 8010564 <sqrtf+0x8c>
 8010534:	9b08      	ldr	r3, [sp, #32]
 8010536:	b11b      	cbz	r3, 8010540 <sqrtf+0x68>
 8010538:	f7fe f9c4 	bl	800e8c4 <__errno>
 801053c:	9b08      	ldr	r3, [sp, #32]
 801053e:	6003      	str	r3, [r0, #0]
 8010540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010544:	f7f0 fb60 	bl	8000c08 <__aeabi_d2f>
 8010548:	ee00 0a10 	vmov	s0, r0
 801054c:	b00a      	add	sp, #40	; 0x28
 801054e:	ecbd 8b02 	vpop	{d8}
 8010552:	bd10      	pop	{r4, pc}
 8010554:	4610      	mov	r0, r2
 8010556:	4619      	mov	r1, r3
 8010558:	f7f0 f988 	bl	800086c <__aeabi_ddiv>
 801055c:	2c02      	cmp	r4, #2
 801055e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010562:	d1e3      	bne.n	801052c <sqrtf+0x54>
 8010564:	f7fe f9ae 	bl	800e8c4 <__errno>
 8010568:	2321      	movs	r3, #33	; 0x21
 801056a:	6003      	str	r3, [r0, #0]
 801056c:	e7e2      	b.n	8010534 <sqrtf+0x5c>
 801056e:	bf00      	nop
 8010570:	200001f4 	.word	0x200001f4
 8010574:	0801aaa4 	.word	0x0801aaa4

08010578 <__ieee754_sqrt>:
 8010578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057c:	4955      	ldr	r1, [pc, #340]	; (80106d4 <__ieee754_sqrt+0x15c>)
 801057e:	ec55 4b10 	vmov	r4, r5, d0
 8010582:	43a9      	bics	r1, r5
 8010584:	462b      	mov	r3, r5
 8010586:	462a      	mov	r2, r5
 8010588:	d112      	bne.n	80105b0 <__ieee754_sqrt+0x38>
 801058a:	ee10 2a10 	vmov	r2, s0
 801058e:	ee10 0a10 	vmov	r0, s0
 8010592:	4629      	mov	r1, r5
 8010594:	f7f0 f840 	bl	8000618 <__aeabi_dmul>
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	4620      	mov	r0, r4
 801059e:	4629      	mov	r1, r5
 80105a0:	f7ef fe84 	bl	80002ac <__adddf3>
 80105a4:	4604      	mov	r4, r0
 80105a6:	460d      	mov	r5, r1
 80105a8:	ec45 4b10 	vmov	d0, r4, r5
 80105ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b0:	2d00      	cmp	r5, #0
 80105b2:	ee10 0a10 	vmov	r0, s0
 80105b6:	4621      	mov	r1, r4
 80105b8:	dc0f      	bgt.n	80105da <__ieee754_sqrt+0x62>
 80105ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80105be:	4330      	orrs	r0, r6
 80105c0:	d0f2      	beq.n	80105a8 <__ieee754_sqrt+0x30>
 80105c2:	b155      	cbz	r5, 80105da <__ieee754_sqrt+0x62>
 80105c4:	ee10 2a10 	vmov	r2, s0
 80105c8:	4620      	mov	r0, r4
 80105ca:	4629      	mov	r1, r5
 80105cc:	f7ef fe6c 	bl	80002a8 <__aeabi_dsub>
 80105d0:	4602      	mov	r2, r0
 80105d2:	460b      	mov	r3, r1
 80105d4:	f7f0 f94a 	bl	800086c <__aeabi_ddiv>
 80105d8:	e7e4      	b.n	80105a4 <__ieee754_sqrt+0x2c>
 80105da:	151b      	asrs	r3, r3, #20
 80105dc:	d073      	beq.n	80106c6 <__ieee754_sqrt+0x14e>
 80105de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80105e2:	07dd      	lsls	r5, r3, #31
 80105e4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80105e8:	bf48      	it	mi
 80105ea:	0fc8      	lsrmi	r0, r1, #31
 80105ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80105f0:	bf44      	itt	mi
 80105f2:	0049      	lslmi	r1, r1, #1
 80105f4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80105f8:	2500      	movs	r5, #0
 80105fa:	1058      	asrs	r0, r3, #1
 80105fc:	0fcb      	lsrs	r3, r1, #31
 80105fe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010602:	0049      	lsls	r1, r1, #1
 8010604:	2316      	movs	r3, #22
 8010606:	462c      	mov	r4, r5
 8010608:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801060c:	19a7      	adds	r7, r4, r6
 801060e:	4297      	cmp	r7, r2
 8010610:	bfde      	ittt	le
 8010612:	19bc      	addle	r4, r7, r6
 8010614:	1bd2      	suble	r2, r2, r7
 8010616:	19ad      	addle	r5, r5, r6
 8010618:	0fcf      	lsrs	r7, r1, #31
 801061a:	3b01      	subs	r3, #1
 801061c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010620:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010624:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010628:	d1f0      	bne.n	801060c <__ieee754_sqrt+0x94>
 801062a:	f04f 0c20 	mov.w	ip, #32
 801062e:	469e      	mov	lr, r3
 8010630:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010634:	42a2      	cmp	r2, r4
 8010636:	eb06 070e 	add.w	r7, r6, lr
 801063a:	dc02      	bgt.n	8010642 <__ieee754_sqrt+0xca>
 801063c:	d112      	bne.n	8010664 <__ieee754_sqrt+0xec>
 801063e:	428f      	cmp	r7, r1
 8010640:	d810      	bhi.n	8010664 <__ieee754_sqrt+0xec>
 8010642:	2f00      	cmp	r7, #0
 8010644:	eb07 0e06 	add.w	lr, r7, r6
 8010648:	da42      	bge.n	80106d0 <__ieee754_sqrt+0x158>
 801064a:	f1be 0f00 	cmp.w	lr, #0
 801064e:	db3f      	blt.n	80106d0 <__ieee754_sqrt+0x158>
 8010650:	f104 0801 	add.w	r8, r4, #1
 8010654:	1b12      	subs	r2, r2, r4
 8010656:	428f      	cmp	r7, r1
 8010658:	bf88      	it	hi
 801065a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801065e:	1bc9      	subs	r1, r1, r7
 8010660:	4433      	add	r3, r6
 8010662:	4644      	mov	r4, r8
 8010664:	0052      	lsls	r2, r2, #1
 8010666:	f1bc 0c01 	subs.w	ip, ip, #1
 801066a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801066e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010672:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010676:	d1dd      	bne.n	8010634 <__ieee754_sqrt+0xbc>
 8010678:	430a      	orrs	r2, r1
 801067a:	d006      	beq.n	801068a <__ieee754_sqrt+0x112>
 801067c:	1c5c      	adds	r4, r3, #1
 801067e:	bf13      	iteet	ne
 8010680:	3301      	addne	r3, #1
 8010682:	3501      	addeq	r5, #1
 8010684:	4663      	moveq	r3, ip
 8010686:	f023 0301 	bicne.w	r3, r3, #1
 801068a:	106a      	asrs	r2, r5, #1
 801068c:	085b      	lsrs	r3, r3, #1
 801068e:	07e9      	lsls	r1, r5, #31
 8010690:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010694:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010698:	bf48      	it	mi
 801069a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801069e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80106a2:	461c      	mov	r4, r3
 80106a4:	e780      	b.n	80105a8 <__ieee754_sqrt+0x30>
 80106a6:	0aca      	lsrs	r2, r1, #11
 80106a8:	3815      	subs	r0, #21
 80106aa:	0549      	lsls	r1, r1, #21
 80106ac:	2a00      	cmp	r2, #0
 80106ae:	d0fa      	beq.n	80106a6 <__ieee754_sqrt+0x12e>
 80106b0:	02d6      	lsls	r6, r2, #11
 80106b2:	d50a      	bpl.n	80106ca <__ieee754_sqrt+0x152>
 80106b4:	f1c3 0420 	rsb	r4, r3, #32
 80106b8:	fa21 f404 	lsr.w	r4, r1, r4
 80106bc:	1e5d      	subs	r5, r3, #1
 80106be:	4099      	lsls	r1, r3
 80106c0:	4322      	orrs	r2, r4
 80106c2:	1b43      	subs	r3, r0, r5
 80106c4:	e78b      	b.n	80105de <__ieee754_sqrt+0x66>
 80106c6:	4618      	mov	r0, r3
 80106c8:	e7f0      	b.n	80106ac <__ieee754_sqrt+0x134>
 80106ca:	0052      	lsls	r2, r2, #1
 80106cc:	3301      	adds	r3, #1
 80106ce:	e7ef      	b.n	80106b0 <__ieee754_sqrt+0x138>
 80106d0:	46a0      	mov	r8, r4
 80106d2:	e7bf      	b.n	8010654 <__ieee754_sqrt+0xdc>
 80106d4:	7ff00000 	.word	0x7ff00000

080106d8 <__ieee754_sqrtf>:
 80106d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80106dc:	4770      	bx	lr

080106de <matherr>:
 80106de:	2000      	movs	r0, #0
 80106e0:	4770      	bx	lr
	...

080106e4 <_sbrk>:
 80106e4:	4b04      	ldr	r3, [pc, #16]	; (80106f8 <_sbrk+0x14>)
 80106e6:	6819      	ldr	r1, [r3, #0]
 80106e8:	4602      	mov	r2, r0
 80106ea:	b909      	cbnz	r1, 80106f0 <_sbrk+0xc>
 80106ec:	4903      	ldr	r1, [pc, #12]	; (80106fc <_sbrk+0x18>)
 80106ee:	6019      	str	r1, [r3, #0]
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	4402      	add	r2, r0
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	4770      	bx	lr
 80106f8:	200006f4 	.word	0x200006f4
 80106fc:	20018ec8 	.word	0x20018ec8

08010700 <_init>:
 8010700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010702:	bf00      	nop
 8010704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010706:	bc08      	pop	{r3}
 8010708:	469e      	mov	lr, r3
 801070a:	4770      	bx	lr

0801070c <_fini>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	bf00      	nop
 8010710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010712:	bc08      	pop	{r3}
 8010714:	469e      	mov	lr, r3
 8010716:	4770      	bx	lr
